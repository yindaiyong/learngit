package com.sams.batchfile.service.impl;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import com.sams.common.utils.PageHelperUtils;
import com.sams.common.web.PageInfo;
import com.sams.custom.mapper.ChannelInfoMapper;
import com.sams.custom.mapper.ContractInfoMapper;
import com.sams.custom.model.ChannelInfo;

import org.apache.commons.lang3.StringUtils;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.google.common.collect.Maps;
import com.sams.batchfile.service.AccountReqTmpService;
import com.sams.batchfile.service.ContractService;
import com.sams.batchfile.service.ExchangeReqTmpService;
import com.sams.batchfile.service.ProcessStepInfoService;
import com.sams.common.constant.Const;
import com.sams.common.exception.ExceptionConStants;
import com.sams.custom.mapper.ProcessStepInfoMapper;
import com.sams.custom.model.DayEndProcessor;
import com.sams.custom.model.ProcessStepInfo;

@Service
public class ProcessStepInfoServiceImpl implements ProcessStepInfoService{
	private static Logger LOGGER = LoggerFactory.getLogger(ProcessStepInfoServiceImpl.class);
	
    @Autowired
    private ProcessStepInfoMapper processStepInfoMapper;

    @Autowired
    private ChannelInfoMapper channelInfoMapper;
    
    @Autowired
    private AccountReqTmpService accountReqTmpService;
    
    @Autowired
    private ExchangeReqTmpService exchangeReqTmpService;
    
    @Autowired
    private ContractInfoMapper contractInfoMapper;
    
    
	
	/**
	 * 根据流程编号获取流程配置信息
	 * @param flowCode 处理流程编码
	 * @return List<P_process_step_info> 信息集合
	 */
	@Override
	public Map<String,Object> selectByProcessStepInfo(String flowCode,String stepCode,Integer operType,String specialFile)throws Exception {
		Map<String,Object> retMap = Maps.newHashMap();
		ProcessStepInfo pProcessStepInfo=new ProcessStepInfo();
		pProcessStepInfo.setPsiFlowCode(flowCode);
		pProcessStepInfo.setPsiProcessStep(stepCode);
		pProcessStepInfo.setOperType(operType);
		pProcessStepInfo.setSpecialFile(specialFile);
		List<ProcessStepInfo> listReq=processStepInfoMapper.selectByFlowCode(pProcessStepInfo);
		retMap.put("LISTREQ", listReq);
		return retMap;
	}
	
	/*public Map<String,Object> checkProcessStepInfoList(ProcessStepInfo pProcessStepInfo){
		Map<String,Object> retMap = Maps.newHashMap();
		List<ProcessStepInfo> listReq=processStepInfoMapper.selectByFlowCode(pProcessStepInfo);
		if(listReq==null||listReq.size()==0){
			retMap = ExceptionConStants.getRetObject(ExceptionConStants.retCode_S00004);
			retMap.put("retMsg", "根据流程编号获取流程配置信息拿到的集合为空");
		}else{
			retMap = ExceptionConStants.getRetObject(ExceptionConStants.retCode_0000);
			retMap.put("listReq", listReq);
		}
		
		return retMap;
	}*/

	/**
	 * 校验流程配置信息是否为空
	 * @param List<P_process_step_info> 流程配置信息信息集合
	 * @return Map<String, Object> 信息集合
	 */
	@Override
	public Map<String, Object> checkProcessStepInfoCount(List<ProcessStepInfo> list) {
		Map<String, Object> retMap=new HashMap<String, Object>();
		LOGGER.info("校验根据交易日期、产品类型获取非交易日开始");
		if(list.size()==0){
			retMap=ExceptionConStants.getRetObject(ExceptionConStants.retCode_S00001);
			LOGGER.info("校验根据交易日期、产品类型获取非交易日信息记录集为0");
		}else if(list==null){
			retMap=ExceptionConStants.getRetObject(ExceptionConStants.retCode_S00006);
			LOGGER.info("校验根据交易日期、产品类型获取非交易日信息记录集为空");
		}else{
			retMap=ExceptionConStants.getRetObject(ExceptionConStants.retCode_0000,list);
		}
		LOGGER.info("校验根据交易日期、产品类型获取非交易日结束");
		return retMap;
	}

	@Override
	public List<DayEndProcessor> queryProcessStat(PageInfo pageInfo, Map condition) {
		PageHelperUtils.startPage(pageInfo);
		return processStepInfoMapper.queryStepInfo(Const.ACCOUNT_DATA_STEP,Const.ACCOUNT_CONFIRM_STEP,Const.SEND_FILE_STEP,condition);
	}

	@Override
	public List<ProcessStepInfo> selectByFlowCode(String branchCode) {
		ProcessStepInfo step = new ProcessStepInfo();
		step.setPsiFlowCode(branchCode);
		return processStepInfoMapper.selectByFlowCode(step);
	}

	/**
	 * 文件处理步骤信息
	 * @param List<P_process_step_info> 流程配置信息信息集合
	 * @return Map<String, Object> 信息集合
	 */
	@Override
	public List<Map<String, Object>> processStepInfo(Map<String, Object> processStepMap) {
		return processStepInfoMapper.processStepInfo(processStepMap);
	}

	/**
	 * 步骤表单个处理步骤
	 * @param List<P_process_step_info> 流程配置信息信息集合
	 * @return Map<String, Object> 信息集合
	 */
	@Override
	public ProcessStepInfo selectStepInfo(Map<String, Object> qryStepMap) {
		return processStepInfoMapper.selectStepInfo(qryStepMap);
	}

	/**
	 * T日数据回退
	 * @Title: dataRoolback   
	 * @author: wangchao 2019年11月11日 下午18:13:40
	 * @param: @return      
	 * @return: Object      
	 * @throws
	 */
	@Override
	public void dataRoolback(String channelCode,String transDate) {
		//删除账户申请表数据
		int accountSum = accountReqTmpService.deleteByChannelCodeBusinessDateReq(channelCode, transDate);
		LOGGER.info("渠道"+channelCode+"日期"+transDate+"的账户申请数据已删除"+accountSum+"条");
		//删除交易申请表数据
		int transSum = exchangeReqTmpService.deleteTransReqDate(channelCode, transDate);
		LOGGER.info("渠道"+channelCode+"日期"+transDate+"的交易申请数据已删除"+transSum+"条");
		//删除合同信息
		int contractSum = contractInfoMapper.deleteContractInfo(channelCode, transDate);
		LOGGER.info("渠道"+channelCode+"日期"+transDate+"的合同申请数据已删除"+contractSum+"条");
	}

}
