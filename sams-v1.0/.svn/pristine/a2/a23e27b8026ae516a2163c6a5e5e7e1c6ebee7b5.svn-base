package com.sams.batchfile.service.impl;

import com.alibaba.fastjson.JSONObject;
import com.sams.batchfile.service.ExportFileService;
import com.sams.common.exception.ExceptionConStants;
import com.sams.common.utils.DateUtils;
import com.sams.common.utils.PageHelperUtils;
import com.sams.common.utils.PublicCreateExcelUtils;
import com.sams.common.web.PageInfo;
import com.sams.custom.mapper.ChannelProductMapper;
import com.sams.custom.mapper.DAgentIncomePayDataMapper;
import com.sams.custom.model.ChannelProduct;
import com.sams.custom.model.DAgentIncomePayData;
import com.sams.custom.model.result.CreateExcelBean;
import com.sun.corba.se.spi.orbutil.threadpool.Work;
import org.apache.commons.collections.MapUtils;
import org.apache.poi.ss.usermodel.*;
import org.apache.poi.xssf.usermodel.XSSFCell;
import org.apache.poi.xssf.usermodel.XSSFWorkbook;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import java.io.FileInputStream;
import java.io.InputStream;
import java.util.*;

/**
 * @ClassName ExportFileServiceImpl
 * 描述 : 导入导出数据
 * @Author weijunjie
 * @Date 2020/1/19 13:43
 */
@Service
public class ExportFileServiceImpl implements ExportFileService {

    @Autowired
    private DAgentIncomePayDataMapper agentIncomePayDataMapper;

    @Autowired
    private ChannelProductMapper channelProductMapper;

    private Logger logger = LoggerFactory.getLogger(this.getClass());

    /**
     * @Description readFile
     * @Author weijunjie
     * @Date 2020/1/20 13:52
     **/
    public String readFile(InputStream inputStream) {
        String res = "";
        try {
            FileInputStream fileIn = (FileInputStream) inputStream;
            Workbook workbook = WorkbookFactory.create(inputStream);
            //获取数据对象 1、获取标题行对应的数据信息
            Sheet sheetAt = workbook.getSheetAt(0);
            Row row = sheetAt.getRow(0);
            JSONObject oldTitleMap = getAIPTitleForPersonal();
            JSONObject newTitleMap = new JSONObject(true);
            int i=0;
            for(String key:oldTitleMap.keySet()){
                newTitleMap.put(key,row.getCell(i).getStringCellValue());
                i++;
            }
            res = checkExcelTitle(newTitleMap,oldTitleMap);
            if(res.equals(ExceptionConStants.retCode_0000)){
                //执行文件数据解析操作

                res = "验证通过，上传数据成功";
            }
        }catch (Exception e){
            e.printStackTrace();
        }
        return res;
    }

    /**
     * @Description 获取一个workbook
     * @Author weijunjie
     * @Date 2020/1/20 10:02
     **/
    public Workbook getTemplate(String type){
        List<JSONObject> jsonObjects = new ArrayList<>();
//        jsonObjects.add(getAIPTitleForPersonal());
        JSONObject titleObj = getAIPTitleForPersonal();
        if("2".equals(type)){
            titleObj = getAIPTitleForOrgan();
        }
        return PublicCreateExcelUtils.createWorkbook(titleObj,null,jsonObjects,"数据模板");
    }

    /**
     * @Description 验证excel文件标题是否合法
     * @Author weijunjie
     * @Date 2020/1/20 10:51
     **/
    public String checkExcelTitle(JSONObject newTitleMap,JSONObject oldTitleMap){
        String errorMsg = ExceptionConStants.retCode_0000;
        for(String key:oldTitleMap.keySet()){
            String oldVal = oldTitleMap.getString(key);
            String newVal = newTitleMap.getString(key);
            if(!newVal.equals(oldVal)){
                errorMsg = newVal+"!="+oldVal+"文件数据异常";
                break;
            }
        }
        return errorMsg;
    }

    /**
     * @Description 导入excel文件入库
     * @Author weijunjie
     * @Date 2020/2/10 18:22
     **/
    public String insertAllData(InputStream inputStream,String type,String channelCode){
        try {
            Workbook workbook = new XSSFWorkbook(inputStream);
            Sheet sheet = workbook.getSheetAt(0);
            JSONObject titleJSON = getAIPTitleForPersonal();
            if("2".equals(type)){
                titleJSON = getAIPTitleForOrgan();
            }
            //标题行拿去做文件准确性校验
            Sheet sheetAt = workbook.getSheetAt(0);
            Row row = sheetAt.getRow(0);
            JSONObject newTitleMap = new JSONObject(true);
            int z=0;
            for(String key:titleJSON.keySet()){
                newTitleMap.put(key,row.getCell(z).getStringCellValue());
                z++;
            }
            String res = checkExcelTitle(newTitleMap,titleJSON);
            if(!res.equals(ExceptionConStants.retCode_0000)){
                //执行文件数据解析操作
                return "文件格式有误，上传失败";
            }
            List<DAgentIncomePayData> dAgentIncomePayDataList = readWorkBook(titleJSON, sheet, type, channelCode);
            int i = saveDate(dAgentIncomePayDataList);
            if(i>0){
                return "success";
            }else{
                return "上传保存失败！";
            }
        }catch (Exception e){
            e.printStackTrace();
            return "上传保存异常！";
        }
    }

    /**
     * @Description 读取解析sheet
     * @Author weijunjie
     * @Date 2020/2/4 10:24
     **/
    public List<DAgentIncomePayData> readWorkBook(JSONObject titleJson,Sheet sheet,String type,String channelCode){
        int lastRowNum = sheet.getLastRowNum();
        //创建缓存map
        HashMap<String, String> cashMap = new HashMap<>();
        List<DAgentIncomePayData> jsonObjects = new ArrayList<>();
        for(int i = 1;i<=lastRowNum;i++){
            Row row = sheet.getRow(i);
            int j = 0;
            for(String key:titleJson.keySet()){
                //强制读取String数据
                Cell cell = row.getCell(j);
                if(null != cell){
                    cell.setCellType(Cell.CELL_TYPE_STRING);
                    String cellValueToString = cell.getStringCellValue();
                    titleJson.put(key,cellValueToString);
                }else{
                    continue;
                }
                j++;
            }
            //解析组转数据库需要的数据data
            DAgentIncomePayData agentInComePayDate = createAgentInComePayDate(titleJson, type,channelCode,cashMap);
            jsonObjects.add(agentInComePayDate);
        }
        return jsonObjects;
    }

    public String getCellValueToString(Cell cell){
        String res = "";
        if(null == cell){
            return "";
        }
        int cellType = cell.getCellType();
        switch (cellType){
            case 0:res = cell.getNumericCellValue()+"";break;
            case 1:res = cell.getStringCellValue();break;
            case 2:res = cell.getCellFormula()+"";break;
            case 3:res = cell.getStringCellValue()+"";break;
            case 4:res = cell.getBooleanCellValue()+"";break;
            case 5:res = cell.getErrorCellValue()+"";break;
        }
        return res;
    }

    /**
     * @Description 反洗钱非居民信息保存至数据库
     * @Author weijunjie
     * @Date 2020/2/5 16:39
     **/
    public int saveDate(List<DAgentIncomePayData> dAgentIncomePayDatas){
        List<List<DAgentIncomePayData>> lists = subBeanList( 50,dAgentIncomePayDatas);
        int newCount = 0;
        for(List<DAgentIncomePayData> list:lists){
            newCount +=agentIncomePayDataMapper.insertByBatch(list);
        }
        return newCount;
    }

    /**
     * @Description 分段批量插入数据库数据  分段方法
     * @Author weijunjie
     * @Date 2020/1/7 15:37
     **/
    public List<List<DAgentIncomePayData>> subBeanList(Integer max, List<DAgentIncomePayData> beanList){
        List<List<DAgentIncomePayData>> resList = new ArrayList<>();
        max = max == null?50:max;
        if(beanList.size() <= max){
            resList.add(beanList);
            return resList;
        }else{
            int out = beanList.size()%max;
            int z = beanList.size()/max;
            for(int i=0;i<=z;i++){
                if(i==z){
                    resList.add(beanList.subList(i*max,i*max+out));
                }else{
                    resList.add(beanList.subList(i*max,(i+1)*max));
                }
            }
        }
        return resList;
    }

    /**
     * @Description 根据产品名称获取产品编号
     * @Author weijunjie
     * @Date 2020/2/10 18:38
     **/
    public String getProductCode(String name,HashMap<String, String> cashMap){
        //新建缓存map
        ChannelProduct channelProduct = null;
        if(cashMap.keySet().contains(name)){
            return MapUtils.getString(cashMap,name);
        }else{
            channelProduct = channelProductMapper.selectCodeByName(name);
            if(null == channelProduct){
                return "";
            }else{
                cashMap.put(name,channelProduct.getCpChannelProductCode());
                return channelProduct.getCpChannelProductCode();
            }
        }


    }

    /**
     * @Description 组装个人/机构收付数据实体类 ( type = 1 个人  type = 2 机构)
     * @Author weijunjie
     * @Date 2020/1/20 17:10
     **/
    public DAgentIncomePayData createAgentInComePayDate(JSONObject jsonObject,String type,String channelCode,HashMap<String, String> cashMap){
        DAgentIncomePayData dAgentIncomePayData = new DAgentIncomePayData();
        dAgentIncomePayData.setAipdChannelCode(channelCode);
        dAgentIncomePayData.setAipdType(type);
        //获取产品code
        String productCode = getProductCode(jsonObject.getString("product_name"),cashMap);
        dAgentIncomePayData.setAipdProductCode(productCode);
        //个人 & 机构 公共字段
        dAgentIncomePayData.setAipdProductName(jsonObject.getString("product_name"));
        dAgentIncomePayData.setAipdCustomerName(jsonObject.getString("customer_name"));
        dAgentIncomePayData.setAipdCustomerType(jsonObject.getString("customer_type"));
        dAgentIncomePayData.setAipdCertificateType(jsonObject.getString("certificate_type"));
        dAgentIncomePayData.setAipdCertificateNo(jsonObject.getString("certificate_no"));
        dAgentIncomePayData.setAipdPostOfficeCode(jsonObject.getString("post_office_code"));
        dAgentIncomePayData.setAipdPostOfficeAddress(jsonObject.getString("post_office_address"));
        dAgentIncomePayData.setAipdTelNumber(jsonObject.getString("tel_number"));
        dAgentIncomePayData.setAipdPhoneNumber(jsonObject.getString("phone_number"));
        dAgentIncomePayData.setAipdContactsAddress(jsonObject.getString("contacts_address"));
        dAgentIncomePayData.setAipdContactsTelNumber(jsonObject.getString("contacts_tel_number"));
        dAgentIncomePayData.setAipdPaymentAmount(jsonObject.getString("payment_amount"));
        dAgentIncomePayData.setAipdBenefitLevel(jsonObject.getString("benefit_level"));
        dAgentIncomePayData.setAipdPaymentDate(jsonObject.getString("payment_date"));
        dAgentIncomePayData.setAipdCertificateStartTime(jsonObject.getString("certificate_start_time"));
        dAgentIncomePayData.setAipdCertificateEndTime(jsonObject.getString("certificate_end_time"));
        dAgentIncomePayData.setAipdCountry(jsonObject.getString("country"));
        dAgentIncomePayData.setAipdCapitalSource(jsonObject.getString("capital_source"));
        if("1".equals(type)){
            //个人特殊字段
            dAgentIncomePayData.setAipdIndiInfo(makeIndiInfo(jsonObject));
        }else{
            //机构特殊字段
            dAgentIncomePayData.setAipdArrivalAccountDate(jsonObject.getString("arrival_account_date"));
            dAgentIncomePayData.setAipdInstInfo(makeInstInfo(jsonObject));
            dAgentIncomePayData.setAipdInstLegalInfo(makeInstLegalInfo(jsonObject));
            dAgentIncomePayData.setAipdInstAuthInfo(makeInstAuthInfo(jsonObject));
            dAgentIncomePayData.setAipdInstChargeInfo(makeInstChargeInfo(jsonObject));
            dAgentIncomePayData.setAipdInstShareInfo(makeInstShareInfo(jsonObject));
        }
        //数据库记录标记相关字段
        dAgentIncomePayData.setAipdUploadTime(DateUtils.formatDate(new Date(),"yyyyMMdd"));
        dAgentIncomePayData.setAipdStatus("1");
        return dAgentIncomePayData;
    }

    /**
     * @Description 根据查询条件下载相关数据信息
     * @Author weijunjie
     * @Date 2020/2/11 14:25
     **/
    public Workbook downloadExcelByChannel(Map<String, Object> condition){
        Workbook workbook = null;
        //数据库根据条件查询数据
        List<DAgentIncomePayData> dAgentIncomePayData = agentIncomePayDataMapper.selectData(condition);
        if(null == dAgentIncomePayData || dAgentIncomePayData.size() == 0){
            logger.info("当前条件查询无数据");
            return null;
        }
        String ciType = MapUtils.getString(condition, "ciType");
        if("1".equals(ciType)){
            ArrayList<CreateExcelBean> excelDataForIndi = createExcelDataForIndi(dAgentIncomePayData);
            workbook = PublicCreateExcelUtils.createWorkbook(excelDataForIndi);
        }else{
            ArrayList<CreateExcelBean> excelDataForIndi = createExcelDataForInst(dAgentIncomePayData);
            workbook = PublicCreateExcelUtils.createWorkbook(excelDataForIndi);
        }
        //判断当前数据是否组装workbook成功，成功更新导出时间 导出状态
        if(null != workbook){
            condition.put("status","2");
            condition.put("upTime",DateUtils.formatDate(new Date(),"yyyyMMdd"));
            agentIncomePayDataMapper.updateData(condition);
        }
        return workbook;
    }

    /**
     * @Description 组装个人反洗钱非居民信息对象
     * @Author weijunjie
     * @Date 2020/2/11 14:51
     **/
    public ArrayList<CreateExcelBean> createExcelDataForIndi(List<DAgentIncomePayData> dataList){
        ArrayList<CreateExcelBean> excelBeans = new ArrayList<>();
        CreateExcelBean excelBeanSheet1 = new CreateExcelBean();
        List<Map<String,Object>> sheetDateList1 = new ArrayList<>();
        CreateExcelBean excelBeanSheet2 = new CreateExcelBean();
        List<Map<String,Object>> sheetDateList2 = new ArrayList<>();
        for(DAgentIncomePayData data:dataList){
            Map<String,Object> sheetData1 = new HashMap<>();
            //获取个人信息解析json数据
            String indiInfo = data.getAipdIndiInfo();
            JSONObject jsonIndiInfo = JSONObject.parseObject(indiInfo);
            //sheet1 数据组装
            //未明确字段
            sheetData1.put("export_date","");
            sheetData1.put("financi_account","");
            sheetData1.put("insure_date","");
            sheetData1.put("insure_amount","");
            sheetData1.put("empty_code","");
            //争议字段
            sheetData1.put("amount",data.getAipdPaymentAmount());
            sheetData1.put("channel_code",data.getAipdChannelCode());
            sheetData1.put("product_code",data.getAipdProductCode());
            sheetData1.put("product_name",data.getAipdProductName());
            sheetData1.put("customer_name",data.getAipdCustomerName());
            sheetData1.put("customer_type",data.getAipdCustomerType());
            sheetData1.put("certificate_type",data.getAipdCertificateType());
            sheetData1.put("certificate_no",data.getAipdCertificateNo());
            sheetData1.put("post_office_code",data.getAipdPostOfficeCode());
            sheetData1.put("post_office_address",data.getAipdPostOfficeAddress());
            sheetData1.put("tel_number",data.getAipdTelNumber());
            sheetData1.put("phone_number",data.getAipdPhoneNumber());
            sheetData1.put("benefit_level",data.getAipdBenefitLevel());
            sheetData1.put("payment_date",data.getAipdPaymentDate());
            sheetData1.put("certificate_start_time",data.getAipdCertificateStartTime());
            sheetData1.put("certificate_end_time",data.getAipdCertificateEndTime());
            sheetData1.put("country",data.getAipdCountry());
            sheetData1.put("capital_source",data.getAipdCapitalSource());
            sheetData1.put("pi_vocation",jsonIndiInfo.getString("pi_vocation"));
            sheetData1.put("pi_gender",jsonIndiInfo.getString("pi_gender"));
            sheetData1.put("pi_birthday",jsonIndiInfo.getString("pi_birthday"));
            sheetData1.put("pi_indetityAttestation",jsonIndiInfo.getString("pi_indetityAttestation"));
            sheetData1.put("pi_originalAddress",jsonIndiInfo.getString("pi_originalAddress"));
            sheetData1.put("pi_birthAddress",jsonIndiInfo.getString("pi_birthAddress"));
            sheetData1.put("pi_taxCountry",jsonIndiInfo.getString("pi_taxCountry"));
            sheetData1.put("pi_taxAccount",jsonIndiInfo.getString("pi_taxAccount"));
            sheetData1.put("pi_taxReason",jsonIndiInfo.getString("pi_taxReason"));
            //sheet2基本信息数据组装
            Map<String,Object> sheetData2 = new HashMap<>();
            sheetData2.put("certificate_no",data.getAipdCertificateNo());
            sheetData2.put("channel_code",data.getAipdChannelCode());
            sheetData2.put("post_office_code",data.getAipdPostOfficeCode());
            sheetData2.put("post_office_address",data.getAipdPostOfficeAddress());
            sheetData2.put("phone_number",data.getAipdPhoneNumber());
            sheetData2.put("tel_number",data.getAipdTelNumber());
            sheetData2.put("country",data.getAipdCountry());
            sheetData2.put("capital_source",data.getAipdCapitalSource());
            sheetData2.put("pi_vocation",jsonIndiInfo.getString("pi_vocation"));
            sheetData2.put("pi_gender",jsonIndiInfo.getString("pi_gender"));
            sheetData2.put("pi_birthday",jsonIndiInfo.getString("pi_birthday"));
            sheetDateList1.add(sheetData1);
            sheetDateList2.add(sheetData2);
        }
        excelBeanSheet1.setSheetName("个人信息");
        excelBeanSheet1.setDataList(sheetDateList1);
        excelBeanSheet1.setSheetTitle(getIndiTitleForSheet1());

        excelBeanSheet2.setSheetName("基本信息");
        excelBeanSheet2.setDataList(sheetDateList2);
        excelBeanSheet2.setSheetTitle(getIndiTitleForSheet2());

        excelBeans.add(excelBeanSheet1);
        excelBeans.add(excelBeanSheet2);
        return excelBeans;
    }

    /**
     * @Description 组装机构反洗钱非居民信息对象
     * @Author weijunjie
     * @Date 2020/2/11 14:51
     **/
    public ArrayList<CreateExcelBean> createExcelDataForInst(List<DAgentIncomePayData> dataList){
        ArrayList<CreateExcelBean> excelBeans = new ArrayList<>();
        CreateExcelBean excelBeanSheet = new CreateExcelBean();
        List<Map<String,Object>> sheetDateList = new ArrayList<>();
        for(DAgentIncomePayData data:dataList){
            Map<String,Object> sheetData = new HashMap<>();
            //获取机构信息解析json数据
            sheetData.put("export_date","");
            sheetData.put("inst_certificate_no",data.getAipdCertificateNo());
            sheetData.put("channel_code",data.getAipdChannelCode());
            sheetData.put("post_office_code",data.getAipdPostOfficeCode());
            sheetData.put("post_office_address",data.getAipdPostOfficeAddress());
            sheetData.put("phone_number",data.getAipdPhoneNumber());
            sheetData.put("tel_number",data.getAipdTelNumber());
            sheetData.put("capital_source",data.getAipdCapitalSource());
            //机构基本信息解析
            JSONObject instInfoJSON = JSONObject.parseObject(data.getAipdInstInfo());
            sheetData.put("oi_businessScope",instInfoJSON.getString("oi_businessScope"));
            sheetData.put("industry_type","");
            sheetData.put("organ_type","");
            sheetData.put("oi_registeredCurrency",instInfoJSON.getString("oi_registeredCurrency"));
            sheetData.put("oi_registeredAmount",instInfoJSON.getString("oi_registeredAmount"));
            sheetData.put("oi_registeredAddress",instInfoJSON.getString("oi_registeredAddress"));
            //法人信息数据组装
            JSONObject oilJSON = JSONObject.parseObject(data.getAipdInstLegalInfo());
            sheetData.put("oil_name",oilJSON.getString("oil_name"));
            sheetData.put("oil_certificate_type",oilJSON.getString("oil_certificateType"));
            sheetData.put("oil_certificate_no",oilJSON.getString("oil_certificateNo"));
            sheetData.put("oil_certificateStartTime",oilJSON.getString("oil_certificateStartTime"));
            sheetData.put("oil_certificateEndTime",oilJSON.getString("oil_certificateEndTime"));
            sheetData.put("oil_contactsTelNumber",oilJSON.getString("oil_contactsTelNumber"));
            //授权经办人信息数据组装
            JSONObject oiaJSON = JSONObject.parseObject(data.getAipdInstAuthInfo());
            sheetData.put("oia_name",oiaJSON.getString("oia_name"));
            sheetData.put("oia_certificate_type",oiaJSON.getString("oia_certificateType"));
            sheetData.put("oia_certificate_no",oiaJSON.getString("oia_certificateNo"));
            sheetData.put("oia_certificateStartTime",oiaJSON.getString("oia_certificateStartTime"));
            sheetData.put("oia_certificateEndTime",oiaJSON.getString("oia_certificateEndTime"));
            sheetData.put("oia_contactsTelNumber",oiaJSON.getString("oia_contactsTelNumber"));
            //负责人信息数据组装
            JSONObject oicJSON = JSONObject.parseObject(data.getAipdInstChargeInfo());
            sheetData.put("oic_name",oicJSON.getString("oic_name"));
            sheetData.put("oic_certificate_type",oicJSON.getString("oic_certificateType"));
            sheetData.put("oic_certificate_no",oicJSON.getString("oic_certificateNo"));
            sheetData.put("oic_certificateStartTime",oicJSON.getString("oic_certificateStartTime"));
            sheetData.put("oic_certificateEndTime",oicJSON.getString("oic_certificateEndTime"));
            sheetData.put("oic_contactsTelNumber",oicJSON.getString("oic_contactsTelNumber"));
            //实际控制人信息数据组装
            JSONObject oisJSON = JSONObject.parseObject(data.getAipdInstShareInfo());
            sheetData.put("ois_name",oisJSON.getString("ois_name"));
            sheetData.put("ois_certificate_type",oisJSON.getString("ois_certificateType"));
            sheetData.put("ois_certificate_no",oisJSON.getString("ois_certificateNo"));
            sheetData.put("ois_certificateStartTime",oisJSON.getString("ois_certificateStartTime"));
            sheetData.put("ois_certificateEndTime",oisJSON.getString("ois_certificateEndTime"));
            sheetData.put("ois_contactsTelNumber",oisJSON.getString("ois_contactsTelNumber"));
            
            sheetData.put("organ_type2","");
            sheetData.put("organ_tax_statement","");
            sheetData.put("organ_name_EN","");
            sheetData.put("organ_address_EN","");
            sheetData.put("organ_tax_country","");
            sheetData.put("organ_tax_id","");
            sheetData.put("organ_tax_id_reason","");
            
            sheetData.put("controller_name","");
            sheetData.put("controller_flag","");
            sheetData.put("controller_tax_country","");
            sheetData.put("controller_first_name","");
            sheetData.put("controller_family_name","");
            sheetData.put("controller_gender","");
            sheetData.put("controller_birthday","");
            sheetData.put("in_address_CN","");
            sheetData.put("in_address_EN","");
            sheetData.put("birth_address_CN","");
            sheetData.put("birth_address_EN","");
            sheetData.put("controller_tax_id","");
            sheetData.put("controller_tax_id_reason","");
            sheetData.put("customer_type","");
            sheetData.put("nature_type","");
            sheetData.put("beneficiary_name","");
            sheetData.put("beneficiary_adress","");
            sheetData.put("beneficiary_id_type","");
            sheetData.put("certificate_no","");
            sheetData.put("bc_certificateStartTime","");
            sheetData.put("bc_certificateEndTime","");
            sheetData.put("bc_ShareRatio","");
            sheetData.put("bc_ShareType1","");
            sheetData.put("bc_ShareType2","");
            sheetData.put("bc_reason","");
            sheetData.put("bc_reason_file","");
            sheetData.put("bc_reason_type","");
            sheetData.put("dsh_user_list","");
            sheetData.put("gg_user_list","");
            sheetData.put("ois_user_list","");
            sheetDateList.add(sheetData);
        }
        excelBeanSheet.setSheetName("机构信息");
        excelBeanSheet.setDataList(sheetDateList);
        excelBeanSheet.setSheetTitle(getInstTitle());
        excelBeans.add(excelBeanSheet);
        return excelBeans;
    }

    /**
     * @Description 展示反洗钱非居民信息信息
     * @Author weijunjie
     * @Date 2020/2/11 18:20
     **/
    public List<DAgentIncomePayData> showAgentIncomePayData(Map<String, Object> condition, PageInfo pageInfo){
        PageHelperUtils.startPage(pageInfo);
        List<DAgentIncomePayData> dAgentIncomePayData = agentIncomePayDataMapper.getAllData(condition,pageInfo);
        return dAgentIncomePayData;
    }

    /**
     * @Description 组装个人信息数据
     * @Author weijunjie
     * @Date 2020/1/20 18:01
     **/
    public String makeIndiInfo(JSONObject jsonObject){
        JSONObject jsonObj = new JSONObject();
        jsonObj.put("pi_vocation",jsonObject.getString("pi_vocation"));
        jsonObj.put("pi_gender",jsonObject.getString("pi_gender"));
        jsonObj.put("pi_birthday",jsonObject.getString("pi_birthday"));
        jsonObj.put("pi_indetityAttestation",jsonObject.getString("pi_indetityAttestation"));
        jsonObj.put("pi_originalAddress",jsonObject.getString("pi_originalAddress"));
        jsonObj.put("pi_birthAddress",jsonObject.getString("pi_birthAddress"));
        jsonObj.put("pi_taxCountry",jsonObject.getString("pi_taxCountry"));
        jsonObj.put("pi_taxAccount",jsonObject.getString("pi_taxAccount"));
        jsonObj.put("pi_taxReason",jsonObject.getString("pi_taxReason"));
        return jsonObj.toJSONString();
    }

    /**
     * @Description 组装机构基本信息
     * @Author weijunjie
     * @Date 2020/1/20 18:01
     **/
    public String makeInstInfo(JSONObject jsonObject){
        JSONObject jsonObj = new JSONObject();
        jsonObj.put("oi_businessScope",jsonObject.getString("oi_businessScope"));
        jsonObj.put("oi_registeredCurrency",jsonObject.getString("oi_registeredCurrency"));
        jsonObj.put("oi_registeredAmount",jsonObject.getString("oi_registeredAmount"));
        jsonObj.put("oi_registeredAddress",jsonObject.getString("oi_registeredAddress"));
        jsonObj.put("oi_institutionCode",jsonObject.getString("oi_institutionCode"));
        jsonObj.put("oi_certificateStartTime",jsonObject.getString("oi_certificateStartTime"));
        jsonObj.put("oi_certificateEndTime",jsonObject.getString("oi_certificateEndTime"));
        jsonObj.put("oi_taxAccount",jsonObject.getString("oi_taxAccount"));
        return jsonObj.toJSONString();
    }

    /**
     * @Description 组装机构法人基本信息
     * @Author weijunjie
     * @Date 2020/1/20 18:01
     **/
    public String makeInstLegalInfo(JSONObject jsonObject){
        JSONObject jsonObj = new JSONObject();
        jsonObj.put("oil_name",jsonObject.getString("oil_name"));
        jsonObj.put("oil_certificateType",jsonObject.getString("oil_certificateType"));
        jsonObj.put("oil_certificateNo",jsonObject.getString("oil_certificateNo"));
        jsonObj.put("oil_certificateStartTime",jsonObject.getString("oil_certificateStartTime"));
        jsonObj.put("oil_certificateEndTime",jsonObject.getString("oil_certificateEndTime"));
        jsonObj.put("oil_contactsTelNumber",jsonObject.getString("oil_contactsTelNumber"));
        return jsonObj.toJSONString();
    }

    /**
     * @Description 组装机构授权人基本信息
     * @Author weijunjie
     * @Date 2020/1/20 18:01
     **/
    public String makeInstAuthInfo(JSONObject jsonObject){
        JSONObject jsonObj = new JSONObject();
        jsonObj.put("oia_name",jsonObject.getString("oia_name"));
        jsonObj.put("oia_certificateType",jsonObject.getString("oia_certificateType"));
        jsonObj.put("oia_certificateNo",jsonObject.getString("oia_certificateNo"));
        jsonObj.put("oia_certificateStartTime",jsonObject.getString("oia_certificateStartTime"));
        jsonObj.put("oia_certificateEndTime",jsonObject.getString("oia_certificateEndTime"));
        jsonObj.put("oia_contactsTelNumber",jsonObject.getString("oia_contactsTelNumber"));
        return jsonObj.toJSONString();
    }

    /**
     * @Description 组装机构授权人基本信息
     * @Author weijunjie
     * @Date 2020/1/20 18:01
     **/
    public String makeInstShareInfo(JSONObject jsonObject){
        JSONObject jsonObj = new JSONObject();
        jsonObj.put("ois_name",jsonObject.getString("ois_name"));
        jsonObj.put("ois_certificateType",jsonObject.getString("ois_certificateType"));
        jsonObj.put("ois_certificateNo",jsonObject.getString("ois_certificateNo"));
        jsonObj.put("ois_certificateStartTime",jsonObject.getString("ois_certificateStartTime"));
        jsonObj.put("ois_certificateEndTime",jsonObject.getString("ois_certificateEndTime"));
        jsonObj.put("ois_contactsTelNumber",jsonObject.getString("ois_contactsTelNumber"));
        return jsonObj.toJSONString();
    }

    /**
     * @Description 组装机构授权人基本信息
     * @Author weijunjie
     * @Date 2020/1/20 18:01
     **/
    public String makeInstChargeInfo(JSONObject jsonObject){
        JSONObject jsonObj = new JSONObject();
        jsonObj.put("oic_name",jsonObject.getString("oic_name"));
        jsonObj.put("oic_certificateType",jsonObject.getString("oic_certificateType"));
        jsonObj.put("oic_certificateNo",jsonObject.getString("oic_certificateNo"));
        jsonObj.put("oic_certificateStartTime",jsonObject.getString("oic_certificateStartTime"));
        jsonObj.put("oic_certificateEndTime",jsonObject.getString("oic_certificateEndTime"));
        jsonObj.put("oic_contactsTelNumber",jsonObject.getString("oic_contactsTelNumber"));
        return jsonObj.toJSONString();
    }

    /**
     * @Description 导出crm系统个人数据sheet1表头
     * @Author weijunjie
     * @Date 2020/1/19 13:47
     **/
    public LinkedHashMap<String,String> getIndiTitleForSheet1(){
        LinkedHashMap<String,String> hashMap = new LinkedHashMap<>();
        hashMap.put("export_date","日期");
        hashMap.put("financi_account","理财账号");
        hashMap.put("channel_code","渠道名称");
        hashMap.put("product_code","产品代码");
        hashMap.put("insure_date","份额确认时间");
        hashMap.put("insure_amount","确认份额");
        hashMap.put("empty_code","虚代码");
        hashMap.put("product_name","产品名称");
        hashMap.put("customer_name","客户名称");
        hashMap.put("customer_type","客户类型");
        hashMap.put("certificate_type","证件类型");
        hashMap.put("certificate_no","证件号码");
        hashMap.put("post_office_code","邮政编码");
        hashMap.put("post_office_address","通讯地址");
        hashMap.put("tel_number","电话号码");
        hashMap.put("phone_number","手机号码");
        hashMap.put("amount","金额");
        hashMap.put("benefit_level","受益级别");
        hashMap.put("payment_date","缴款日期");
        hashMap.put("certificate_start_time","证件有效期起始日期");
        hashMap.put("certificate_end_time","证件有效期到期日期");
        hashMap.put("country","国籍");
        hashMap.put("capital_source","自然人认购资金来源");
        hashMap.put("pi_vocation","职业");
        hashMap.put("pi_gender","性别");
        hashMap.put("pi_birthday","出生日期");
        hashMap.put("pi_indetityAttestation","个人居民身份识别");
        hashMap.put("pi_originalAddress","现居住地址");
        hashMap.put("pi_birthAddress","出生地");
        hashMap.put("pi_taxCountry","税收居民国");
        hashMap.put("pi_taxAccount","纳税人识别号");
        hashMap.put("pi_taxReason","如不能提供纳税人识别号请解释提供原因");
        return hashMap;
    }

    /**
     * @Description 导出crm系统个人数据sheet2
     * @Author weijunjie
     * @Date 2020/1/19 13:47
     **/
    public LinkedHashMap<String,String> getIndiTitleForSheet2(){
        LinkedHashMap<String,String> hashMap = new LinkedHashMap<>();
        hashMap.put("certificate_no","证件号码");
        hashMap.put("channel_code","渠道名称");
        hashMap.put("post_office_code","邮政编码");
        hashMap.put("post_office_address","通讯地址");
        hashMap.put("phone_number","手机号码");
        hashMap.put("tel_number","电话号码");
        hashMap.put("country","国籍");
        hashMap.put("capital_source","自然人认购资金来源");
        hashMap.put("pi_vocation","职业");
        hashMap.put("pi_gender","性别");
        hashMap.put("pi_birthday","出生日期");
        return hashMap;
    }

    /**
     * @Description 导出crm系统机构数据
     * @Author weijunjie
     * @Date 2020/1/19 13:47
     **/
    public LinkedHashMap<String,String> getInstTitle(){
        LinkedHashMap<String,String> hashMap = new LinkedHashMap<>();
        hashMap.put("export_date","日期");
        hashMap.put("inst_certificate_no","证件号码");
        hashMap.put("channel_code","渠道名称");
        hashMap.put("post_office_code","邮政编码");
        hashMap.put("post_office_address","通讯地址");
        hashMap.put("phone_number","手机号码");
        hashMap.put("tel_number","电话号码");
        hashMap.put("capital_source","机构认购资金来源");
        hashMap.put("oi_businessScope","经营范围");
        hashMap.put("industry_type","行业类型");
        hashMap.put("organ_type","机构类型");
        hashMap.put("oi_registeredCurrency","注册币种");
        hashMap.put("oi_registeredAmount","注册资金");
        hashMap.put("oi_registeredAddress","注册地址");
        hashMap.put("oil_name","法定代表人");
        hashMap.put("oil_certificate_type","证件类型");
        hashMap.put("oil_certificate_no","证件号码");
        hashMap.put("oil_certificateStartTime","证件有效期始");
        hashMap.put("oil_certificateEndTime","证件有效期终");
        hashMap.put("oil_contactsTelNumber","法人联系电话");
        hashMap.put("oia_name","授权经办人");
        hashMap.put("oia_certificate_type","证件类型");
        hashMap.put("oia_certificate_no","证件号码");
        hashMap.put("oia_certificateStartTime","证件有效期始");
        hashMap.put("oia_certificateEndTime","证件有效期终");
        hashMap.put("oia_contactsTelNumber","授权经办人联系电话");
        hashMap.put("oic_name","负责人");
        hashMap.put("oic_certificate_type","证件类型");
        hashMap.put("oic_certificate_no","证件号码");
        hashMap.put("oic_certificateStartTime","证件有效期始");
        hashMap.put("oic_certificateEndTime","证件有效期终");
        hashMap.put("oic_contactsTelNumber","负责人联系电话");
        hashMap.put("ois_name","控股股东/实际控制人");
        hashMap.put("ois_certificate_type","证件类型");
        hashMap.put("ois_certificate_no","证件号码");
        hashMap.put("ois_certificateStartTime","证件有效期始");
        hashMap.put("ois_certificateEndTime","证件有效期终");
        hashMap.put("ois_contactsTelNumber","控股股东/实际控制人联系电话");
        hashMap.put("organ_type2","机构类别");
        hashMap.put("organ_tax_statement","机构税收居民身份声明");
        hashMap.put("organ_name_EN","机构名称（英文）");
        hashMap.put("organ_address_EN","地址（英文）");
        hashMap.put("organ_tax_country","税收居民国（地区）（如仅为中国居民后续无需填写）");
        hashMap.put("organ_tax_id","纳税人识别号（如有）");
        hashMap.put("organ_tax_id_reason","如不能提供纳税人识别号请解释提供原因");
        hashMap.put("controller_name","控制人姓名（税收居民身份声明）");
        hashMap.put("controller_flag","控制人个人居民身份识别");
        hashMap.put("controller_tax_country","税收居民国（地区）（如仅为中国居民后续无需填写）");
        hashMap.put("controller_first_name","（控制人）姓（英文或拼音）");
        hashMap.put("controller_family_name","（控制人）名（英文或拼音）");
        hashMap.put("controller_gender","性别");
        hashMap.put("controller_birthday","出生日期");
        hashMap.put("in_address_CN","现居地址（中文）（国家）（省）（市）");
        hashMap.put("in_address_EN","现居地址（英文）（国家）（省）（市）");
        hashMap.put("birth_address_CN","出生地（中文）（国家）（省）（市）");
        hashMap.put("birth_address_EN","出生地（英文）（国家）（省）（市）");
        hashMap.put("controller_tax_id","纳税人识别号（如有）");
        hashMap.put("controller_tax_id_reason","如不能提供纳税人识别号请解释提供原因");
        hashMap.put("customer_type","客户类型");
        hashMap.put("nature_type","性质类别");
        hashMap.put("beneficiary_name","受益所有人姓名");
        hashMap.put("beneficiary_adress","联系地址");
        hashMap.put("beneficiary_id_type","身份证件类别");
        hashMap.put("certificate_no","证件号码");
        hashMap.put("bc_certificateStartTime","有效期起始日");
        hashMap.put("bc_certificateEndTime","有效期到期日");
        hashMap.put("bc_ShareRatio","持股比例");
        hashMap.put("bc_ShareType1","直接/间");
        hashMap.put("bc_ShareType2","持股类型");
        hashMap.put("bc_reason","上述受益人的识别和判断依据");
        hashMap.put("bc_reason_file","具体证明材料");
        hashMap.put("bc_reason_type","上述识别和判断依据的获取方式为");
        hashMap.put("dsh_user_list","董事会成员名单");
        hashMap.put("gg_user_list","高级管理层名单");
        hashMap.put("ois_user_list","股东名单（持股比例超过25%及以上）");
        return hashMap;
    }

    /**
     * @Description 获取个人收付数据表标题 (插入顺序与输出顺序保持一致)
     * @Author weijunjie
     * @Date 2020/1/19 13:47
     **/
    public JSONObject getAIPTitleForPersonal(){
        JSONObject hashMap = new JSONObject(true);
        hashMap.put("product_name","产品名称");
        hashMap.put("customer_name","客户名称");
        hashMap.put("customer_type","客户类型");
        hashMap.put("certificate_type","证件类型");
        hashMap.put("certificate_no","证件号码");
        hashMap.put("post_office_code","邮政编码");
        hashMap.put("post_office_address","通讯地址");
        hashMap.put("tel_number","电话号码");
        hashMap.put("phone_number","手机号码");
        hashMap.put("contacts_address","联系人地址");
        hashMap.put("contacts_tel_number","联系人电话");
        hashMap.put("payment_amount","缴款金额");
        hashMap.put("benefit_level","受益级别");
        hashMap.put("payment_date","缴款日期");
        hashMap.put("certificate_start_time","证件有效期起始日期");
        hashMap.put("certificate_end_time","证件有效期到期时间");
        hashMap.put("country","国籍");
        hashMap.put("capital_source","自然人认购资金来源");
        hashMap.put("pi_vocation","职业");
        hashMap.put("pi_gender","性别（如提供的为身份证则无需填写）");
        hashMap.put("pi_birthday","出生日期（如提供的为身份证则无需填写）");
        hashMap.put("pi_indetityAttestation","个人居民身份识别");
        hashMap.put("pi_originalAddress","现居住地址");
        hashMap.put("pi_birthAddress","出生地");
        hashMap.put("pi_taxCountry","税收居民国（地区）（如仅为中国居民后续无需填写）");
        hashMap.put("pi_taxAccount","纳税人识别号（如有）");
        hashMap.put("pi_taxReason","如不能提供纳税人识别号请解释提供原因");
        return hashMap;
    }

    /**
     * @Description 获取个人收付数据表标题 (插入顺序与输出顺序保持一致)
     * @Author weijunjie
     * @Date 2020/1/19 13:47
     **/
    public JSONObject getAIPTitleForOrgan(){
        JSONObject hashMap = new JSONObject(true);
        hashMap.put("product_name","产品名称");
        hashMap.put("customer_name","客户名称");
        hashMap.put("customer_type","客户类型");
        hashMap.put("certificate_type","证件类型");
        hashMap.put("certificate_no","证件号码");
        hashMap.put("post_office_code","邮政编码");
        hashMap.put("post_office_address","通讯地址");
        hashMap.put("tel_number","电话号码");
        hashMap.put("phone_number","手机号码");
        hashMap.put("contacts_address"," 联系人地址");
        hashMap.put("contacts_tel_number","联系人电话");
        hashMap.put("payment_amount","缴款金额");
        hashMap.put("arrival_account_date","到账日期");
        hashMap.put("benefit_level","受益级别");
        hashMap.put("payment_date","缴款日期");
        hashMap.put("certificate_start_time","证件有效期起始日期");
        hashMap.put("certificate_end_time","证件有效期到期时间");
        hashMap.put("country","国籍");
        hashMap.put("capital_source","机构认购资金来源");
        hashMap.put("oi_businessScope","经营范围");
        hashMap.put("oi_registeredCurrency","注册币种");
        hashMap.put("oi_registeredAmount","注册资金");
        hashMap.put("oi_registeredAddress","注册地址");
        hashMap.put("oi_institutionCode","组织机构代码证");
        hashMap.put("oi_certificateStartTime","证件有效期始");
        hashMap.put("oi_certificateEndTime","证件有效期终");
        hashMap.put("oi_taxAccount","税务登记证");
        hashMap.put("oil_name","法定代表人");
        hashMap.put("oil_certificateType","证件类型");
        hashMap.put("oil_certificateNo","证件号码");
        hashMap.put("oil_certificateStartTime","证件有效期始");
        hashMap.put("oil_certificateEndTime","证件有效期终");
        hashMap.put("oil_contactsTelNumber","法人联系电话");
        hashMap.put("oia_name","授权经办人");
        hashMap.put("oia_certificateType","证件类型");
        hashMap.put("oia_certificateNo","证件号码");
        hashMap.put("oia_certificateStartTime","证件有效期始");
        hashMap.put("oia_certificateEndTime","证件有效期终");
        hashMap.put("oia_contactsTelNumber","授权经办人联系电话");
        hashMap.put("ois_name","控股股东/实际控制人");
        hashMap.put("ois_certificateType","证件类型");
        hashMap.put("ois_certificateNo","证件号码");
        hashMap.put("ois_certificateStartTime","证件有效期始");
        hashMap.put("ois_certificateEndTime","证件有效期终");
        hashMap.put("ois_contactsTelNumber","控股股东/实际控制人联系电话");
        hashMap.put("oic_name","负责人");
        hashMap.put("oic_certificateType","证件类型");
        hashMap.put("oic_certificateNo","证件号码");
        hashMap.put("oic_certificateStartTime","证件有效期始");
        hashMap.put("oic_certificateEndTime","证件有效期终");
        hashMap.put("oic_contactsTelNumber","负责人联系电话");

        return hashMap;
    }

    /**
     * @Description
     * @Author weijunjie
     * @Date 2020/2/4 10:25
     **/
    public static void main(String[] args){
        ExportFileServiceImpl exportFileService = new ExportFileServiceImpl();
        JSONObject aipTitleForOrgan = exportFileService.getAIPTitleForOrgan();
        for(String key:aipTitleForOrgan.keySet()){
            System.out.println("//"+aipTitleForOrgan.getString(key));
            System.out.println("private String "+key+";");
        }
    }
}
