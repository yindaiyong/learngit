<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.sams.custom.mapper.ExchangeReqTmpMapper" >
  <resultMap id="BaseResultMap" type="com.sams.custom.model.ExchangeReqTmp" >
    <id column="ERT_ID" property="ertId" jdbcType="DECIMAL" />
    <result column="ERT_CHANNEL_CODE" property="ertChannelCode" jdbcType="VARCHAR" />
    <result column="ERT_TRANS_DATE" property="ertTransDate" jdbcType="VARCHAR" />
    <result column="ERT_APP_SHEET_SERIAL_NO" property="ertAppSheetSerialNo" jdbcType="VARCHAR" />
    <result column="ERT_FUND_CODE" property="ertFundCode" jdbcType="VARCHAR" />
    <result column="ERT_LARGE_REDEMPTION_FLAG" property="ertLargeRedemptionFlag" jdbcType="VARCHAR" />
    <result column="ERT_TRANSACTION_DATE" property="ertTransactionDate" jdbcType="VARCHAR" />
    <result column="ERT_TRANSACTION_TIME" property="ertTransactionTime" jdbcType="VARCHAR" />
    <result column="ERT_TRANSACTION_ACCOUNT_ID" property="ertTransactionAccountId" jdbcType="VARCHAR" />
    <result column="ERT_DISTRIBUTOR_CODE" property="ertDistributorCode" jdbcType="VARCHAR" />
    <result column="ERT_APPLICATION_VOL" property="ertApplicationVol" jdbcType="DECIMAL" />
    <result column="ERT_APPLICATION_AMOUNT" property="ertApplicationAmount" jdbcType="DECIMAL" />
    <result column="ERT_BUSINESS_CODE" property="ertBusinessCode" jdbcType="VARCHAR" />
    <result column="ERT_TA_ACCOUNT_ID" property="ertTaAccountId" jdbcType="VARCHAR" />
    <result column="ERT_DISCOUNT_RATE_OF_COMM" property="ertDiscountRateOfComm" jdbcType="DECIMAL" />
    <result column="ERT_DEPOSIT_ACCT" property="ertDepositAcct" jdbcType="VARCHAR" />
    <result column="ERT_REGION_CODE" property="ertRegionCode" jdbcType="VARCHAR" />
    <result column="ERT_CURRENCY_TYPE" property="ertCurrencyType" jdbcType="VARCHAR" />
    <result column="ERT_BRANCH_CODE" property="ertBranchCode" jdbcType="VARCHAR" />
    <result column="ERT_ORIGINAL_APP_SHEET_NO" property="ertOriginalAppSheetNo" jdbcType="VARCHAR" />
    <result column="ERT_ORIGINAL_SUBS_DATE" property="ertOriginalSubsDate" jdbcType="VARCHAR" />
    <result column="ERT_INDIVIDUAL_OR_INSTITUTION" property="ertIndividualOrInstitution" jdbcType="VARCHAR" />
    <result column="ERT_VALID_PERIOD" property="ertValidPeriod" jdbcType="DECIMAL" />
    <result column="ERT_DAYS_REDEMPTION_IN_ADVANCE" property="ertDaysRedemptionInAdvance" jdbcType="DECIMAL" />
    <result column="ERT_REDEMPTION_DATE_IN_ADVANCE" property="ertRedemptionDateInAdvance" jdbcType="VARCHAR" />
    <result column="ERT_ORIGINAL_SERIAL_NO" property="ertOriginalSerialNo" jdbcType="VARCHAR" />
    <result column="ERT_DATE_OF_PERIODIC_SUBS" property="ertDateOfPeriodicSubs" jdbcType="VARCHAR" />
    <result column="ERT_TA_SERIAL_NO" property="ertTaSerialNo" jdbcType="VARCHAR" />
    <result column="ERT_TERM_OF_PERIODIC_SUBS" property="ertTermOfPeriodicSubs" jdbcType="DECIMAL" />
    <result column="ERT_FUTURE_BUY_DATE" property="ertFutureBuyDate" jdbcType="VARCHAR" />
    <result column="ERT_TARGET_DISTRIBUTOR_CODE" property="ertTargetDistributorCode" jdbcType="VARCHAR" />
    <result column="ERT_CHARGE" property="ertCharge" jdbcType="DECIMAL" />
    <result column="ERT_TARGET_BRANCH_CODE" property="ertTargetBranchCode" jdbcType="VARCHAR" />
    <result column="ERT_TARGET_TRANSACT_ACCT_CODE" property="ertTargetTransactAcctCode" jdbcType="VARCHAR" />
    <result column="ERT_TARGET_REGION_CODE" property="ertTargetRegionCode" jdbcType="VARCHAR" />
    <result column="ERT_DIVIDEND_RATIO" property="ertDividendRatio" jdbcType="DECIMAL" />
    <result column="ERT_SPECIFICATION" property="ertSpecification" jdbcType="VARCHAR" />
    <result column="ERT_CODE_OF_TARGET_FUND" property="ertCodeOfTargetFund" jdbcType="VARCHAR" />
    <result column="ERT_TOTAL_BACKEND_LOAD" property="ertTotalBackendLoad" jdbcType="DECIMAL" />
    <result column="ERT_SHARE_CLASS" property="ertShareClass" jdbcType="VARCHAR" />
    <result column="ERT_ORIGINAL_CFM_DATE" property="ertOriginalCfmDate" jdbcType="VARCHAR" />
    <result column="ERT_DETAIL_FLAG" property="ertDetailFlag" jdbcType="VARCHAR" />
    <result column="ERT_ORIGINAL_APP_DATE" property="ertOriginalAppDate" jdbcType="VARCHAR" />
    <result column="ERT_DEF_DIVIDEND_METHOD" property="ertDefDividendMethod" jdbcType="VARCHAR" />
    <result column="ERT_FROZEN_CAUSE" property="ertFrozenCause" jdbcType="VARCHAR" />
    <result column="ERT_FREEZING_DEADLINE" property="ertFreezingDeadline" jdbcType="VARCHAR" />
    <result column="ERT_VARIETY_CODE_PERIODIC_SUB" property="ertVarietyCodePeriodicSub" jdbcType="VARCHAR" />
    <result column="ERT_SERIAL_NO_PERIODIC_SUB" property="ertSerialNoPeriodicSub" jdbcType="VARCHAR" />
    <result column="ERT_RATION_TYPE" property="ertRationType" jdbcType="VARCHAR" />
    <result column="ERT_TARGET_TA_ACCOUNT_ID" property="ertTargetTaAccountId" jdbcType="VARCHAR" />
    <result column="ERT_TARGET_REGISTRAR_CODE" property="ertTargetRegistrarCode" jdbcType="VARCHAR" />
    <result column="ERT_NET_NO" property="ertNetNo" jdbcType="VARCHAR" />
    <result column="ERT_CUSTOMER_NO" property="ertCustomerNo" jdbcType="VARCHAR" />
    <result column="ERT_TARGET_SHARE_TYPE" property="ertTargetShareType" jdbcType="VARCHAR" />
    <result column="ERT_RATION_PROTOCOL_NO" property="ertRationProtocolNo" jdbcType="VARCHAR" />
    <result column="ERT_BEGIN_DATE_PERIODIC_SUBS" property="ertBeginDatePeriodicSubs" jdbcType="VARCHAR" />
    <result column="ERT_END_DATE_OF_PERIODIC_SUBS" property="ertEndDateOfPeriodicSubs" jdbcType="VARCHAR" />
    <result column="ERT_SEND_DAY_OF_PERIODIC_SUBS" property="ertSendDayOfPeriodicSubs" jdbcType="DECIMAL" />
    <result column="ERT_BROKER" property="ertBroker" jdbcType="VARCHAR" />
    <result column="ERT_SALES_PROMOTION" property="ertSalesPromotion" jdbcType="VARCHAR" />
    <result column="ERT_ACCEPT_METHOD" property="ertAcceptMethod" jdbcType="VARCHAR" />
    <result column="ERT_FORCE_REDEMPTION_TYPE" property="ertForceRedemptionType" jdbcType="VARCHAR" />
    <result column="ERT_TAKE_INCOME_FLAG" property="ertTakeIncomeFlag" jdbcType="VARCHAR" />
    <result column="ERT_PURPOSE_OF_PE_SUBS" property="ertPurposeOfPeSubs" jdbcType="VARCHAR" />
    <result column="ERT_FREQUENCY_OF_PE_SUBS" property="ertFrequencyOfPeSubs" jdbcType="DECIMAL" />
    <result column="ERT_PERIOD_SUB_TIME_UNIT" property="ertPeriodSubTimeUnit" jdbcType="VARCHAR" />
    <result column="ERT_BATCH_NUM_OF_PESUBS" property="ertBatchNumOfPesubs" jdbcType="DECIMAL" />
    <result column="ERT_CAPITAL_MODE" property="ertCapitalMode" jdbcType="VARCHAR" />
    <result column="ERT_DETAIL_CAPTICAL_MODE" property="ertDetailCapticalMode" jdbcType="VARCHAR" />
    <result column="ERT_BACKENLOAD_DISCOUNT" property="ertBackenloadDiscount" jdbcType="DECIMAL" />
    <result column="ERT_COMBINE_NUM" property="ertCombineNum" jdbcType="VARCHAR" />
    <result column="ERT_FUTURE_SUBSCRIBE_DATE" property="ertFutureSubscribeDate" jdbcType="VARCHAR" />
    <result column="ERT_TRADING_METHOD" property="ertTradingMethod" jdbcType="VARCHAR" />
    <result column="ERT_LARGE_BUY_FLAG" property="ertLargeBuyFlag" jdbcType="VARCHAR" />
    <result column="ERT_CHARGE_TYPE" property="ertChargeType" jdbcType="VARCHAR" />
    <result column="ERT_SPECIFY_RATE_FEE" property="ertSpecifyRateFee" jdbcType="DECIMAL" />
    <result column="ERT_SPECIFY_FEE" property="ertSpecifyFee" jdbcType="DECIMAL" />
    <result column="ERT_CTIME" property="ertCtime" jdbcType="TIMESTAMP" />
    <result column="ERT_UTIME" property="ertUtime" jdbcType="TIMESTAMP" />
    <result column="ERT_CUSER" property="ertCuser" jdbcType="VARCHAR" />
    <result column="ERT_UUSER" property="ertUuser" jdbcType="VARCHAR" />
  </resultMap>
  <sql id="Base_Column_List_Tmp" >
       ERT_CHANNEL_CODE CHANNELCODE,
       ERT_TRANS_DATE  BUSINESSDATE,
       ERT_APP_SHEET_SERIAL_NO APPSHEETSERIALNO,
       ERT_FUND_CODE FUNDCODE,
       ERT_LARGE_REDEMPTION_FLAG LARGEREDEMPTIONFLAG,
       ERT_TRANSACTION_DATE TRANSACTIONDATE,
       ERT_TRANSACTION_TIME TRANSACTIONTIME,
       ERT_TRANSACTION_ACCOUNT_ID TRANSACTIONACCOUNTID,
       ERT_DISTRIBUTOR_CODE DISTRIBUTORCODE,
       ERT_APPLICATION_VOL APPLICATIONVOL,
       ERT_APPLICATION_AMOUNT APPLICATIONAMOUNT,
       ERT_BUSINESS_CODE BUSINESSCODE,
       ERT_DISCOUNT_RATE_OF_COMM DISCOUNTRATEOFCOMMISSION,
       ERT_DEPOSIT_ACCT DEPOSITACCT,
       ERT_REGION_CODE REGIONCODE,
       ERT_CURRENCY_TYPE CURRENCYTYPE,
       ERT_BRANCH_CODE BRANCHCODE,
       ERT_ORIGINAL_APP_SHEET_NO ORIGINALAPPSHEETNO,
       ERT_ORIGINAL_SUBS_DATE ORIGINALSUBSDATE,
       ERT_INDIVIDUAL_OR_INSTITUTION INDIVIDUALORINSTITUTION,
       ERT_VALID_PERIOD VALIDPERIOD,
       ERT_DAYS_REDEMPTION_IN_ADVANCE DAYSREDEMPTIONINADVANCE,
       ERT_REDEMPTION_DATE_IN_ADVANCE REDEMPTIONDATEINADVANCE,
       ERT_ORIGINAL_SERIAL_NO ORIGINALSERIALNO,
       ERT_DATE_OF_PERIODIC_SUBS DATEOFPERIODICSUBS,
       ERT_TA_SERIAL_NO TASERIALNO,
       ERT_TERM_OF_PERIODIC_SUBS TERMOFPERIODICSUBS,
       ERT_FUTURE_BUY_DATE FUTUREBUYDATE,
       ERT_TARGET_DISTRIBUTOR_CODE TARGETDISTRIBUTORCODE,
       ERT_CHARGE CHARGE,
       ERT_TARGET_BRANCH_CODE TARGETBRANCHCODE,
       ERT_TARGET_TRANSACT_ACCT_CODE TARGETTRANSACTIONACCOUNTID,
       ERT_TARGET_REGION_CODE TARGETREGIONCODE,
       ERT_DIVIDEND_RATIO DIVIDENDRATIO,
       ERT_SPECIFICATION SPECIFICATION,
       ERT_CODE_OF_TARGET_FUND CODEOFTARGETFUND,
       ERT_TOTAL_BACKEND_LOAD TOTALBACKENDLOAD,
       ERT_SHARE_CLASS SHARECLASS,
       ERT_ORIGINAL_CFM_DATE ORIGINALCFMDATE,
       ERT_DETAIL_FLAG DETAILFLAG,
       ERT_ORIGINAL_APP_DATE ORIGINALAPPDATE,
       ERT_DEF_DIVIDEND_METHOD DEFDIVIDENDMETHOD,
       ERT_FROZEN_CAUSE FROZENCAUSE,
       ERT_FREEZING_DEADLINE FREEZINGDEADLINE,
       ERT_VARIETY_CODE_PERIODIC_SUB VARIETYCODEOFPERIODICSUBS,
       ERT_SERIAL_NO_PERIODIC_SUB SERIALNOOFPERIODICSUBS,
       ERT_RATION_TYPE RATIONTYPE,
       ERT_TARGET_TA_ACCOUNT_ID TARGETTAACCOUNTID,
       ERT_TARGET_REGISTRAR_CODE TARGETREGISTRARCODE,
       ERT_NET_NO NETNO,
       ERT_CUSTOMER_NO CUSTOMERNO,
       ERT_TARGET_SHARE_TYPE TARGETSHARETYPE,
       ERT_RATION_PROTOCOL_NO RATIONPROTOCOLNO,
       ERT_BEGIN_DATE_PERIODIC_SUBS BEGINDATEOFPERIODICSUBS,
       ERT_END_DATE_OF_PERIODIC_SUBS ENDDATEOFPERIODICSUBS,
       ERT_SEND_DAY_OF_PERIODIC_SUBS SENDDAYOFPERIODICSUBS,
       ERT_BROKER BROKER,
       ERT_SALES_PROMOTION SALESPROMOTION,
       ERT_ACCEPT_METHOD ACCEPTMETHOD,
       ERT_FORCE_REDEMPTION_TYPE FORCEREDEMPTIONTYPE,
       ERT_TAKE_INCOME_FLAG TAKEINCOMEFLAG,
       ERT_PURPOSE_OF_PE_SUBS PURPOSEOFPESUBS,
       ERT_FREQUENCY_OF_PE_SUBS FREQUENCYOFPESUBS,
       ERT_PERIOD_SUB_TIME_UNIT PERIODSUBTIMEUNIT,
       ERT_BATCH_NUM_OF_PESUBS BATCHNUMOFPESUBS,
       ERT_CAPITAL_MODE CAPITALMODE,
       ERT_DETAIL_CAPTICAL_MODE DETAILCAPTICALMODE,
       ERT_BACKENLOAD_DISCOUNT BACKENLOADDISCOUNT,
       ERT_COMBINE_NUM COMBINENUM,
       ERT_FUTURE_SUBSCRIBE_DATE FUTURESUBSCRIBEDATE,
       ERT_TRADING_METHOD TRADINGMETHOD,
       ERT_LARGE_BUY_FLAG LARGEBUYFLAG,
       ERT_CHARGE_TYPE CHARGETYPE,
       ERT_SPECIFY_RATE_FEE SPECIFYRATEFEE,
       ERT_SPECIFY_FEE  SPECIFYFEE,
       ERT_TA_ACCOUNT_ID TAACCOUNTID
  </sql>
  
  
  <sql id="Base_Column_List_Req" >
       ER_CHANNEL_CODE CHANNELCODE,
       ER_TRANS_DATE  BUSINESSDATE,
       ER_APP_SHEET_SERIAL_NO APPSHEETSERIALNO,
       ER_FUND_CODE FUNDCODE,
       ER_LARGE_REDEMPTION_FLAG LARGEREDEMPTIONFLAG,
       ER_TRANSACTION_DATE TRANSACTIONDATE,
       ER_TRANSACTION_TIME TRANSACTIONTIME,
       ER_TRANSACTION_ACCOUNT_ID TRANSACTIONACCOUNTID,
       ER_DISTRIBUTOR_CODE DISTRIBUTORCODE,
       ER_APPLICATION_VOL APPLICATIONVOL,
       ER_APPLICATION_AMOUNT APPLICATIONAMOUNT,
       ER_BUSINESS_CODE BUSINESSCODE,
       ER_TA_ACCOUNT_ID TAACCOUNTID,
       ER_DISCOUNT_RATE_OF_COMM DISCOUNTRATEOFCOMMISSION,
       ER_DEPOSIT_ACCT DEPOSITACCT,
       ER_REGION_CODE REGIONCODE,
       ER_CURRENCY_TYPE CURRENCYTYPE,
       ER_BRANCH_CODE BRANCHCODE,
       ER_ORIGINAL_APP_SHEET_NO ORIGINALAPPSHEETNO,
       ER_ORIGINAL_SUBS_DATE ORIGINALSUBSDATE,
       ER_INDIVIDUAL_OR_INSTITUTION INDIVIDUALORINSTITUTION,
       ER_VALID_PERIOD VALIDPERIOD,
       ER_DAYS_REDEMPTION_IN_ADVANCE DAYSREDEMPTIONINADVANCE,
       ER_REDEMPTION_DATE_IN_ADVANCE REDEMPTIONDATEINADVANCE,
       ER_ORIGINAL_SERIAL_NO ORIGINALSERIALNO,
       ER_DATE_OF_PERIODIC_SUBS DATEOFPERIODICSUBS,
       ER_TA_SERIAL_NO TASERIALNO,
       ER_TERM_OF_PERIODIC_SUBS TERMOFPERIODICSUBS,
       ER_FUTURE_BUY_DATE FUTUREBUYDATE,
       ER_TARGET_DISTRIBUTOR_CODE TARGETDISTRIBUTORCODE,
       <!-- ER_CHARGE CHARGE, -->
       ER_TARGET_BRANCH_CODE TARGETBRANCHCODE,
       ER_TARGET_TRANSACT_ACCT_CODE TARGETTRANSACTIONACCOUNTID,
       ER_TARGET_REGION_CODE TARGETREGIONCODE,
       ER_DIVIDEND_RATIO DIVIDENDRATIO,
       ER_SPECIFICATION SPECIFICATION,
       ER_CODE_OF_TARGET_FUND CODEOFTARGETFUND,
       ER_TOTAL_BACKEND_LOAD TOTALBACKENDLOAD,
       ER_SHARE_CLASS SHARECLASS,
       ER_ORIGINAL_CFM_DATE ORIGINALCFMDATE,
       ER_DETAIL_FLAG DETAILFLAG,
       ER_ORIGINAL_APP_DATE ORIGINALAPPDATE,
       ER_DEF_DIVIDEND_METHOD DEFDIVIDENDMETHOD,
       ER_FROZEN_CAUSE FROZENCAUSE,
       ER_FREEZING_DEADLINE FREEZINGDEADLINE,
       ER_VARIETY_CODE_PERIODIC_SUB VARIETYCODEOFPERIODICSUBS,
       ER_SERIAL_NO_PERIODIC_SUB SERIALNOOFPERIODICSUBS,
       ER_RATION_TYPE RATIONTYPE,
       ER_TARGET_TA_ACCOUNT_ID TARGETTAACCOUNTID,
       ER_TARGET_REGISTRAR_CODE TARGETREGISTRARCODE,
       ER_NET_NO NETNO,
       ER_CUSTOMER_NO CUSTOMERNO,
       ER_TARGET_SHARE_TYPE TARGETSHARETYPE,
       ER_RATION_PROTOCOL_NO RATIONPROTOCOLNO,
       ER_BEGIN_DATE_PERIODIC_SUBS BEGINDATEOFPERIODICSUBS,
       ER_END_DATE_OF_PERIODIC_SUBS ENDDATEOFPERIODICSUBS,
       ER_SEND_DAY_OF_PERIODIC_SUBS SENDDAYOFPERIODICSUBS,
       ER_BROKER BROKER,
       ER_SALES_PROMOTION SALESPROMOTION,
       ER_ACCEPT_METHOD ACCEPTMETHOD,
       ER_FORCE_REDEMPTION_TYPE FORCEREDEMPTIONTYPE,
       ER_TAKE_INCOME_FLAG TAKEINCOMEFLAG,
       ER_PURPOSE_OF_PE_SUBS PURPOSEOFPESUBS,
       ER_FREQUENCY_OF_PE_SUBS FREQUENCYOFPESUBS,
       ER_PERIOD_SUB_TIME_UNIT PERIODSUBTIMEUNIT,
       ER_BATCH_NUM_OF_PESUBS BATCHNUMOFPESUBS,
       ER_CAPITAL_MODE CAPITALMODE,
       ER_DETAIL_CAPTICAL_MODE DETAILCAPTICALMODE,
       ER_BACKENLOAD_DISCOUNT BACKENLOADDISCOUNT,
       ER_COMBINE_NUM COMBINENUM,
       ER_FUTURE_SUBSCRIBE_DATE FUTURESUBSCRIBEDATE,
       ER_TRADING_METHOD TRADINGMETHOD,
       ER_LARGE_BUY_FLAG LARGEBUYFLAG,
       ER_CHARGE_TYPE CHARGETYPE,
       ER_SPECIFY_RATE_FEE SPECIFYRATEFEE,
       ER_SPECIFY_FEE  SPECIFYFEE,
       ER_PRO_YIELD_TYPE PROYIELDTYPE,
       ER_PRO_YIELD     PROYIELD,
       ER_IN_CONTRACT  INCONTRACT,
       ER_OUT_CONTRACT  OUTCONTRACT,
       ER_VALID_FLAG  VALIDFLAG,
       ER_RETURN_CODE RETURNCODE,
       ER_EXPECTED_CFM_DATE EXPECTEDCFMDATE,
       ER_ERROR_DEC ERRORDEC,
       ER_TA_PRODUCT_CODE TAPRODUCTCODE,
       ER_BATCH_NO  BATCHNO,
       ER_TA_TRANS_STATUS TATRANSSTATUS
  </sql>
  
   <sql id="Base_Column_List_Req_BUSCODE" >
       ER_CHANNEL_CODE CHANNELCODE,
       ER_TRANS_DATE  BUSINESSDATE,
       ER_APP_SHEET_SERIAL_NO APPSHEETSERIALNO,
       ER_FUND_CODE FUNDCODE,
       ER_LARGE_REDEMPTION_FLAG LARGEREDEMPTIONFLAG,
       ER_TRANSACTION_DATE TRANSACTIONDATE,
       ER_TRANSACTION_TIME TRANSACTIONTIME,
       ER_TRANSACTION_ACCOUNT_ID TRANSACTIONACCOUNTID,
       ER_DISTRIBUTOR_CODE DISTRIBUTORCODE,
       ER_APPLICATION_VOL APPLICATIONVOL,
       ER_APPLICATION_AMOUNT APPLICATIONAMOUNT,
       ER_TA_ACCOUNT_ID TAACCOUNTID,
       ER_DISCOUNT_RATE_OF_COMM DISCOUNTRATEOFCOMMISSION,
       ER_DEPOSIT_ACCT DEPOSITACCT,
       ER_REGION_CODE REGIONCODE,
       ER_CURRENCY_TYPE CURRENCYTYPE,
       ER_BRANCH_CODE BRANCHCODE,
       ER_ORIGINAL_APP_SHEET_NO ORIGINALAPPSHEETNO,
       ER_ORIGINAL_SUBS_DATE ORIGINALSUBSDATE,
       ER_INDIVIDUAL_OR_INSTITUTION INDIVIDUALORINSTITUTION,
       ER_VALID_PERIOD VALIDPERIOD,
       ER_DAYS_REDEMPTION_IN_ADVANCE DAYSREDEMPTIONINADVANCE,
       ER_REDEMPTION_DATE_IN_ADVANCE REDEMPTIONDATEINADVANCE,
       ER_ORIGINAL_SERIAL_NO ORIGINALSERIALNO,
       ER_DATE_OF_PERIODIC_SUBS DATEOFPERIODICSUBS,
       ER_TA_SERIAL_NO TASERIALNO,
       ER_TERM_OF_PERIODIC_SUBS TERMOFPERIODICSUBS,
       ER_FUTURE_BUY_DATE FUTUREBUYDATE,
       ER_TARGET_DISTRIBUTOR_CODE TARGETDISTRIBUTORCODE,
       <!-- ER_CHARGE CHARGE, 代销费用这个字段，从TA取--> 
       ER_TARGET_BRANCH_CODE TARGETBRANCHCODE,
       ER_TARGET_TRANSACT_ACCT_CODE TARGETTRANSACTIONACCOUNTID,
       ER_TARGET_REGION_CODE TARGETREGIONCODE,
       ER_DIVIDEND_RATIO DIVIDENDRATIO,
       ER_SPECIFICATION SPECIFICATION,
       ER_CODE_OF_TARGET_FUND CODEOFTARGETFUND,
       ER_TOTAL_BACKEND_LOAD TOTALBACKENDLOAD,
       ER_SHARE_CLASS SHARECLASS,
       ER_ORIGINAL_CFM_DATE ORIGINALCFMDATE,
       ER_DETAIL_FLAG DETAILFLAG,
       ER_ORIGINAL_APP_DATE ORIGINALAPPDATE,
       ER_DEF_DIVIDEND_METHOD DEFDIVIDENDMETHOD,
       ER_FROZEN_CAUSE FROZENCAUSE,
       ER_FREEZING_DEADLINE FREEZINGDEADLINE,
       ER_VARIETY_CODE_PERIODIC_SUB VARIETYCODEOFPERIODICSUBS,
       ER_SERIAL_NO_PERIODIC_SUB SERIALNOOFPERIODICSUBS,
       ER_RATION_TYPE RATIONTYPE,
       ER_TARGET_TA_ACCOUNT_ID TARGETTAACCOUNTID,
       ER_TARGET_REGISTRAR_CODE TARGETREGISTRARCODE,
       ER_NET_NO NETNO,
       ER_CUSTOMER_NO CUSTOMERNO,
       ER_TARGET_SHARE_TYPE TARGETSHARETYPE,
       ER_RATION_PROTOCOL_NO RATIONPROTOCOLNO,
       ER_BEGIN_DATE_PERIODIC_SUBS BEGINDATEOFPERIODICSUBS,
       ER_END_DATE_OF_PERIODIC_SUBS ENDDATEOFPERIODICSUBS,
       ER_SEND_DAY_OF_PERIODIC_SUBS SENDDAYOFPERIODICSUBS,
       ER_BROKER BROKER,
       ER_SALES_PROMOTION SALESPROMOTION,
       ER_ACCEPT_METHOD ACCEPTMETHOD,
       ER_FORCE_REDEMPTION_TYPE FORCEREDEMPTIONTYPE,
       ER_TAKE_INCOME_FLAG TAKEINCOMEFLAG,
       ER_PURPOSE_OF_PE_SUBS PURPOSEOFPESUBS,
       ER_FREQUENCY_OF_PE_SUBS FREQUENCYOFPESUBS,
       ER_PERIOD_SUB_TIME_UNIT PERIODSUBTIMEUNIT,
       ER_BATCH_NUM_OF_PESUBS BATCHNUMOFPESUBS,
       ER_CAPITAL_MODE CAPITALMODE,
       ER_DETAIL_CAPTICAL_MODE DETAILCAPTICALMODE,
       ER_BACKENLOAD_DISCOUNT BACKENLOADDISCOUNT,
       ER_COMBINE_NUM COMBINENUM,
       ER_FUTURE_SUBSCRIBE_DATE FUTURESUBSCRIBEDATE,
       ER_TRADING_METHOD TRADINGMETHOD,
       ER_LARGE_BUY_FLAG LARGEBUYFLAG,
       ER_CHARGE_TYPE CHARGETYPE,
       ER_SPECIFY_RATE_FEE SPECIFYRATEFEE,
       ER_SPECIFY_FEE  SPECIFYFEE,
       ER_PRO_YIELD_TYPE PROYIELDTYPE,
       ER_PRO_YIELD     PROYIELD,
       ER_IN_CONTRACT  INCONTRACT,
       ER_OUT_CONTRACT  OUTCONTRACT,
       ER_VALID_FLAG  VALIDFLAG,
       ER_RETURN_CODE RETURNCODE,
       ER_EXPECTED_CFM_DATE EXPECTEDCFMDATE,
       ER_ERROR_DEC ERRORDEC,
       ER_TA_PRODUCT_CODE TAPRODUCTCODE,
       ER_BATCH_NO  BATCHNO
  </sql>
  
   <sql id="BaseListReq" >
       ER_ID ERID,
       ER_CHANNEL_CODE ERCHANNELCODE,
       ER_TRANS_DATE  ERTRANSDATE,
       ER_APP_SHEET_SERIAL_NO ERAPPSHEETSERIALNO,
       ER_FUND_CODE ERFUNDCODE,
       ER_LARGE_REDEMPTION_FLAG ERLARGEREDEMPTIONFLAG,
       ER_TRANSACTION_DATE ERTRANSACTIONDATE,
       ER_TRANSACTION_TIME ERTRANSACTIONTIME,
       ER_TRANSACTION_ACCOUNT_ID ERTRANSACTIONACCOUNTID,
       ER_DISTRIBUTOR_CODE ERDISTRIBUTORCODE,
       ER_APPLICATION_VOL ERAPPLICATIONVOL,
       ER_APPLICATION_AMOUNT ERAPPLICATIONAMOUNT,
       ER_BUSINESS_CODE ERBUSINESSCODE,
       ER_TA_ACCOUNT_ID ERTAACCOUNTID,
       ER_DISCOUNT_RATE_OF_COMM ERDISCOUNTRATEOFCOMM,
       ER_DEPOSIT_ACCT ERDEPOSITACCT,
       ER_REGION_CODE ERREGIONCODE,
       ER_CURRENCY_TYPE ERCURRENCYTYPE,
       ER_BRANCH_CODE ERBRANCHCODE,
       ER_ORIGINAL_APP_SHEET_NO ERORIGINALAPPSHEETNO,
       ER_ORIGINAL_SUBS_DATE ERORIGINALSUBSDATE,
       ER_INDIVIDUAL_OR_INSTITUTION ERINDIVIDUALORINSTITUTION,
       ER_VALID_PERIOD ERVALIDPERIOD,
       ER_DAYS_REDEMPTION_IN_ADVANCE ERDAYSREDEMPTIONINADVANCE,
       ER_REDEMPTION_DATE_IN_ADVANCE ERREDEMPTIONDATEINADVANCE,
       ER_ORIGINAL_SERIAL_NO  ERORIGINALSERIALNO,
       ER_DATE_OF_PERIODIC_SUBS ERDATEOFPERIODICSUBS,
       ER_TA_SERIAL_NO ERTASERIALNO,
       ER_TERM_OF_PERIODIC_SUBS ERTERMOFPERIODICSUBS,
       ER_FUTURE_BUY_DATE ERFUTUREBUYDATE,
       ER_TARGET_DISTRIBUTOR_CODE ERTARGETDISTRIBUTORCODE,
       ER_CHARGE ERCHARGE,
       ER_TARGET_BRANCH_CODE ERTARGETBRANCHCODE,
       ER_TARGET_TRANSACT_ACCT_CODE ERTARGETTRANSACTIONACCOUNTID,
       ER_TARGET_REGION_CODE ERTARGETREGIONCODE,
       ER_DIVIDEND_RATIO ERDIVIDENDRATIO,
       ER_SPECIFICATION ERSPECIFICATION,
       ER_CODE_OF_TARGET_FUND ERCODEOFTARGETFUND,
       ER_TOTAL_BACKEND_LOAD ERTOTALBACKENDLOAD,
       ER_SHARE_CLASS ERSHARECLASS,
       ER_ORIGINAL_CFM_DATE ERORIGINALCFMDATE,
       ER_DETAIL_FLAG ERDETAILFLAG,
       ER_ORIGINAL_APP_DATE ERORIGINALAPPDATE,
       ER_DEF_DIVIDEND_METHOD ERDEFDIVIDENDMETHOD,
       ER_FROZEN_CAUSE ERFROZENCAUSE,
       ER_FREEZING_DEADLINE ERFREEZINGDEADLINE,
       ER_VARIETY_CODE_PERIODIC_SUB ERVARIETYCODEOFPERIODICSUBS,
       ER_SERIAL_NO_PERIODIC_SUB ERSERIALNOOFPERIODICSUBS,
       ER_RATION_TYPE ERRATIONTYPE,
       ER_TARGET_TA_ACCOUNT_ID ERTARGETTAACCOUNTID,
       ER_TARGET_REGISTRAR_CODE ERTARGETREGISTRARCODE,
       ER_NET_NO ERNETNO,
       ER_CUSTOMER_NO ERCUSTOMERNO,
       ER_TARGET_SHARE_TYPE ERTARGETSHARETYPE,
       ER_RATION_PROTOCOL_NO ERRATIONPROTOCOLNO,
       ER_BEGIN_DATE_PERIODIC_SUBS ERBEGINDATEOFPERIODICSUBS,
       ER_END_DATE_OF_PERIODIC_SUBS ERENDDATEOFPERIODICSUBS,
       ER_SEND_DAY_OF_PERIODIC_SUBS ERSENDDAYOFPERIODICSUBS,
       ER_BROKER ERBROKER,
       ER_SALES_PROMOTION ERSALESPROMOTION,
       ER_ACCEPT_METHOD ERACCEPTMETHOD,
       ER_FORCE_REDEMPTION_TYPE ERFORCEREDEMPTIONTYPE,
       ER_TAKE_INCOME_FLAG ERTAKEINCOMEFLAG,
       ER_PURPOSE_OF_PE_SUBS ERPURPOSEOFPESUBS,
       ER_FREQUENCY_OF_PE_SUBS ERFREQUENCYOFPESUBS,
       ER_PERIOD_SUB_TIME_UNIT ERPERIODSUBTIMEUNIT,
       ER_BATCH_NUM_OF_PESUBS ERBATCHNUMOFPESUBS,
       ER_CAPITAL_MODE ERCAPITALMODE,
       ER_DETAIL_CAPTICAL_MODE ERDETAILCAPTICALMODE,
       ER_BACKENLOAD_DISCOUNT ERBACKENLOADDISCOUNT,
       ER_COMBINE_NUM ERCOMBINENUM,
       ER_FUTURE_SUBSCRIBE_DATE ERFUTURESUBSCRIBEDATE,
       ER_TRADING_METHOD ERTRADINGMETHOD,
       ER_LARGE_BUY_FLAG ERLARGEBUYFLAG,
       ER_CHARGE_TYPE ERCHARGETYPE,
       ER_SPECIFY_RATE_FEE ERSPECIFYRATEFEE,
       ER_SPECIFY_FEE  ERSPECIFYFEE,
       ER_PRO_YIELD_TYPE ERPROYIELDTYPE,
       ER_PRO_YIELD    ERPROYIELD,
       ER_IN_CONTRACT  ERINCONTRACT,
       ER_OUT_CONTRACT  EROUTCONTRACT,
       ER_VALID_FLAG  ERVALIDFLAG,
       ER_RETURN_CODE ERRETURNCODE,
       ER_EXPECTED_CFM_DATE EREXPECTEDCFMDATE,
       ER_ERROR_DEC ERERRORDEC,
       ER_TA_PRODUCT_CODE ERTAPRODUCTCODE,
       ER_BATCH_NO erBatchNo
  </sql>
  
  <resultMap id="BaseResultMapReq" type="com.sams.custom.model.ExchangeReq" >
    <id column="ER_ID" property="erId" jdbcType="DECIMAL" />
    <result column="ER_CHANNEL_CODE" property="erChannelCode" jdbcType="VARCHAR" />
    <result column="ER_TRANS_DATE" property="erTransDate" jdbcType="VARCHAR" />
    <result column="ER_APP_SHEET_SERIAL_NO" property="erAppSheetSerialNo" jdbcType="VARCHAR" />
    <result column="ER_FUND_CODE" property="erFundCode" jdbcType="VARCHAR" />
    <result column="ER_LARGE_REDEMPTION_FLAG" property="erLargeRedemptionFlag" jdbcType="VARCHAR" />
    <result column="ER_TRANSACTION_DATE" property="erTransactionDate" jdbcType="VARCHAR" />
    <result column="ER_TRANSACTION_TIME" property="erTransactionTime" jdbcType="VARCHAR" />
    <result column="ER_TRANSACTION_ACCOUNT_ID" property="erTransactionAccountId" jdbcType="VARCHAR" />
    <result column="ER_DISTRIBUTOR_CODE" property="erDistributorCode" jdbcType="VARCHAR" />
    <result column="ER_APPLICATION_VOL" property="erApplicationVol" jdbcType="DECIMAL" />
    <result column="ER_APPLICATION_AMOUNT" property="erApplicationAmount" jdbcType="DECIMAL" />
    <result column="ER_BUSINESS_CODE" property="erBusinessCode" jdbcType="VARCHAR" />
    <result column="ER_TA_ACCOUNT_ID" property="erTaAccountId" jdbcType="VARCHAR" />
    <result column="ER_DISCOUNT_RATE_OF_COMM" property="erDiscountRateOfComm" jdbcType="DECIMAL" />
    <result column="ER_DEPOSIT_ACCT" property="erDepositAcct" jdbcType="VARCHAR" />
    <result column="ER_REGION_CODE" property="erRegionCode" jdbcType="VARCHAR" />
    <result column="ER_CURRENCY_TYPE" property="erCurrencyType" jdbcType="VARCHAR" />
    <result column="ER_BRANCH_CODE" property="erBranchCode" jdbcType="VARCHAR" />
    <result column="ER_ORIGINAL_APP_SHEET_NO" property="erOriginalAppSheetNo" jdbcType="VARCHAR" />
    <result column="ER_ORIGINAL_SUBS_DATE" property="erOriginalSubsDate" jdbcType="VARCHAR" />
    <result column="ER_INDIVIDUAL_OR_INSTITUTION" property="erIndividualOrInstitution" jdbcType="VARCHAR" />
    <result column="ER_VALID_PERIOD" property="erValidPeriod" jdbcType="DECIMAL" />
    <result column="ER_DAYS_REDEMPTION_IN_ADVANCE" property="erDaysRedemptionInAdvance" jdbcType="DECIMAL" />
    <result column="ER_REDEMPTION_DATE_IN_ADVANCE" property="erRedemptionDateInAdvance" jdbcType="VARCHAR" />
    <result column="ER_ORIGINAL_SERIAL_NO" property="erOriginalSerialNo" jdbcType="VARCHAR" />
    <result column="ER_DATE_OF_PERIODIC_SUBS" property="erDateOfPeriodicSubs" jdbcType="VARCHAR" />
    <result column="ER_TA_SERIAL_NO" property="erTaSerialNo" jdbcType="VARCHAR" />
    <result column="ER_TERM_OF_PERIODIC_SUBS" property="erTermOfPeriodicSubs" jdbcType="DECIMAL" />
    <result column="ER_FUTURE_BUY_DATE" property="erFutureBuyDate" jdbcType="VARCHAR" />
    <result column="ER_TARGET_DISTRIBUTOR_CODE" property="erTargetDistributorCode" jdbcType="VARCHAR" />
    <result column="ER_CHARGE" property="erCharge" jdbcType="DECIMAL" />
    <result column="ER_TARGET_BRANCH_CODE" property="erTargetBranchCode" jdbcType="VARCHAR" />
    <result column="ER_TARGET_TRANSACT_ACCT_CODE" property="erTargetTransactAcctCode" jdbcType="VARCHAR" />
    <result column="ER_TARGET_REGION_CODE" property="erTargetRegionCode" jdbcType="VARCHAR" />
    <result column="ER_DIVIDEND_RATIO" property="erDividendRatio" jdbcType="DECIMAL" />
    <result column="ER_SPECIFICATION" property="erSpecification" jdbcType="VARCHAR" />
    <result column="ER_CODE_OF_TARGET_FUND" property="erCodeOfTargetFund" jdbcType="VARCHAR" />
    <result column="ER_TOTAL_BACKEND_LOAD" property="erTotalBackendLoad" jdbcType="DECIMAL" />
    <result column="ER_SHARE_CLASS" property="erShareClass" jdbcType="VARCHAR" />
    <result column="ER_ORIGINAL_CFM_DATE" property="erOriginalCfmDate" jdbcType="VARCHAR" />
    <result column="ER_DETAIL_FLAG" property="erDetailFlag" jdbcType="VARCHAR" />
    <result column="ER_ORIGINAL_APP_DATE" property="erOriginalAppDate" jdbcType="VARCHAR" />
    <result column="ER_DEF_DIVIDEND_METHOD" property="erDefDividendMethod" jdbcType="VARCHAR" />
    <result column="ER_FROZEN_CAUSE" property="erFrozenCause" jdbcType="VARCHAR" />
    <result column="ER_FREEZING_DEADLINE" property="erFreezingDeadline" jdbcType="VARCHAR" />
    <result column="ER_VARIETY_CODE_PERIODIC_SUB" property="erVarietyCodePeriodicSub" jdbcType="VARCHAR" />
    <result column="ER_SERIAL_NO_PERIODIC_SUB" property="erSerialNoPeriodicSub" jdbcType="VARCHAR" />
    <result column="ER_RATION_TYPE" property="erRationType" jdbcType="VARCHAR" />
    <result column="ER_TARGET_TA_ACCOUNT_ID" property="erTargetTaAccountId" jdbcType="VARCHAR" />
    <result column="ER_TARGET_REGISTRAR_CODE" property="erTargetRegistrarCode" jdbcType="VARCHAR" />
    <result column="ER_NET_NO" property="erNetNo" jdbcType="VARCHAR" />
    <result column="ER_CUSTOMER_NO" property="erCustomerNo" jdbcType="VARCHAR" />
    <result column="ER_TARGET_SHARE_TYPE" property="erTargetShareType" jdbcType="VARCHAR" />
    <result column="ER_RATION_PROTOCOL_NO" property="erRationProtocolNo" jdbcType="VARCHAR" />
    <result column="ER_BEGIN_DATE_PERIODIC_SUBS" property="erBeginDatePeriodicSubs" jdbcType="VARCHAR" />
    <result column="ER_END_DATE_OF_PERIODIC_SUBS" property="erEndDateOfPeriodicSubs" jdbcType="VARCHAR" />
    <result column="ER_SEND_DAY_OF_PERIODIC_SUBS" property="erSendDayOfPeriodicSubs" jdbcType="DECIMAL" />
    <result column="ER_BROKER" property="erBroker" jdbcType="VARCHAR" />
    <result column="ER_SALES_PROMOTION" property="erSalesPromotion" jdbcType="VARCHAR" />
    <result column="ER_ACCEPT_METHOD" property="erAcceptMethod" jdbcType="VARCHAR" />
    <result column="ER_FORCE_REDEMPTION_TYPE" property="erForceRedemptionType" jdbcType="VARCHAR" />
    <result column="ER_TAKE_INCOME_FLAG" property="erTakeIncomeFlag" jdbcType="VARCHAR" />
    <result column="ER_PURPOSE_OF_PE_SUBS" property="erPurposeOfPeSubs" jdbcType="VARCHAR" />
    <result column="ER_FREQUENCY_OF_PE_SUBS" property="erFrequencyOfPeSubs" jdbcType="DECIMAL" />
    <result column="ER_PERIOD_SUB_TIME_UNIT" property="erPeriodSubTimeUnit" jdbcType="VARCHAR" />
    <result column="ER_BATCH_NUM_OF_PESUBS" property="erBatchNumOfPesubs" jdbcType="DECIMAL" />
    <result column="ER_CAPITAL_MODE" property="erCapitalMode" jdbcType="VARCHAR" />
    <result column="ER_DETAIL_CAPTICAL_MODE" property="erDetailCapticalMode" jdbcType="VARCHAR" />
    <result column="ER_BACKENLOAD_DISCOUNT" property="erBackenloadDiscount" jdbcType="DECIMAL" />
    <result column="ER_COMBINE_NUM" property="erCombineNum" jdbcType="VARCHAR" />
    <result column="ER_FUTURE_SUBSCRIBE_DATE" property="erFutureSubscribeDate" jdbcType="VARCHAR" />
    <result column="ER_TRADING_METHOD" property="erTradingMethod" jdbcType="VARCHAR" />
    <result column="ER_LARGE_BUY_FLAG" property="erLargeBuyFlag" jdbcType="VARCHAR" />
    <result column="ER_CHARGE_TYPE" property="erChargeType" jdbcType="VARCHAR" />
    <result column="ER_SPECIFY_RATE_FEE" property="erSpecifyRateFee" jdbcType="DECIMAL" />
    <result column="ER_SPECIFY_FEE" property="erSpecifyFee" jdbcType="DECIMAL" />
    <result column="ER_VALID_FLAG" property="erValidFlag" jdbcType="VARCHAR" />
    <result column="ER_ERROR_DEC" property="erErrorDEC" jdbcType="VARCHAR" />
    <result column="ER_TA_SERIAL_NO" property="erTASerialNO" jdbcType="VARCHAR" />
    <result column="ER_TA_TRANS_STATUS" property="erTATransStatus" jdbcType="VARCHAR" />
    <result column="ER_EXPECTED_CFM_DATE" property="erExpectedCFMDate" jdbcType="VARCHAR" />
    <result column="ER_CTIME" property="erCtime" jdbcType="TIMESTAMP" />
    <result column="ER_UTIME" property="erUtime" jdbcType="TIMESTAMP" />
    <result column="ER_CUSER" property="erCuser" jdbcType="VARCHAR" />
    <result column="ER_UUSER" property="erUuser" jdbcType="VARCHAR" />
    <result column="ER_TA_PRODUCT_CODE" property="erTaProductCode" jdbcType="VARCHAR" />
    <result column="ER_BATCH_NO" property="erBatchNo" jdbcType="VARCHAR" />
  </resultMap>

  
   <delete id="deleteTransTmpDate" parameterType="hashMap" >
    delete from D_EXCHANGE_REQ_TMP
    where 1=1
    <if test="CHANNELCODE != null" >
      AND  ERT_CHANNEL_CODE=#{CHANNELCODE,jdbcType=VARCHAR}
    </if>
    <if test="TRANSDATE != null" >
      AND  ERT_TRANS_DATE=#{TRANSDATE,jdbcType=VARCHAR}
    </if>
  </delete>
  
  <delete id="deleteTransReqDate" parameterType="hashMap" >
    delete from D_EXCHANGE_REQ
    where 1=1
    <if test="CHANNELCODE != null" >
      AND  ER_CHANNEL_CODE=#{CHANNELCODE,jdbcType=VARCHAR}
    </if>
    <if test="TRANSDATE != null" >
      AND  ER_TRANS_DATE=#{TRANSDATE,jdbcType=VARCHAR}
    </if>
  </delete>
  
   <delete id="deleteTransCfmDate" parameterType="hashMap" >
    delete from D_EXCHANGE_REQ_CFM
    where 1=1
    <if test="CHANNELCODE != null" >
      AND  ERC_CHANNEL_CODE=#{CHANNELCODE,jdbcType=VARCHAR}
    </if>
    <if test="TRANSDATE != null" >
      AND  ERC_TRANSACTION_CFM_DATE=#{TRANSDATE,jdbcType=VARCHAR}
    </if>
  </delete>
  
  <select id="selectTransTmpCount" resultType="Integer" parameterType="hashMap" >
    select 
    count(*) selectCount
    from D_EXCHANGE_REQ_TMP
    where 1=1
    <if test="CHANNELCODE != null" >
      AND  ERT_CHANNEL_CODE=#{CHANNELCODE,jdbcType=VARCHAR}
    </if>
    <if test="TRANSDATE != null" >
      AND  ERT_TRANS_DATE=#{TRANSDATE,jdbcType=VARCHAR}
    </if>
  </select>
    
  <select id="selectTransReqCount" resultType="Integer" parameterType="hashMap" >
    select 
    count(*) selectCount
    from D_EXCHANGE_REQ
    where 1=1
    <if test="CHANNELCODE != null" >
      AND  ER_CHANNEL_CODE=#{CHANNELCODE,jdbcType=VARCHAR}
    </if>
    <if test="TRANSDATE != null" >
      AND  ER_TRANS_DATE=#{TRANSDATE,jdbcType=VARCHAR}
    </if>
  </select>
  
  
  <select id="selectTransCfmCount" resultType="Integer" parameterType="hashMap" >
    select 
    count(*) selectCount
    from D_EXCHANGE_REQ_CFM
    where 1=1
    <if test="CHANNELCODE != null" >
      AND  ERC_CHANNEL_CODE=#{CHANNELCODE,jdbcType=VARCHAR}
    </if>
    <if test="TRANSDATE != null" >
      AND  ERC_TRANSACTION_CFM_DATE=#{TRANSDATE,jdbcType=VARCHAR}
    </if>
  </select>

  <insert id="insertByBatchTransTmp"  parameterType="java.util.List" >
    insert all
     <foreach collection="list" item="item" index="index" >
     into D_EXCHANGE_REQ_TMP (ERT_CHANNEL_CODE,ERT_TRANS_DATE, ERT_APP_SHEET_SERIAL_NO, 
      ERT_FUND_CODE, ERT_LARGE_REDEMPTION_FLAG, ERT_TRANSACTION_DATE, 
      ERT_TRANSACTION_TIME, ERT_TRANSACTION_ACCOUNT_ID, 
      ERT_DISTRIBUTOR_CODE, ERT_APPLICATION_VOL, 
      ERT_APPLICATION_AMOUNT, ERT_BUSINESS_CODE, 
      ERT_TA_ACCOUNT_ID, ERT_DISCOUNT_RATE_OF_COMM, 
      ERT_DEPOSIT_ACCT, ERT_REGION_CODE, ERT_CURRENCY_TYPE, 
      ERT_BRANCH_CODE, ERT_ORIGINAL_APP_SHEET_NO, ERT_ORIGINAL_SUBS_DATE, 
      ERT_INDIVIDUAL_OR_INSTITUTION, ERT_VALID_PERIOD, 
      ERT_DAYS_REDEMPTION_IN_ADVANCE, ERT_REDEMPTION_DATE_IN_ADVANCE, 
      ERT_ORIGINAL_SERIAL_NO, ERT_DATE_OF_PERIODIC_SUBS, 
      ERT_TA_SERIAL_NO, ERT_TERM_OF_PERIODIC_SUBS, ERT_FUTURE_BUY_DATE, 
      ERT_TARGET_DISTRIBUTOR_CODE, ERT_CHARGE, ERT_TARGET_BRANCH_CODE, 
      ERT_TARGET_TRANSACT_ACCT_CODE, ERT_TARGET_REGION_CODE, 
      ERT_DIVIDEND_RATIO, ERT_SPECIFICATION, ERT_CODE_OF_TARGET_FUND, 
      ERT_TOTAL_BACKEND_LOAD, ERT_SHARE_CLASS, ERT_ORIGINAL_CFM_DATE, 
      ERT_DETAIL_FLAG, ERT_ORIGINAL_APP_DATE, ERT_DEF_DIVIDEND_METHOD, 
      ERT_FROZEN_CAUSE, ERT_FREEZING_DEADLINE, ERT_VARIETY_CODE_PERIODIC_SUB, 
      ERT_SERIAL_NO_PERIODIC_SUB, ERT_RATION_TYPE, 
      ERT_TARGET_TA_ACCOUNT_ID, ERT_TARGET_REGISTRAR_CODE, 
      ERT_NET_NO, ERT_CUSTOMER_NO, ERT_TARGET_SHARE_TYPE, 
      ERT_RATION_PROTOCOL_NO, ERT_BEGIN_DATE_PERIODIC_SUBS, 
      ERT_END_DATE_OF_PERIODIC_SUBS, ERT_SEND_DAY_OF_PERIODIC_SUBS, 
      ERT_BROKER, ERT_SALES_PROMOTION, ERT_ACCEPT_METHOD, 
      ERT_FORCE_REDEMPTION_TYPE, ERT_TAKE_INCOME_FLAG, 
      ERT_PURPOSE_OF_PE_SUBS, ERT_FREQUENCY_OF_PE_SUBS, 
      ERT_PERIOD_SUB_TIME_UNIT, ERT_BATCH_NUM_OF_PESUBS, 
      ERT_CAPITAL_MODE, ERT_DETAIL_CAPTICAL_MODE, 
      ERT_BACKENLOAD_DISCOUNT, ERT_COMBINE_NUM, ERT_FUTURE_SUBSCRIBE_DATE, 
      ERT_TRADING_METHOD, ERT_LARGE_BUY_FLAG, ERT_CHARGE_TYPE, 
      ERT_SPECIFY_RATE_FEE, ERT_SPECIFY_FEE 
      )
    values (
			#{item.CHANNELCODE,jdbcType=VARCHAR},
			#{item.BUSINESSDATE,jdbcType=VARCHAR},
			#{item.APPSHEETSERIALNO,jdbcType=VARCHAR},
			#{item.FUNDCODE,jdbcType=VARCHAR},
			#{item.LARGEREDEMPTIONFLAG,jdbcType=VARCHAR},
			#{item.TRANSACTIONDATE,jdbcType=VARCHAR},
			#{item.TRANSACTIONTIME,jdbcType=VARCHAR},
			#{item.TRANSACTIONACCOUNTID,jdbcType=VARCHAR},
			#{item.DISTRIBUTORCODE,jdbcType=VARCHAR},
			#{item.APPLICATIONVOL,jdbcType=DECIMAL},
			#{item.APPLICATIONAMOUNT,jdbcType=DECIMAL},
			#{item.BUSINESSCODE,jdbcType=VARCHAR},
			#{item.TAACCOUNTID,jdbcType=VARCHAR},
			#{item.DISCOUNTRATEOFCOMM,jdbcType=DECIMAL},
			#{item.DEPOSITACCT,jdbcType=VARCHAR},
			#{item.REGIONCODE,jdbcType=VARCHAR},
			#{item.CURRENCYTYPE,jdbcType=VARCHAR},
			#{item.BRANCHCODE,jdbcType=VARCHAR},
			#{item.ORIGINALAPPSHEETNO,jdbcType=VARCHAR},
			#{item.ORIGINALSUBSDATE,jdbcType=VARCHAR},
			#{item.INDIVIDUALORINSTITUTION,jdbcType=VARCHAR},
			#{item.VALIDPERIOD,jdbcType=DECIMAL},
			#{item.DAYSREDEMPTIONINADVANCE,jdbcType=DECIMAL},
			#{item.REDEMPTIONDATEINADVANCE,jdbcType=VARCHAR},
			#{item.ORIGINALSERIALNO,jdbcType=VARCHAR},
			#{item.DATEOFPERIODICSUBS,jdbcType=VARCHAR},
			#{item.TASERIALNO,jdbcType=VARCHAR},
			#{item.TERMOFPERIODICSUBS,jdbcType=DECIMAL},
			#{item.FUTUREBUYDATE,jdbcType=VARCHAR},
			#{item.TARGETDISTRIBUTORCODE,jdbcType=VARCHAR},
			#{item.CHARGE,jdbcType=DECIMAL},
			#{item.TARGETBRANCHCODE,jdbcType=VARCHAR},
			#{item.TARGETTRANSACTACCTCODE,jdbcType=VARCHAR},
			#{item.TARGETREGIONCODE,jdbcType=VARCHAR},
			#{item.DIVIDENDRATIO,jdbcType=DECIMAL},
			#{item.SPECIFICATION,jdbcType=VARCHAR},
			#{item.CODEOFTARGETFUND,jdbcType=VARCHAR},
			#{item.TOTALBACKENDLOAD,jdbcType=DECIMAL},
			#{item.SHARECLASS,jdbcType=VARCHAR},
			#{item.ORIGINALCFMDATE,jdbcType=VARCHAR},
			#{item.DETAILFLAG,jdbcType=VARCHAR},
			#{item.ORIGINALAPPDATE,jdbcType=VARCHAR},
			#{item.DEFDIVIDENDMETHOD,jdbcType=VARCHAR},
			#{item.FROZENCAUSE,jdbcType=VARCHAR},
			#{item.FREEZINGDEADLINE,jdbcType=VARCHAR},
			#{item.VARIETYCODEPERIODICSUB,jdbcType=VARCHAR},
			#{item.SERIALNOPERIODICSUB,jdbcType=VARCHAR},
			#{item.RATIONTYPE,jdbcType=VARCHAR},
			#{item.TARGETTAACCOUNTID,jdbcType=VARCHAR},
			#{item.TARGETREGISTRARCODE,jdbcType=VARCHAR},
			#{item.NETNO,jdbcType=VARCHAR},
			#{item.CUSTOMERNO,jdbcType=VARCHAR},
			#{item.TARGETSHARETYPE,jdbcType=VARCHAR},
			#{item.RATIONPROTOCOLNO,jdbcType=VARCHAR},
			#{item.BEGINDATEPERIODICSUBS,jdbcType=VARCHAR},
			#{item.ENDDATEOFPERIODICSUBS,jdbcType=VARCHAR},
			#{item.SENDDAYOFPERIODICSUBS,jdbcType=DECIMAL},
			#{item.BROKER,jdbcType=VARCHAR},
			#{item.SALESPROMOTION,jdbcType=VARCHAR},
			#{item.ACCEPTMETHOD,jdbcType=VARCHAR},
			#{item.FORCEREDEMPTIONTYPE,jdbcType=VARCHAR},
			#{item.TAKEINCOMEFLAG,jdbcType=VARCHAR},
			#{item.PURPOSEOFPESUBS,jdbcType=VARCHAR},
			#{item.FREQUENCYOFPESUBS,jdbcType=DECIMAL},
			#{item.PERIODSUBTIMEUNIT,jdbcType=VARCHAR},
			#{item.BATCHNUMOFPESUBS,jdbcType=DECIMAL},
			#{item.CAPITALMODE,jdbcType=VARCHAR},
			#{item.DETAILCAPTICALMODE,jdbcType=VARCHAR},
			#{item.BACKENLOADDISCOUNT,jdbcType=DECIMAL},
			#{item.COMBINENUM,jdbcType=VARCHAR},
			#{item.FUTURESUBSCRIBEDATE,jdbcType=VARCHAR},
			#{item.TRADINGMETHOD,jdbcType=VARCHAR},
			#{item.LARGEBUYFLAG,jdbcType=VARCHAR},
			#{item.CHARGETYPE,jdbcType=VARCHAR},
			#{item.SPECIFYRATEFEE,jdbcType=DECIMAL},
			#{item.SPECIFYFEE,jdbcType=DECIMAL}
			)
      </foreach>
      select 1 from dual
  </insert>
				
  <insert id="insertByBatchTransReq"  parameterType="java.util.List" >
    insert all
     <foreach collection="list" item="item" index="index">
     into D_EXCHANGE_REQ (ER_CHANNEL_CODE, ER_TRANS_DATE, 
      ER_APP_SHEET_SERIAL_NO, ER_FUND_CODE, ER_LARGE_REDEMPTION_FLAG, 
      ER_TRANSACTION_DATE, ER_TRANSACTION_TIME, ER_TRANSACTION_ACCOUNT_ID, 
      ER_DISTRIBUTOR_CODE, ER_APPLICATION_VOL, ER_APPLICATION_AMOUNT, 
      ER_BUSINESS_CODE, ER_TA_ACCOUNT_ID, ER_DISCOUNT_RATE_OF_COMM, 
      ER_DEPOSIT_ACCT, ER_REGION_CODE, ER_CURRENCY_TYPE, 
      ER_BRANCH_CODE, ER_ORIGINAL_APP_SHEET_NO, ER_ORIGINAL_SUBS_DATE, 
      ER_INDIVIDUAL_OR_INSTITUTION, ER_VALID_PERIOD, 
      ER_DAYS_REDEMPTION_IN_ADVANCE, ER_REDEMPTION_DATE_IN_ADVANCE, 
      ER_ORIGINAL_SERIAL_NO, ER_DATE_OF_PERIODIC_SUBS, 
      ER_TA_SERIAL_NO, ER_TERM_OF_PERIODIC_SUBS, ER_FUTURE_BUY_DATE, 
      ER_TARGET_DISTRIBUTOR_CODE, ER_CHARGE, ER_TARGET_BRANCH_CODE, 
      ER_TARGET_TRANSACT_ACCT_CODE, ER_TARGET_REGION_CODE, 
      ER_DIVIDEND_RATIO, ER_SPECIFICATION, ER_CODE_OF_TARGET_FUND, 
      ER_TOTAL_BACKEND_LOAD, ER_SHARE_CLASS, ER_ORIGINAL_CFM_DATE, 
      ER_DETAIL_FLAG, ER_ORIGINAL_APP_DATE, ER_DEF_DIVIDEND_METHOD, 
      ER_FROZEN_CAUSE, ER_FREEZING_DEADLINE, ER_VARIETY_CODE_PERIODIC_SUB, 
      ER_SERIAL_NO_PERIODIC_SUB, ER_RATION_TYPE, ER_TARGET_TA_ACCOUNT_ID, 
      ER_TARGET_REGISTRAR_CODE, ER_NET_NO, ER_CUSTOMER_NO, 
      ER_TARGET_SHARE_TYPE, ER_RATION_PROTOCOL_NO, 
      ER_BEGIN_DATE_PERIODIC_SUBS, ER_END_DATE_OF_PERIODIC_SUBS, 
      ER_SEND_DAY_OF_PERIODIC_SUBS, ER_BROKER, ER_SALES_PROMOTION, 
      ER_ACCEPT_METHOD, ER_FORCE_REDEMPTION_TYPE, 
      ER_TAKE_INCOME_FLAG, ER_PURPOSE_OF_PE_SUBS, ER_FREQUENCY_OF_PE_SUBS, 
      ER_PERIOD_SUB_TIME_UNIT, ER_BATCH_NUM_OF_PESUBS, 
      ER_CAPITAL_MODE, ER_DETAIL_CAPTICAL_MODE, ER_BACKENLOAD_DISCOUNT, 
      ER_COMBINE_NUM, ER_FUTURE_SUBSCRIBE_DATE, ER_TRADING_METHOD, 
      ER_LARGE_BUY_FLAG, ER_CHARGE_TYPE, ER_SPECIFY_RATE_FEE, 
      ER_SPECIFY_FEE, ER_VALID_FLAG, ER_ERROR_DEC, ER_TA_SERIAL_NO, 
    	ER_TA_TRANS_STATUS,ER_EXPECTED_CFM_DATE,ER_RETURN_CODE
      )
	    values ( 
			#{item.CHANNELCODE,jdbcType=VARCHAR},
			#{item.BUSINESSDATE,jdbcType=VARCHAR},
			#{item.APPSHEETSERIALNO,jdbcType=VARCHAR},
			#{item.FUNDCODE,jdbcType=VARCHAR},
			#{item.LARGEREDEMPTIONFLAG,jdbcType=VARCHAR},
			#{item.TRANSACTIONDATE,jdbcType=VARCHAR},
			#{item.TRANSACTIONTIME,jdbcType=VARCHAR},
			#{item.TRANSACTIONACCOUNTID,jdbcType=VARCHAR},
			#{item.DISTRIBUTORCODE,jdbcType=VARCHAR},
			#{item.APPLICATIONVOL,jdbcType=DECIMAL},
			#{item.APPLICATIONAMOUNT,jdbcType=DECIMAL},
			#{item.BUSINESSCODE,jdbcType=VARCHAR},
			#{item.TAACCOUNTID,jdbcType=VARCHAR},
			#{item.DISCOUNTRATEOFCOMM,jdbcType=DECIMAL},
			#{item.DEPOSITACCT,jdbcType=VARCHAR},
			#{item.REGIONCODE,jdbcType=VARCHAR},
			#{item.CURRENCYTYPE,jdbcType=VARCHAR},
			#{item.BRANCHCODE,jdbcType=VARCHAR},
			#{item.ORIGINALAPPSHEETNO,jdbcType=VARCHAR},
			#{item.ORIGINALSUBSDATE,jdbcType=VARCHAR},
			#{item.INDIVIDUALORINSTITUTION,jdbcType=VARCHAR},
			#{item.VALIDPERIOD,jdbcType=DECIMAL},
			#{item.DAYSREDEMPTIONINADVANCE,jdbcType=DECIMAL},
			#{item.REDEMPTIONDATEINADVANCE,jdbcType=VARCHAR},
			#{item.ORIGINALSERIALNO,jdbcType=VARCHAR},
			#{item.DATEOFPERIODICSUBS,jdbcType=VARCHAR},
			#{item.TASERIALNO,jdbcType=VARCHAR},
			#{item.TERMOFPERIODICSUBS,jdbcType=DECIMAL},
			#{item.FUTUREBUYDATE,jdbcType=VARCHAR},
			#{item.TARGETDISTRIBUTORCODE,jdbcType=VARCHAR},
			#{item.CHARGE,jdbcType=DECIMAL},
			#{item.TARGETBRANCHCODE,jdbcType=VARCHAR},
			#{item.TARGETTRANSACTACCTCODE,jdbcType=VARCHAR},
			#{item.TARGETREGIONCODE,jdbcType=VARCHAR},
			#{item.DIVIDENDRATIO,jdbcType=DECIMAL},
			#{item.SPECIFICATION,jdbcType=VARCHAR},
			#{item.CODEOFTARGETFUND,jdbcType=VARCHAR},
			#{item.TOTALBACKENDLOAD,jdbcType=DECIMAL},
			#{item.SHARECLASS,jdbcType=VARCHAR},
			#{item.ORIGINALCFMDATE,jdbcType=VARCHAR},
			#{item.DETAILFLAG,jdbcType=VARCHAR},
			#{item.ORIGINALAPPDATE,jdbcType=VARCHAR},
			#{item.DEFDIVIDENDMETHOD,jdbcType=VARCHAR},
			#{item.FROZENCAUSE,jdbcType=VARCHAR},
			#{item.FREEZINGDEADLINE,jdbcType=VARCHAR},
			#{item.VARIETYCODEPERIODICSUB,jdbcType=VARCHAR},
			#{item.SERIALNOPERIODICSUB,jdbcType=VARCHAR},
			#{item.RATIONTYPE,jdbcType=VARCHAR},
			#{item.TARGETTAACCOUNTID,jdbcType=VARCHAR},
			#{item.TARGETREGISTRARCODE,jdbcType=VARCHAR},
			#{item.NETNO,jdbcType=VARCHAR},
			#{item.CUSTOMERNO,jdbcType=VARCHAR},
			#{item.TARGETSHARETYPE,jdbcType=VARCHAR},
			#{item.RATIONPROTOCOLNO,jdbcType=VARCHAR},
			#{item.BEGINDATEPERIODICSUBS,jdbcType=VARCHAR},
			#{item.ENDDATEOFPERIODICSUBS,jdbcType=VARCHAR},
			#{item.SENDDAYOFPERIODICSUBS,jdbcType=DECIMAL},
			#{item.BROKER,jdbcType=VARCHAR},
			#{item.SALESPROMOTION,jdbcType=VARCHAR},
			#{item.ACCEPTMETHOD,jdbcType=VARCHAR},
			#{item.FORCEREDEMPTIONTYPE,jdbcType=VARCHAR},
			#{item.TAKEINCOMEFLAG,jdbcType=VARCHAR},
			#{item.PURPOSEOFPESUBS,jdbcType=VARCHAR},
			#{item.FREQUENCYOFPESUBS,jdbcType=DECIMAL},
			#{item.PERIODSUBTIMEUNIT,jdbcType=VARCHAR},
			#{item.BATCHNUMOFPESUBS,jdbcType=DECIMAL},
			#{item.CAPITALMODE,jdbcType=VARCHAR},
			#{item.DETAILCAPTICALMODE,jdbcType=VARCHAR},
			#{item.BACKENLOADDISCOUNT,jdbcType=DECIMAL},
			#{item.COMBINENUM,jdbcType=VARCHAR},
			#{item.FUTURESUBSCRIBEDATE,jdbcType=VARCHAR},
			#{item.TRADINGMETHOD,jdbcType=VARCHAR},
			#{item.LARGEBUYFLAG,jdbcType=VARCHAR},
			#{item.CHARGETYPE,jdbcType=VARCHAR},
			#{item.SPECIFYRATEFEE,jdbcType=DECIMAL},
			#{item.SPECIFYFEE,jdbcType=DECIMAL},
			#{item.VALIDFLAG,jdbcType=VARCHAR},
			#{item.ERRORDEC,jdbcType=VARCHAR},
			#{item.TASERIALNO,jdbcType=VARCHAR},
			#{item.TATRANSSTATUS,jdbcType=VARCHAR},
			#{item.EXPECTED_CFM_DATE,jdbcType=VARCHAR},
			#{item.RETURNCODE,jdbcType=VARCHAR}
			)
			</foreach>
			select 1 from dual
  </insert>
  
  <insert id="insertByBatchTransCfm" parameterType="java.util.List" >
		 INSERT ALL 
 <foreach collection="list" index="index" item="item">
 INTO D_EXCHANGE_REQ_CFM
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="item.ID != null" >
        ERC_ID,
      </if>
      <if test="item.CHANNELCODE != null" >
        ERC_CHANNEL_CODE,
      </if>
      <if test="item.APPSHEETSERIALNO != null" >
        ERC_APP_SHEET_SERIAL_NO,
      </if>
      <if test="item.TRANSDATE != null" >
        ERC_TRANSACTION_CFM_DATE,
      </if>
      <if test="item.CURRENCYTYPE != null" >
        ERC_CURRENCY_TYPE,
      </if>
      <if test="item.CONFIRMEDVOL != null" >
        ERC_CONFIRMED_VOL,
      </if>
      <if test="item.CONFIRMEDAMOUNT != null" >
        ERC_CONFIRMED_AMOUNT,
      </if>
      <if test="item.FUNDCODE != null" >
        ERC_FUND_CODE,
      </if>
      <if test="item.LARGEREDEMPTIONFLAG != null" >
        ERC_LARGE_REDEMPTION_FLAG,
      </if>
      <if test="item.TRANSACTIONDATE != null" >
        ERC_TRANSACTION_DATE,
      </if>
      <if test="item.TRANSACTIONTIME != null" >
        ERC_TRANSACTION_TIME,
      </if>
      <if test="item.RETURNCODE != null" >
        ERC_RETURN_CODE,
      </if>
      <if test="item.TRANSACTIONACCOUNTID != null" >
        ERC_TRANSACTION_ACCOUNT_ID,
      </if>
      <if test="item.DISTRIBUTORCODE != null" >
        ERC_DISTRIBUTOR_CODE,
      </if>
      <if test="item.APPLICATIONVOL != null" >
        ERC_APPLICATION_VOL,
      </if>
      <if test="item.APPLICATIONAMOUNT != null" >
        ERC_APPLICATION_AMOUNT,
      </if>
      <if test="item.BUSINESSCODE != null" >
        ERC_BUSINESS_CODE,
      </if>
      <if test="item.TAACCOUNTID != null" >
        ERC_TA_ACCOUNT_ID,
      </if>
      <if test="item.TASERIALNO != null" >
        ERC_TA_SERIAL_NO,
      </if>
      <if test="item.DISCOUNTRATEOFCOMM != null" >
        ERC_DISCOUNT_RATE_OF_COMM,
      </if>
      <if test="item.DEPOSITACCT != null" >
        ERC_DEPOSIT_ACCT,
      </if>
      <if test="item.REGIONCODE != null" >
        ERC_REGION_CODE,
      </if>
      <if test="item.DOWNLOADDATE != null" >
        ERC_DOWNLOAD_DATE,
      </if>
      <if test="item.CHARGE != null" >
        ERC_CHARGE,
      </if>
      <if test="item.AGENCYFEE != null" >
        ERC_AGENCY_FEE,
      </if>
      <if test="item.NAV != null" >
        ERC_NAV,
      </if>
      <if test="item.BRANCHCODE != null" >
        ERC_BRANCH_CODE,
      </if>
      <if test="item.ORIGINALAPPSHEETNO != null" >
        ERC_ORIGINAL_APP_SHEET_NO,
      </if>
      <if test="item.ORIGINALSUBSDATE != null" >
        ERC_ORIGINAL_SUBS_DATE,
      </if>
      <if test="item.OTHERFEE1 != null" >
        ERC_OTHER_FEE1,
      </if>
      <if test="item.INDIVIDUALORINSTITUTION != null" >
        ERC_INDIVIDUAL_OR_INSTITUTION,
      </if>
      <if test="item.REDEMPTIONDATEINADVANCE != null" >
        ERC_REDEMPTION_DATE_INADVANCE,
      </if>
      <if test="item.STAMPDUTY != null" >
        ERC_STAMP_DUTY,
      </if>
      <if test="item.VALIDPERIOD != null" >
        ERC_VALID_PERIOD,
      </if>
      <if test="item.RATEFEE != null" >
        ERC_RATE_FEE,
      </if>
      <if test="item.TOTALBACKENDLOAD != null" >
        ERC_TOTAL_BACKEND_LOAD,
      </if>
      <if test="item.ORIGINALSERIALNO != null" >
        ERC_ORIGINAL_SERIAL_NO,
      </if>
      <if test="item.SPECIFICATION != null" >
        ERC_SPECIFICATION,
      </if>
      <if test="item.DATEOFPERIODICSUBS != null" >
        ERC_DATE_OF_PERIODIC_SUBS,
      </if>
      <if test="item.TARGETDISTRIBUTORCODE != null" >
        ERC_TARGET_DISTRIBUTOR_CODE,
      </if>
      <if test="item.TARGETBRANCHCODE != null" >
        ERC_TARGET_BRANCH_CODE,
      </if>
      <if test="item.TARGETTRANSACTACCTCODE != null" >
        ERC_TARGET_TRANSACT_ACCT_CODE,
      </if>
      <if test="item.TARGETREGIONCODE != null" >
        ERC_TARGET_REGION_CODE,
      </if>
      <if test="item.TRANSFERDIRECTION != null" >
        ERC_TRANSFER_DIRECTION,
      </if>
      <if test="item.DEFDIVIDENDMETHOD != null" >
        ERC_DEF_DIVIDEND_METHOD,
      </if>
      <if test="item.DIVIDENDRATIO != null" >
        ERC_DIVIDEND_RATIO,
      </if>
      <if test="item.INTEREST != null" >
        ERC_INTEREST,
      </if>
      <if test="item.VOLUMEBYINTEREST != null" >
        ERC_VOLUME_BY_INTEREST,
      </if>
      <if test="item.INTERESTTAX != null" >
        ERC_INTEREST_TAX,
      </if>
      <if test="item.TRADINGPRICE != null" >
        ERC_TRADING_PRICE,
      </if>
      <if test="item.FREEZINGDEADLINE != null" >
        ERC_FREEZING_DEADLINE,
      </if>
      <if test="item.FROZENCAUSE != null" >
        ERC_FROZEN_CAUSE,
      </if>
      <if test="item.TAX != null" >
        ERC_TAX,
      </if>
      <if test="item.TARGETNAV != null" >
        ERC_TARGET_NAV,
      </if>
      <if test="item.TARGETFUNDPRICE != null" >
        ERC_TARGET_FUND_PRICE,
      </if>
      <if test="item.CFMVOLOFTARGETFUND != null" >
        ERC_CFM_VOL_OF_TARGET_FUND,
      </if>
      <if test="item.MINFEE != null" >
        ERC_MIN_FEE,
      </if>
      <if test="item.OTHERFEE2 != null" >
        ERC_OTHER_FEE2,
      </if>
      <if test="item.ORIGINALAPPDATE != null" >
        ERC_ORIGINAL_APP_DATE,
      </if>
      <if test="item.TRANSFERFEE != null" >
        ERC_TRANSFER_FEE,
      </if>
      <if test="item.FROMTAFLAG != null" >
        ERC_FROM_TA_FLAG,
      </if>
      <if test="item.SHARECLASS != null" >
        ERC_SHARE_CLASS,
      </if>
      <if test="item.DETAILFLAG != null" >
        ERC_DETAIL_FLAG,
      </if>
      <if test="item.REDEMPTIONINADVANCEFLAG != null" >
        ERC_REDEMPTION_IN_ADVANCE_FLAG,
      </if>
      <if test="item.FROZENMETHOD != null" >
        ERC_FROZEN_METHOD,
      </if>
      <if test="item.ORIGINALCFMDATE != null" >
        ERC_ORIGINAL_CFM_DATE,
      </if>
      <if test="item.REDEMPTIONREASON != null" >
        ERC_REDEMPTION_REASON,
      </if>
      <if test="item.CODEOFTARGETFUND != null" >
        ERC_CODE_OF_TARGET_FUND,
      </if>
      <if test="item.TOTALTRANSFEE != null" >
        ERC_TOTAL_TRANS_FEE,
      </if>
      <if test="item.VARIETYCODEPERIODICSUB != null" >
        ERC_VARIETY_CODE_PERIODIC_SUB,
      </if>
      <if test="item.SERIALNOOFPERIODICSUBS != null" >
        ERC_SERIAL_NO_OF_PERIODIC_SUBS,
      </if>
      <if test="item.RATIONTYPE != null" >
        ERC_RATION_TYPE,
      </if>
      <if test="item.TARGETTAACCOUNTID != null" >
        ERC_TARGET_TA_ACCOUNT_ID,
      </if>
      <if test="item.TARGETREGISTRARCODE != null" >
        ERC_TARGET_REGISTRAR_CODE,
      </if>
      <if test="item.NETNO != null" >
        ERC_NET_NO,
      </if>
      <if test="item.CUSTOMERNO != null" >
        ERC_CUSTOMER_NO,
      </if>
      <if test="item.TARGETSHARETYPE != null" >
        ERC_TARGET_SHARE_TYPE,
      </if>
      <if test="item.RATIONPROTOCOLNO != null" >
        ERC_RATION_PROTOCOL_NO,
      </if>
      <if test="item.BEGINDATEPERIODICSUBS != null" >
        ERC_BEGIN_DATE_PERIODIC_SUBS,
      </if>
      <if test="item.ENDDATEOFPERIODICSUBS != null" >
        ERC_END_DATE_OF_PERIODIC_SUBS,
      </if>
      <if test="item.SENDDAYOFPERIODICSUBS != null" >
        ERC_SEND_DAY_OF_PERIODIC_SUBS,
      </if>
      <if test="item.BROKER != null" >
        ERC_BROKER,
      </if>
      <if test="item.SALESPROMOTION != null" >
        ERC_SALES_PROMOTION,
      </if>
      <if test="item.ACCEPTMETHOD != null" >
        ERC_ACCEPT_METHOD,
      </if>
      <if test="item.FORCEREDEMPTIONTYPE != null" >
        ERC_FORCE_REDEMPTION_TYPE,
      </if>
      <if test="item.ALTERNATIONDATE != null" >
        ERC_ALTERNATION_DATE,
      </if>
      <if test="item.TAKEINCOMEFLAG != null" >
        ERC_TAKEINCOME_FLAG,
      </if>
      <if test="item.PURPOSEOFPESUBS != null" >
        ERC_PURPOSE_OF_PE_SUBS,
      </if>
      <if test="item.FREQUENCYOFPESUBS != null" >
        ERC_FREQUENCY_OF_PE_SUBS,
      </if>
      <if test="item.PERIODSUBTIMEUNIT != null" >
        ERC_PERIOD_SUB_TIME_UNIT,
      </if>
      <if test="item.BATCHNUMOFPESUBS != null" >
        ERC_BATCH_NUM_OF_PE_SUBS,
      </if>
      <if test="item.CAPITALMODE != null" >
        ERC_CAPITAL_MODE,
      </if>
      <if test="item.DETAILCAPTICALMODE != null" >
        ERC_DETAIL_CAPTICAL_MODE,
      </if>
      <if test="item.BACKENLOADDISCOUNT != null" >
        ERC_BACKENLOAD_DISCOUNT,
      </if>
      <if test="item.COMBINENUM != null" >
        ERC_COMBINE_NUM,
      </if>
      <if test="item.REFUNDAMOUNT != null" >
        ERC_REFUND_AMOUNT,
      </if>
      <if test="item.SALEPERCENT != null" >
        ERC_SALE_PERCENT,
      </if>
      <if test="item.MANAGERREALRATIO != null" >
        ERC_MANAGER_REAL_RATIO,
      </if>
      <if test="item.CHANGEFEE != null" >
        ERC_CHANGE_FEE,
      </if>
      <if test="item.RECUPERATEFEE != null" >
        ERC_RECUPERATE_FEE,
      </if>
      <if test="item.ACHIEVEMENTPAY != null" >
        ERC_ACHIEVEMENT_PAY,
      </if>
      <if test="item.ACHIEVEMENTCOMPEN != null" >
        ERC_ACHIEVEMENT_COMPEN,
      </if>
      <if test="item.SHARESADJUSTMENTFLAG != null" >
        ERC_SHARES_ADJUSTMENT_FLAG,
      </if>
      <if test="item.GENERALTASERIALNO != null" >
        ERC_GENERAL_TA_SERIAL_NO,
      </if>
      <if test="item.UNDIMONETARYINCOME != null" >
        ERC_UNDI_MONETARY_INCOME,
      </if>
      <if test="item.UNDIMONETARYINCOMEFLAG != null" >
        ERC_UNDI_MONETARY_INCOME_FLAG,
      </if>
      <if test="item.BREACHFEE != null" >
        ERC_BREACH_FEE,
      </if>
      <if test="item.BREACHFEEBACKTOFUND != null" >
        ERC_BREACH_FEE_BACK_TO_FUND,
      </if>
      <if test="item.PUNISHFEE != null" >
        ERC_PUNISH_FEE,
      </if>
      <if test="item.TRADINGMETHOD != null" >
        ERC_TRADING_METHOD,
      </if>
      <if test="item.CHANGEAGENCYFEE != null" >
        ERC_CHANGE_AGENCY_FEE,
      </if>
      <if test="item.RECUPERATEAGENCYFEE != null" >
        ERC_RECUPERATE_AGENCY_FEE,
      </if>
      <if test="item.ERRORDEC != null" >
        ERC_ERROR_DETAIL,
      </if>
      <if test="item.LARGEBUYFLAG != null" >
        ERC_LARGE_BUY_FLAG,
      </if>
      <if test="item.RAISEINTEREST != null" >
        ERC_RAISE_INTEREST,
      </if>
      <if test="item.FEECALCULATOR != null" >
        ERC_FEE_CALCULATOR,
      </if>
      <if test="item.SHAREREGISTERDATE != null" >
        ERC_SHARE_REGISTER_DATE,
      </if>
      <if test="item.TOTALFROZENVOL != null" >
        ERC_TOTAL_FROZEN_VOL,
      </if>
      <if test="item.FUNDVOLBALANCE != null" >
        ERC_FUND_VOL_BALANCE,
      </if>
      <if test="item.FROZENBALANCE != null" >
        ERC_FROZEN_BALANCE,
      </if>
      <if test="item.FUTURESUBSCRIBEDATE != null" >
        ERC_FUTURE_SUBSCRIBE_DATE,
      </if>
      <if test="item.TRANSDATETHROUGHCLEAR != null" >
        ERC_TRANS_DATE_THROUGH_CLEAR,
      </if>
      <if test="item.TAERRORDETAIL != null" >
        ERC_TA_ERROR_DETAIL,
      </if>
      <if test="item.CFMDATE != null" >
        ERC_CFM_DATE,
      </if>
      <if test="item.SENDSTATUS != null" >
        ERC_SEND_STATUS,
      </if>
      <if test="item.GENERATESTATUS != null" >
        ERC_GENERATE_STATUS,
      </if>
      <if test="item.SENDFILETIME != null" >
        ERC_SEND_FILE_TIME,
      </if>
      <if test="item.GENERATEFILETIME != null" >
        ERC_GENERATE_FILE_TIME,
      </if>
      <if test="item.TARETSERIALNO != null" >
        ERC_TA_RET_SERIAL_NO,
      </if>
        ERC_CTIME,
      <if test="item.UTIME != null" >
        ERC_UTIME,
      </if>
        ERC_CUSER,
      <if test="item.UUSER != null" >
        ERC_UUSER,
      </if>
      <if test="item.TRANSDATE != null" >
        ERC_TRANS_DATE,
      </if>
      <if test="item.DISCOUNTRATEOFCOMMISSION != null ">
      		ERc_DISCOUNT_RATE_OF_COMM,
      </if>
    </trim>
     <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="item.ID != null" >
        #{item.ID,jdbcType=DECIMAL},
      </if>
      <if test="item.CHANNELCODE != null" >
        #{item.CHANNELCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.APPSHEETSERIALNO != null" >
        #{item.APPSHEETSERIALNO,jdbcType=VARCHAR},
      </if>
      <if test="item.TRANSDATE != null" >
        #{item.TRANSDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.CURRENCYTYPE != null" >
        #{item.CURRENCYTYPE,jdbcType=VARCHAR},
      </if>
      <if test="item.CONFIRMEDVOL != null" >
        #{item.CONFIRMEDVOL,jdbcType=DECIMAL},
      </if>
      <if test="item.CONFIRMEDAMOUNT != null" >
        #{item.CONFIRMEDAMOUNT,jdbcType=DECIMAL},
      </if>
      <if test="item.FUNDCODE != null" >
        #{item.FUNDCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.LARGEREDEMPTIONFLAG != null" >
        #{item.LARGEREDEMPTIONFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.TRANSACTIONDATE != null" >
        #{item.TRANSACTIONDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.TRANSACTIONTIME != null" >
        #{item.TRANSACTIONTIME,jdbcType=VARCHAR},
      </if>
      <if test="item.RETURNCODE != null" >
        #{item.RETURNCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.TRANSACTIONACCOUNTID != null" >
        #{item.TRANSACTIONACCOUNTID,jdbcType=VARCHAR},
      </if>
      <if test="item.DISTRIBUTORCODE != null" >
        #{item.DISTRIBUTORCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.APPLICATIONVOL != null" >
        #{item.APPLICATIONVOL,jdbcType=DECIMAL},
      </if>
      <if test="item.APPLICATIONAMOUNT != null" >
        #{item.APPLICATIONAMOUNT,jdbcType=DECIMAL},
      </if>
      <if test="item.BUSINESSCODE != null" >
        #{item.BUSINESSCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.TAACCOUNTID != null" >
        #{item.TAACCOUNTID,jdbcType=VARCHAR},
      </if>
      <if test="item.TASERIALNO != null" >
        #{item.TASERIALNO,jdbcType=VARCHAR},
      </if>
      <if test="item.DISCOUNTRATEOFCOMM != null" >
        #{item.DISCOUNTRATEOFCOMM,jdbcType=DECIMAL},
      </if>
      <if test="item.DEPOSITACCT != null" >
        #{item.DEPOSITACCT,jdbcType=VARCHAR},
      </if>
      <if test="item.REGIONCODE != null" >
        #{item.REGIONCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.DOWNLOADDATE != null" >
        #{item.DOWNLOADDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.CHARGE != null" >
        #{item.CHARGE,jdbcType=DECIMAL},
      </if>
      <if test="item.AGENCYFEE != null" >
        #{item.AGENCYFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.NAV != null" >
        #{item.NAV,jdbcType=DECIMAL},
      </if>
      <if test="item.BRANCHCODE != null" >
        #{item.BRANCHCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.ORIGINALAPPSHEETNO != null" >
        #{item.ORIGINALAPPSHEETNO,jdbcType=VARCHAR},
      </if>
      <if test="item.ORIGINALSUBSDATE != null" >
        #{item.ORIGINALSUBSDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.OTHERFEE1 != null" >
        #{item.OTHERFEE1,jdbcType=DECIMAL},
      </if>
      <if test="item.INDIVIDUALORINSTITUTION != null" >
        #{item.INDIVIDUALORINSTITUTION,jdbcType=VARCHAR},
      </if>
      <if test="item.REDEMPTIONDATEINADVANCE != null" >
        #{item.REDEMPTIONDATEINADVANCE,jdbcType=VARCHAR},
      </if>
      <if test="item.STAMPDUTY != null" >
        #{item.STAMPDUTY,jdbcType=DECIMAL},
      </if>
      <if test="item.VALIDPERIOD != null" >
        #{item.VALIDPERIOD,jdbcType=DECIMAL},
      </if>
      <if test="item.RATEFEE != null" >
        #{item.RATEFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.TOTALBACKENDLOAD != null" >
        #{item.TOTALBACKENDLOAD,jdbcType=DECIMAL},
      </if>
      <if test="item.ORIGINALSERIALNO != null" >
        #{item.ORIGINALSERIALNO,jdbcType=VARCHAR},
      </if>
      <if test="item.SPECIFICATION != null" >
        #{item.SPECIFICATION,jdbcType=VARCHAR},
      </if>
      <if test="item.DATEOFPERIODICSUBS != null" >
        #{item.DATEOFPERIODICSUBS,jdbcType=VARCHAR},
      </if>
      <if test="item.TARGETDISTRIBUTORCODE != null" >
        #{item.TARGETDISTRIBUTORCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.TARGETBRANCHCODE != null" >
        #{item.TARGETBRANCHCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.TARGETTRANSACTACCTCODE != null" >
        #{item.TARGETTRANSACTACCTCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.TARGETREGIONCODE != null" >
        #{item.TARGETREGIONCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.TRANSFERDIRECTION != null" >
        #{item.TRANSFERDIRECTION,jdbcType=VARCHAR},
      </if>
      <if test="item.DEFDIVIDENDMETHOD != null" >
        #{item.DEFDIVIDENDMETHOD,jdbcType=VARCHAR},
      </if>
      <if test="item.DIVIDENDRATIO != null" >
        #{item.DIVIDENDRATIO,jdbcType=DECIMAL},
      </if>
      <if test="item.INTEREST != null" >
        #{item.INTEREST,jdbcType=DECIMAL},
      </if>
      <if test="item.VOLUMEBYINTEREST != null" >
        #{item.VOLUMEBYINTEREST,jdbcType=DECIMAL},
      </if>
      <if test="item.INTERESTTAX != null" >
        #{item.INTERESTTAX,jdbcType=DECIMAL},
      </if>
      <if test="item.TRADINGPRICE != null" >
        #{item.TRADINGPRICE,jdbcType=DECIMAL},
      </if>
      <if test="item.FREEZINGDEADLINE != null" >
        #{item.FREEZINGDEADLINE,jdbcType=VARCHAR},
      </if>
      <if test="item.FROZENCAUSE != null" >
        #{item.FROZENCAUSE,jdbcType=VARCHAR},
      </if>
      <if test="item.TAX != null" >
        #{item.TAX,jdbcType=DECIMAL},
      </if>
      <if test="item.TARGETNAV != null" >
        #{item.TARGETNAV,jdbcType=DECIMAL},
      </if>
      <if test="item.TARGETFUNDPRICE != null" >
        #{item.TARGETFUNDPRICE,jdbcType=DECIMAL},
      </if>
      <if test="item.CFMVOLOFTARGETFUND != null" >
        #{item.CFMVOLOFTARGETFUND,jdbcType=DECIMAL},
      </if>
      <if test="item.MINFEE != null" >
        #{item.MINFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.OTHERFEE2 != null" >
        #{item.OTHERFEE2,jdbcType=DECIMAL},
      </if>
      <if test="item.ORIGINALAPPDATE != null" >
        #{item.ORIGINALAPPDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.TRANSFERFEE != null" >
        #{item.TRANSFERFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.FROMTAFLAG != null" >
        #{item.FROMTAFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.SHARECLASS != null" >
        #{item.SHARECLASS,jdbcType=VARCHAR},
      </if>
      <if test="item.DETAILFLAG != null" >
        #{item.DETAILFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.REDEMPTIONINADVANCEFLAG != null" >
        #{item.REDEMPTIONINADVANCEFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.FROZENMETHOD != null" >
        #{item.FROZENMETHOD,jdbcType=VARCHAR},
      </if>
      <if test="item.ORIGINALCFMDATE != null" >
        #{item.ORIGINALCFMDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.REDEMPTIONREASON != null" >
        #{item.REDEMPTIONREASON,jdbcType=VARCHAR},
      </if>
      <if test="item.CODEOFTARGETFUND != null" >
        #{item.CODEOFTARGETFUND,jdbcType=VARCHAR},
      </if>
      <if test="item.TOTALTRANSFEE != null" >
        #{item.TOTALTRANSFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.VARIETYCODEPERIODICSUB != null" >
        #{item.VARIETYCODEPERIODICSUB,jdbcType=VARCHAR},
      </if>
      <if test="item.SERIALNOOFPERIODICSUBS != null" >
        #{item.SERIALNOOFPERIODICSUBS,jdbcType=VARCHAR},
      </if>
      <if test="item.RATIONTYPE != null" >
        #{item.RATIONTYPE,jdbcType=VARCHAR},
      </if>
      <if test="item.TARGETTAACCOUNTID != null" >
        #{item.TARGETTAACCOUNTID,jdbcType=VARCHAR},
      </if>
      <if test="item.TARGETREGISTRARCODE != null" >
        #{item.TARGETREGISTRARCODE,jdbcType=VARCHAR},
      </if>
      <if test="item.NETNO != null" >
        #{item.NETNO,jdbcType=VARCHAR},
      </if>
      <if test="item.CUSTOMERNO != null" >
        #{item.CUSTOMERNO,jdbcType=VARCHAR},
      </if>
      <if test="item.TARGETSHARETYPE != null" >
        #{item.TARGETSHARETYPE,jdbcType=VARCHAR},
      </if>
      <if test="item.RATIONPROTOCOLNO != null" >
        #{item.RATIONPROTOCOLNO,jdbcType=VARCHAR},
      </if>
      <if test="item.BEGINDATEPERIODICSUBS != null" >
        #{item.BEGINDATEPERIODICSUBS,jdbcType=VARCHAR},
      </if>
      <if test="item.ENDDATEOFPERIODICSUBS != null" >
        #{item.ENDDATEOFPERIODICSUBS,jdbcType=VARCHAR},
      </if>
      <if test="item.SENDDAYOFPERIODICSUBS != null" >
        #{item.SENDDAYOFPERIODICSUBS,jdbcType=DECIMAL},
      </if>
      <if test="item.BROKER != null" >
        #{item.BROKER,jdbcType=VARCHAR},
      </if>
      <if test="item.SALESPROMOTION != null" >
        #{item.SALESPROMOTION,jdbcType=VARCHAR},
      </if>
      <if test="item.ACCEPTMETHOD != null" >
        #{item.ACCEPTMETHOD,jdbcType=VARCHAR},
      </if>
      <if test="item.FORCEREDEMPTIONTYPE != null" >
        #{item.FORCEREDEMPTIONTYPE,jdbcType=VARCHAR},
      </if>
      <if test="item.ALTERNATIONDATE != null" >
        #{item.ALTERNATIONDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.TAKEINCOMEFLAG != null" >
        #{item.TAKEINCOMEFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.PURPOSEOFPESUBS != null" >
        #{item.PURPOSEOFPESUBS,jdbcType=VARCHAR},
      </if>
      <if test="item.FREQUENCYOFPESUBS != null" >
        #{item.FREQUENCYOFPESUBS,jdbcType=DECIMAL},
      </if>
      <if test="item.PERIODSUBTIMEUNIT != null" >
        #{item.PERIODSUBTIMEUNIT,jdbcType=VARCHAR},
      </if>
      <if test="item.BATCHNUMOFPESUBS != null" >
        #{item.BATCHNUMOFPESUBS,jdbcType=DECIMAL},
      </if>
      <if test="item.CAPITALMODE != null" >
        #{item.CAPITALMODE,jdbcType=VARCHAR},
      </if>
      <if test="item.DETAILCAPTICALMODE != null" >
        #{item.DETAILCAPTICALMODE,jdbcType=VARCHAR},
      </if>
      <if test="item.BACKENLOADDISCOUNT != null" >
        #{item.BACKENLOADDISCOUNT,jdbcType=DECIMAL},
      </if>
      <if test="item.COMBINENUM != null" >
        #{item.COMBINENUM,jdbcType=VARCHAR},
      </if>
      <if test="item.REFUNDAMOUNT != null" >
        #{item.REFUNDAMOUNT,jdbcType=DECIMAL},
      </if>
      <if test="item.SALEPERCENT != null" >
        #{item.SALEPERCENT,jdbcType=DECIMAL},
      </if>
      <if test="item.MANAGERREALRATIO != null" >
        #{item.MANAGERREALRATIO,jdbcType=DECIMAL},
      </if>
      <if test="item.CHANGEFEE != null" >
        #{item.CHANGEFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.RECUPERATEFEE != null" >
        #{item.RECUPERATEFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.ACHIEVEMENTPAY != null" >
        #{item.ACHIEVEMENTPAY,jdbcType=DECIMAL},
      </if>
      <if test="item.ACHIEVEMENTCOMPEN != null" >
        #{item.ACHIEVEMENTCOMPEN,jdbcType=DECIMAL},
      </if>
      <if test="item.SHARESADJUSTMENTFLAG != null" >
        #{item.SHARESADJUSTMENTFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.GENERALTASERIALNO != null" >
        #{item.GENERALTASERIALNO,jdbcType=VARCHAR},
      </if>
      <if test="item.UNDIMONETARYINCOME != null" >
        #{item.UNDIMONETARYINCOME,jdbcType=DECIMAL},
      </if>
      <if test="item.UNDIMONETARYINCOMEFLAG != null" >
        #{item.UNDIMONETARYINCOMEFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.BREACHFEE != null" >
        #{item.BREACHFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.BREACHFEEBACKTOFUND != null" >
        #{item.BREACHFEEBACKTOFUND,jdbcType=DECIMAL},
      </if>
      <if test="item.PUNISHFEE != null" >
        #{item.PUNISHFEE,jdbcType=VARCHAR},
      </if>
      <if test="item.TRADINGMETHOD != null" >
        #{item.TRADINGMETHOD,jdbcType=VARCHAR},
      </if>
      <if test="item.CHANGEAGENCYFEE != null" >
        #{item.CHANGEAGENCYFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.RECUPERATEAGENCYFEE != null" >
        #{item.RECUPERATEAGENCYFEE,jdbcType=DECIMAL},
      </if>
      <if test="item.ERRORDEC != null" >
        substr(#{item.ERRORDEC,jdbcType=VARCHAR},0,30),
      </if>
      <if test="item.LARGEBUYFLAG != null" >
        #{item.LARGEBUYFLAG,jdbcType=VARCHAR},
      </if>
      <if test="item.RAISEINTEREST != null" >
        #{item.RAISEINTEREST,jdbcType=DECIMAL},
      </if>
      <if test="item.FEECALCULATOR != null" >
        #{item.FEECALCULATOR,jdbcType=VARCHAR},
      </if>
      <if test="item.SHAREREGISTERDATE != null" >
        #{item.SHAREREGISTERDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.TOTALFROZENVOL != null" >
        #{item.TOTALFROZENVOL,jdbcType=DECIMAL},
      </if>
      <if test="item.FUNDVOLBALANCE != null" >
        #{item.FUNDVOLBALANCE,jdbcType=DECIMAL},
      </if>
      <if test="item.FROZENBALANCE != null" >
        #{item.FROZENBALANCE,jdbcType=DECIMAL},
      </if>
      <if test="item.FUTURESUBSCRIBEDATE != null" >
        #{item.FUTURESUBSCRIBEDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.TRANSDATETHROUGHCLEAR != null" >
        #{item.TRANSDATETHROUGHCLEAR,jdbcType=VARCHAR},
      </if>
      <if test="item.TAERRORDETAIL != null" >
        #{item.TAERRORDETAIL,jdbcType=VARCHAR},
      </if>
      <if test="item.CFMDATE != null" >
        #{item.CFMDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.SENDSTATUS != null" >
        #{item.SENDSTATUS,jdbcType=VARCHAR},
      </if>
      <if test="item.GENERATESTATUS != null" >
        #{item.GENERATESTATUS,jdbcType=VARCHAR},
      </if>
      <if test="item.SENDFILETIME != null" >
        #{item.SENDFILETIME,jdbcType=TIMESTAMP},
      </if>
      <if test="item.GENERATEFILETIME != null" >
        #{item.GENERATEFILETIME,jdbcType=TIMESTAMP},
      </if>
      <if test="item.TARETSERIALNO != null" >
        #{item.TARETSERIALNO,jdbcType=VARCHAR},
      </if>
        sysdate,
      <if test="item.UTIME != null" >
        #{item.UTIME,jdbcType=TIMESTAMP},
      </if>
        'sams',
      <if test="item.UUSER != null" >
        #{item.UUSER,jdbcType=VARCHAR},
      </if>
       <if test="item.TRANSDATE != null" >
         #{item.TRANSDATE,jdbcType=VARCHAR},
      </if>
      <if test="item.DISCOUNTRATEOFCOMMISSION != null ">
      		 #{item.DISCOUNTRATEOFCOMMISSION,jdbcType=VARCHAR},
      </if>
    </trim>
    	</foreach>
	SELECT 1  FROM DUAL
	</insert>
  
   <resultMap id="tempResultMap" type="hashMap" >
	    <id column="ERT_ID" property="Id" jdbcType="DECIMAL" />
	    <result column="ERT_CHANNEL_CODE" property="ChannelCode" jdbcType="VARCHAR" />
	    <result column="ERT_TRANS_DATE" property="TransDate" jdbcType="VARCHAR" />
	    <result column="ERT_APP_SHEET_SERIAL_NO" property="AppSheetSerialNo" jdbcType="VARCHAR" />
	    <result column="ERT_FUND_CODE" property="FundCode" jdbcType="VARCHAR" />
	    <result column="ERT_LARGE_REDEMPTION_FLAG" property="LargeRedemptionFlag" jdbcType="VARCHAR" />
	    <result column="ERT_TRANSACTION_DATE" property="TransactionDate" jdbcType="VARCHAR" />
	    <result column="ERT_TRANSACTION_TIME" property="TransactionTime" jdbcType="VARCHAR" />
	    <result column="ERT_TRANSACTION_ACCOUNT_ID" property="TransactionAccountId" jdbcType="VARCHAR" />
	    <result column="ERT_DISTRIBUTOR_CODE" property="DistributorCode" jdbcType="VARCHAR" />
	    <result column="ERT_APPLICATION_VOL" property="ApplicationVol" jdbcType="DECIMAL" />
	    <result column="ERT_APPLICATION_AMOUNT" property="ApplicationAmount" jdbcType="DECIMAL" />
	    <result column="ERT_BUSINESS_CODE" property="BusinessCode" jdbcType="VARCHAR" />
	    <result column="ERT_TA_ACCOUNT_ID" property="TaAccountId" jdbcType="VARCHAR" />
	    <result column="ERT_DISCOUNT_RATE_OF_COMM" property="DiscountRateOfComm" jdbcType="DECIMAL" />
	    <result column="ERT_DEPOSIT_ACCT" property="DepositAcct" jdbcType="VARCHAR" />
	    <result column="ERT_REGION_CODE" property="RegionCode" jdbcType="VARCHAR" />
	    <result column="ERT_CURRENCY_TYPE" property="CurrencyType" jdbcType="VARCHAR" />
	    <result column="ERT_BRANCH_CODE" property="BranchCode" jdbcType="VARCHAR" />
	    <result column="ERT_ORIGINAL_APP_SHEET_NO" property="OriginalAppSheetNo" jdbcType="VARCHAR" />
	    <result column="ERT_ORIGINAL_SUBS_DATE" property="OriginalSubsDate" jdbcType="VARCHAR" />
	    <result column="ERT_INDIVIDUAL_OR_INSTITUTION" property="IndividualOrInstitution" jdbcType="VARCHAR" />
	    <result column="ERT_VALID_PERIOD" property="ValidPeriod" jdbcType="DECIMAL" />
	    <result column="ERT_DAYS_REDEMPTION_IN_ADVANCE" property="DaysRedemptionInAdvance" jdbcType="DECIMAL" />
	    <result column="ERT_REDEMPTION_DATE_IN_ADVANCE" property="RedemptionDateInAdvance" jdbcType="VARCHAR" />
	    <result column="ERT_ORIGINAL_SERIAL_NO" property="OriginalSerialNo" jdbcType="VARCHAR" />
	    <result column="ERT_DATE_OF_PERIODIC_SUBS" property="DateOfPeriodicSubs" jdbcType="VARCHAR" />
	    <result column="ERT_TA_SERIAL_NO" property="TaSerialNo" jdbcType="VARCHAR" />
	    <result column="ERT_TERM_OF_PERIODIC_SUBS" property="TermOfPeriodicSubs" jdbcType="DECIMAL" />
	    <result column="ERT_FUTURE_BUY_DATE" property="FutureBuyDate" jdbcType="VARCHAR" />
	    <result column="ERT_TARGET_DISTRIBUTOR_CODE" property="TargetDistributorCode" jdbcType="VARCHAR" />
	    <result column="ERT_CHARGE" property="Charge" jdbcType="DECIMAL" />
	    <result column="ERT_TARGET_BRANCH_CODE" property="TargetBranchCode" jdbcType="VARCHAR" />
	    <result column="ERT_TARGET_TRANSACT_ACCT_CODE" property="TargetTransactAcctCode" jdbcType="VARCHAR" />
	    <result column="ERT_TARGET_REGION_CODE" property="TargetRegionCode" jdbcType="VARCHAR" />
	    <result column="ERT_DIVIDEND_RATIO" property="DividendRatio" jdbcType="DECIMAL" />
	    <result column="ERT_SPECIFICATION" property="Specification" jdbcType="VARCHAR" />
	    <result column="ERT_CODE_OF_TARGET_FUND" property="CodeOfTargetFund" jdbcType="VARCHAR" />
	    <result column="ERT_TOTAL_BACKEND_LOAD" property="TotalBackendLoad" jdbcType="DECIMAL" />
	    <result column="ERT_SHARE_CLASS" property="ShareClass" jdbcType="VARCHAR" />
	    <result column="ERT_ORIGINAL_CFM_DATE" property="OriginalCfmDate" jdbcType="VARCHAR" />
	    <result column="ERT_DETAIL_FLAG" property="DetailFlag" jdbcType="VARCHAR" />
	    <result column="ERT_ORIGINAL_APP_DATE" property="OriginalAppDate" jdbcType="VARCHAR" />
	    <result column="ERT_DEF_DIVIDEND_METHOD" property="DefDividendMethod" jdbcType="VARCHAR" />
	    <result column="ERT_FROZEN_CAUSE" property="FrozenCause" jdbcType="VARCHAR" />
	    <result column="ERT_FREEZING_DEADLINE" property="FreezingDeadline" jdbcType="VARCHAR" />
	    <result column="ERT_VARIETY_CODE_PERIODIC_SUB" property="VarietyCodePeriodicSub" jdbcType="VARCHAR" />
	    <result column="ERT_SERIAL_NO_PERIODIC_SUB" property="SerialNoPeriodicSub" jdbcType="VARCHAR" />
	    <result column="ERT_RATION_TYPE" property="RationType" jdbcType="VARCHAR" />
	    <result column="ERT_TARGET_TA_ACCOUNT_ID" property="TargetTaAccountId" jdbcType="VARCHAR" />
	    <result column="ERT_TARGET_REGISTRAR_CODE" property="TargetRegistrarCode" jdbcType="VARCHAR" />
	    <result column="ERT_NET_NO" property="NetNo" jdbcType="VARCHAR" />
	    <result column="ERT_CUSTOMER_NO" property="CustomerNo" jdbcType="VARCHAR" />
	    <result column="ERT_TARGET_SHARE_TYPE" property="TargetShareType" jdbcType="VARCHAR" />
	    <result column="ERT_RATION_PROTOCOL_NO" property="RationProtocolNo" jdbcType="VARCHAR" />
	    <result column="ERT_BEGIN_DATE_PERIODIC_SUBS" property="BeginDatePeriodicSubs" jdbcType="VARCHAR" />
	    <result column="ERT_END_DATE_OF_PERIODIC_SUBS" property="EndDateOfPeriodicSubs" jdbcType="VARCHAR" />
	    <result column="ERT_SEND_DAY_OF_PERIODIC_SUBS" property="SendDayOfPeriodicSubs" jdbcType="DECIMAL" />
	    <result column="ERT_BROKER" property="Broker" jdbcType="VARCHAR" />
	    <result column="ERT_SALES_PROMOTION" property="SalesPromotion" jdbcType="VARCHAR" />
	    <result column="ERT_ACCEPT_METHOD" property="AcceptMethod" jdbcType="VARCHAR" />
	    <result column="ERT_FORCE_REDEMPTION_TYPE" property="ForceRedemptionType" jdbcType="VARCHAR" />
	    <result column="ERT_TAKE_INCOME_FLAG" property="TakeIncomeFlag" jdbcType="VARCHAR" />
	    <result column="ERT_PURPOSE_OF_PE_SUBS" property="PurposeOfPeSubs" jdbcType="VARCHAR" />
	    <result column="ERT_FREQUENCY_OF_PE_SUBS" property="FrequencyOfPeSubs" jdbcType="DECIMAL" />
	    <result column="ERT_PERIOD_SUB_TIME_UNIT" property="PeriodSubTimeUnit" jdbcType="VARCHAR" />
	    <result column="ERT_BATCH_NUM_OF_PESUBS" property="BatchNumOfPesubs" jdbcType="DECIMAL" />
	    <result column="ERT_CAPITAL_MODE" property="CapitalMode" jdbcType="VARCHAR" />
	    <result column="ERT_DETAIL_CAPTICAL_MODE" property="DetailCapticalMode" jdbcType="VARCHAR" />
	    <result column="ERT_BACKENLOAD_DISCOUNT" property="BackenloadDiscount" jdbcType="DECIMAL" />
	    <result column="ERT_COMBINE_NUM" property="CombineNum" jdbcType="VARCHAR" />
	    <result column="ERT_FUTURE_SUBSCRIBE_DATE" property="FutureSubscribeDate" jdbcType="VARCHAR" />
	    <result column="ERT_TRADING_METHOD" property="TradingMethod" jdbcType="VARCHAR" />
	    <result column="ERT_LARGE_BUY_FLAG" property="LargeBuyFlag" jdbcType="VARCHAR" />
	    <result column="ERT_CHARGE_TYPE" property="ChargeType" jdbcType="VARCHAR" />
	    <result column="ERT_SPECIFY_RATE_FEE" property="SpecifyRateFee" jdbcType="DECIMAL" />
	    <result column="ERT_SPECIFY_FEE" property="SpecifyFee" jdbcType="DECIMAL" />
	    <result column="ERT_CTIME" property="Ctime" jdbcType="TIMESTAMP" />
	    <result column="ERT_UTIME" property="Utime" jdbcType="TIMESTAMP" />
	    <result column="ERT_CUSER" property="Cuser" jdbcType="VARCHAR" />
	    <result column="ERT_UUSER" property="Uuser" jdbcType="VARCHAR" />
  </resultMap>
  
  <select id="selectTransTmpInfo" resultMap = "tempResultMap" parameterType="String" >
  		select 
  		<include refid="Base_Column_List_Tmp"/>
  		from D_EXCHANGE_REQ_TMP  where 
  		 ERT_TRANS_DATE = #{TRANSDATE,jdbcType = VARCHAR}
  		 and ERT_CHANNEL_CODE =#{CHANNELCODE,jdbcType = VARCHAR}
  </select>
  
     <select id="findTnDataGrid" resultMap = "BaseResultMapReq" parameterType="hashMap" >
  		select 
  		<include refid="BaseListReq"/>
  		 from D_EXCHANGE_REQ d ,P_PRODUCT_INFO p 
  		 where d.ER_FUND_CODE = p.PI_CHANNEL_PRODUCT_CODE and p.PI_CHANNEL_CODE = d.er_channel_code
  		 and d.ER_VALID_FLAG !='00' 
  		 and p.PI_PRODUCT_TYPE='6'
  		 and p.PI_VALID_FLAG NOT IN ('99','00')
  		 and p.PI_CHECK_STATE='01'
  		 <!--没有发TA的 和发TA失败的  -->
  		 and er_ta_trans_status is null
  		<if test="condition.erTransactionDate != null and condition.erTransactionDate != ''  ">
                and d.ER_TRANS_DATE = #{condition.erTransactionDate}
        </if>
        
        <if test="condition.erFundCode != null and condition.erFundCode != ''  ">
                and d.ER_FUND_CODE = #{condition.erFundCode}
        </if>
        
         <if test="condition.channelCode != null and condition.channelCode != ''  ">
                and d.ER_CHANNEL_CODE = #{condition.channelCode}
        </if>
        
        <if test="condition.erFundCode != null and condition.erFundCode != ''  ">
                and d.ER_FUND_CODE = #{condition.erFundCode}
        </if>
        
        <if test="pageInfo.sort != null and pageInfo.sort != ''">
            order by ${pageInfo.sort} ${pageInfo.order}
        </if>
    </select>
  
  <select id="selectTransReqInfo" resultMap = "tempResultMap" parameterType="hashMap" >
  		select 
  		<include refid="Base_Column_List_Req"/>
  		<![CDATA[
  		 from D_EXCHANGE_REQ  where ER_TRANS_DATE = #{TRANSDATE,jdbcType = VARCHAR}
  		 and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType = VARCHAR} and er_valid_flag<>'00'
  		 and ER_BUSINESS_CODE=#{BUSINESSCODE,jdbcType = VARCHAR}
  		 ORDER BY TO_DATE(ER_TRANSACTION_DATE || ER_TRANSACTION_TIME,'YYYYMMDDHH24MISS') ASC
  		 ]]>
  </select>
  
  <select id="selectTransReqSendTaData" resultMap = "tempResultMap" parameterType="hashMap" >
  		select 
  		<include refid="Base_Column_List_Req"/>
  		 from D_EXCHANGE_REQ  
  		 where 
	        er_valid_flag='01'
	        and (ER_TA_TRANS_STATUS is null or ER_TA_TRANS_STATUS = '454')
	       and ER_RETURN_CODE = '0000'
  		   and ER_TRANS_DATE = #{TRANSDATE,jdbcType = VARCHAR}
  		   and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType = VARCHAR} 
  		   <!--20191210新增  -->
  		   <if test="FUNDTYPES != null">
  		   and (select t.pi_product_type from p_product_info t where t.pi_channel_code = er_channel_code and t.pi_channel_product_code = er_fund_code and t.pi_valid_flag not in ('00','99')) 
  		   in 
  		   <foreach collection="FUNDTYPES" item="id" open="(" separator="," close=")">
  		   		#{id}
  		   </foreach>
  		   </if>
  		   order by ER_APPLICATION_AMOUNT desc
  </select>
  
  <update id="batchUpdateNotExchangeReqData" parameterType="hashMap">
   		update d_exchange_req d set d.er_valid_flag='00' ,d.er_error_dec='产品代码不存在' ,d.ER_RETURN_CODE='9999',d.ER_EXPECTED_CFM_DATE=''
  where d.er_app_sheet_serial_no in (select e.er_app_sheet_serial_no
    from d_exchange_req e
   where e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
		and e.er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
		   and e.er_fund_code not in
		       (select c.cp_channel_product_code
		          from p_channel_product c, p_product_info p
		         where c.cp_check_state = '01'
		           and p.pi_channel_code=c.cp_channel_code
		           and p.pi_check_state = '01'
		           and p.pi_valid_flag not in('00','99')
		           and c.cp_channel_product_code = p.pi_channel_product_code
		           and c.cp_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}))
		           and d.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
   </update>
   
   
  <update id="batchUpdateAppSheetSerialNoRepeat" parameterType="hashMap">
 update d_exchange_req d
    set d.er_valid_flag  = '00',
        d.er_error_dec   = '交易申请单编号重复',
        d.ER_RETURN_CODE = '9999' ,
        d.ER_EXPECTED_CFM_DATE=#{TRANSDATE,jdbcType = VARCHAR}
  where d.er_app_sheet_serial_no in
        (select distinct a.er_app_sheet_serial_no
           from d_exchange_req a
          where (a.er_channel_code, a.er_app_sheet_serial_no, a.er_trans_date) in
                (select er_channel_code,
                        er_app_sheet_serial_no,
                        er_trans_date
                   from d_exchange_req
                   where er_channel_code=#{CHANNELCODE,jdbcType = VARCHAR}
                  group by er_channel_code,
                           er_app_sheet_serial_no,
                           er_trans_date
                 having count(*) > 1))
   </update>
   
   <update id="updatePrementDataStat">
		   update d_exchange_req q set q.er_prement_data_stat='1'
		where q.er_app_sheet_serial_no in (
		select c.erc_app_sheet_serial_no from d_exchange_req_cfm c where c.erc_channel_code=q.er_channel_code
		and c.erc_app_sheet_serial_no=q.er_app_sheet_serial_no
		and c.erc_fund_code=q.er_fund_code
		)
  </update>
  
  <update id="updateTransData"  parameterType="hashMap">
		   update d_exchange_req q
		   set q.er_return_code     = '0000',
		       q.er_valid_flag      = '01',
		       <!-- q.er_ta_trans_status = '', -->
		       q.er_ta_error_detail = '',
		       q.er_error_dec = '',
		       q.er_uuser = #{USER,jdbcType = VARCHAR},
		       q.er_utime = #{SYSDATE,jdbcType = DATE}
		   where q.er_id =#{ID,jdbcType = VARCHAR}
  </update>
  
  
  
   <select id="selectFirstTradeCount" resultType="Integer" parameterType="hashMap">
<!-- 作废SQL 改成从 合同表查询   2019-07-11 09:20      
      select count(*)
           from D_EXCHANGE_REQ c
          where c.er_transaction_account_id = #{TRANSACTIONACCOUNTID,jdbcType = VARCHAR}
          and c.er_valid_flag='01'
                and c.er_ta_trans_status='0000'
            and c.er_fund_code = (select t.cp_channel_product_code from p_channel_product t where t.cp_channel_code=#{CHANNELCODE,jdbcType = VARCHAR} and t.cp_ta_product_code= #{FUNDCODE,jdbcType = VARCHAR})
            and c.er_channel_code=#{CHANNELCODE,jdbcType = VARCHAR} -->
            
       select count(*) from d_contract_info c
             where c.dci_trans_action_account= #{TRANSACTIONACCOUNTID,jdbcType = VARCHAR}
             and c.dci_valid_flag='01'
             and c.dci_fund_code= #{FUNDCODE,jdbcType = VARCHAR}
             and c.dci_channel_code=#{CHANNELCODE,jdbcType = VARCHAR}
  </select>
  
  
  <select id="getTNSmallContractsBeTraded" resultType="hashMap" parameterType="hashMap">
		select nvl(count(t.er_fund_code), 0) NM,t.er_fund_code FUNDCODE from d_exchange_req t
		where t.er_channel_code=#{CHANNELCODE,jdbcType = VARCHAR}
		and t.er_trans_date=#{TRANSDATE,jdbcType = VARCHAR}
		<!-- and t.er_application_amount &lt;(select nvl(dict_code,0) from sys_dict where dict_type='TNPersonSubscribeMoney') -->
		<!-- and t.er_individual_or_institution='1' -->
		and t.er_business_code in('020')
		and t.er_return_code = '0000'
		and t.er_fund_code in (select p.pi_channel_product_code from p_product_info p where p.pi_product_type in ('6') 
		and p.pi_valid_flag not in('00','99')
		and p.pi_check_state='01') 
		and t.er_valid_flag='01'
		<!-- and t.er_ta_product_code is null -->
		group by t.er_fund_code
  </select>
  
  <update id="batchUpdateExchangeReqData" parameterType="java.util.List">
        <foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
            update d_exchange_req 
            <set>
                <if test="item.VALIDFLAG != null">
                    ER_VALID_FLAG = #{item.VALIDFLAG,jdbcType=VARCHAR},
                </if>

                 <if test="item.RETURNCODE != null">
                    ER_RETURN_CODE = #{item.RETURNCODE,jdbcType=VARCHAR},
                </if>

                <if test="item.ERRORDEC != null">
                    ER_ERROR_DEC = #{item.ERRORDEC,jdbcType=VARCHAR},
                </if>
                
                <!-- <if test="item.TASERIALNO != null">
                    ER_ORIGINAL_SERIAL_NO = #{item.TASERIALNO,jdbcType=VARCHAR},
                </if> -->
                
                <if test="item.TASERIALNO != null">
                    ER_TA_SERIAL_NO = #{item.TASERIALNO,jdbcType=VARCHAR},
                </if>
                
                <if test="item.EXPECTEDCFMDATE != null">
                    ER_EXPECTED_CFM_DATE = #{item.EXPECTEDCFMDATE,jdbcType=VARCHAR},
                </if>
                
                <if test="item.TATRANSSTATUS != null">
                    ER_TA_TRANS_STATUS = #{item.TATRANSSTATUS,jdbcType=VARCHAR},
                </if>
                
                 <if test="item.SECTIONNUMBER != null">
                    ER_PRO_YIELD_TYPE = #{item.SECTIONNUMBER,jdbcType=VARCHAR},
                </if>
                
                 <if test="item.FUNDRATE != null">
                    ER_PRO_YIELD = #{item.FUNDRATE,jdbcType=VARCHAR},
                </if>
                
                 <if test="item.INCONTRACT != null">
                    ER_IN_CONTRACT = #{item.INCONTRACT,jdbcType=VARCHAR},
                </if>
                
                 <if test="item.OUTCONTRACT != null">
                    ER_OUT_CONTRACT = #{item.OUTCONTRACT,jdbcType=VARCHAR},
                </if>
                
                 <if test="item.TAPRODUCTCODE != null">
                    ER_TA_PRODUCT_CODE = #{item.TAPRODUCTCODE,jdbcType=VARCHAR},
                </if>
                
                <if test="item.BATCHNO != null">
                    ER_BATCH_NO = #{item.BATCHNO,jdbcType=VARCHAR},
                </if>
                <if test="item.TAACCOUNTID != null">
                    ER_TA_ACCOUNT_ID = #{item.TAACCOUNTID,jdbcType=VARCHAR},
                </if>
            </set>
            where ER_TRANS_DATE = #{item.BUSINESSDATE,jdbcType = VARCHAR}
  		 	and ER_CHANNEL_CODE =#{item.CHANNELCODE,jdbcType = VARCHAR}
  		 	and ER_APP_SHEET_SERIAL_NO =#{item.APPSHEETSERIALNO,jdbcType = VARCHAR}
  		 	and ER_FUND_CODE=#{item.FUNDCODE,jdbcType = VARCHAR}
        </foreach>
    </update>
    
    
      <update id="updateExchangeReqData" parameterType="hashMap">
            update d_exchange_req  <set>
               <if test="ID != null">
                    ER_ID = #{ID,jdbcType=VARCHAR},
                </if>
                <if test="ERRORDEC != null">
                    ER_ERROR_DEC = #{ERRORDEC,jdbcType=VARCHAR},
                </if>
                <if test="BATCHNUMBER != null">
                    ER_BATCH_NO = #{BATCHNUMBER,jdbcType=VARCHAR},
                </if>

                <if test="VALIDFLAG != null">
                    ER_VALID_FLAG = #{VALIDFLAG,jdbcType=VARCHAR},
                </if>
                
                <if test="TAERRORDETAIL != null">
                    ER_TA_ERROR_DETAIL = #{TAERRORDETAIL,jdbcType=VARCHAR},
                </if>
                
                <if test="RETURNCODE != null">
                	ER_RETURN_CODE= #{RETURNCODE,jdbcType=VARCHAR},
                </if>
                
                <if test="BATCHNO != null">
                	ER_BATCH_NO= #{BATCHNO,jdbcType=VARCHAR},
                </if>
                
                <if test="TATRANSSTATUS != null">
                    ER_TA_TRANS_STATUS = #{TATRANSSTATUS,jdbcType=VARCHAR},
                </if>
                
                <if test="TARETSERIALNO != null">
                    ER_TA_SERIAL_NO = #{TARETSERIALNO,jdbcType=VARCHAR},
                </if>
                 <if test="TAACCOUNTID != null">
                    ER_TA_ACCOUNT_ID = #{TAACCOUNTID,jdbcType=VARCHAR},
                </if>
                
                <if test="TAPRODUCTCODE != null">
                    ER_TA_PRODUCT_CODE = #{TAPRODUCTCODE,jdbcType=VARCHAR},
                </if>
                 <if test="INCONTRACT != null">
                    ER_IN_CONTRACT = #{INCONTRACT,jdbcType=VARCHAR},
                </if>
                <if test="OUTCONTRACT != null">
                    ER_OUT_CONTRACT = #{OUTCONTRACT,jdbcType=VARCHAR},
                </if>
                </set>
            where 1=1
            <if test="ERID != null">
            	and ER_ID = #{ERID,jdbcType = VARCHAR}
            </if>
            <if test="APPSHEETSERIALNO != null">
            	and ER_APP_SHEET_SERIAL_NO = #{APPSHEETSERIALNO,jdbcType = VARCHAR}
            </if>
             <if test="CHANNELCODE != null">
            	and ER_CHANNEL_CODE = #{CHANNELCODE,jdbcType = VARCHAR}
            </if>
            <if test="TRANSDATE != null">
            	and ER_TRANS_DATE = #{TRANSDATE,jdbcType = VARCHAR}
            </if>
            <if test="FUNDCODE != null">
            and ER_FUND_CODE=#{FUNDCODE,jdbcType = VARCHAR}
            </if>
    </update>
    
    <select id="selectPreMentTradeInfo022Count" resultType="integer" parameterType="hashMap">
		select count(*)
		          from d_exchange_req e,
		               (select distinct c.cp_ta_product_code fundcode 
		               ,P.pi_channel_product_code
		                  from p_product_info p, p_channel_product c
		                 where p.pi_channel_product_code = c.cp_channel_product_code
		                   and p.pi_channel_code = c.cp_channel_code
		                   and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
		                   and c.cp_valid_flag = '01'
		                   and c.cp_check_state = '01'
		                   and p.pi_valid_flag not in ('00', '99')
		                   and p.pi_check_state = '01'
		                   and p.pi_product_type = #{PRODUCTTYPE,jdbcType=VARCHAR}) T2
		         where e.er_ta_product_code = T2.fundcode 
		           and e.er_fund_code = T2.pi_channel_product_code
		           and e.ER_RETURN_CODE = '0000'
		           and e.er_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
		           and e.er_trans_date = #{LASTDATE,jdbcType=VARCHAR}
		           and e.er_business_code = '022'
		           and (er_prement_data_stat = '0' or er_prement_data_stat is null)
		           and e.ER_VALID_FLAG = '01'
  </select>
    
  
  <select id="selectPreMentTradeInfo022" resultType="hashMap" parameterType="hashMap">
 	
		select <include refid="Base_Column_List_Req"/> ,
			            to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
	               nvl(T.F_CONFIRMBALANCE, 0) CONFIRMEDAMOUNT,
	               nvl(T.F_CONFIRMSHARES, 0) CONFIRMEDVOL,
	               0 FROMTAFLAG,
	               t.f_totalfare Charge,
	               t.f_agencyfare AgencyFee,
	               nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
		           #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
		           #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
		      from d_exchange_req , (
					select c.F_CONFIRMSHARES, c.F_CONFIRMBALANCE, c.D_CDATE,dd.C_OUTREQUESTNO,
					nvl(c.f_agencyfare,0) f_agencyfare,
					nvl(c.f_totalfare,0) f_totalfare
					  from TA_TCONFIRM C,
					       (select R.*
					          from TA_TREQUEST R
					         where exists (select 1
					                  from (
					                  <!--create by yindy  替换函数  -->
					                     select e.er_ta_serial_no taserialno
										      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode
										      ,p.pi_channel_product_code 
										       <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6">
										      ,c.cp_batch_no batchno
										      </if>
											      from p_product_info p, p_channel_product c
											     where p.pi_channel_product_code = c.cp_channel_product_code
											       and p.pi_channel_code=c.cp_channel_code
									           and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
									           and c.cp_valid_flag = '01'
									           and c.cp_check_state = '01'
									           and p.pi_valid_flag not in('00','99')
									         and p.pi_check_state = '01'
									         and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
									           )T2
									     where e.er_ta_product_code=T2.fundcode and T2.pi_channel_product_code = e.er_fund_code 
									       <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6">
									           and e.er_batch_no=T2.batchno(+)
									        </if>
									         and e.ER_RETURN_CODE = '0000'
									       and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
									       and e.er_trans_date = #{LASTDATE, jdbcType = VARCHAR} 
									       and e.er_business_code =#{BUSINESSCODE, jdbcType = VARCHAR} 
									       and (er_prement_data_stat = '0' or er_prement_data_stat is null)
									       and e.ER_VALID_FLAG='01'             
					                        <!--替换结束  -->        
					                        ) temp
					                 where temp.taserialno = R.c_outrequestno)) dd
					 where c.c_requestno = dd.c_requestno
					   and C.c_businflag in ('50', '02')
					   <!-- and TO_CHAR(c.D_CDATE, 'YYYYMMDD') = #{TRANSDATE, jdbcType = VARCHAR} -->
		      	
		      ) T
			     where er_ta_serial_no = T.c_outrequestno
	           and er_return_code = '0000'
	            and (er_prement_data_stat = '0' or er_prement_data_stat is null)
	           and er_business_code ='022'
		       and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
		       and er_trans_date=#{LASTDATE,jdbcType=VARCHAR}
	       
  </select>
  
    <select id="selectPreMentTradeInfo024Count" resultType="integer" parameterType="hashMap">
		select count(*)
		          from d_exchange_req e,
		               (select distinct c.cp_ta_product_code fundcode
		               ,p.pi_channel_product_code 
		                  from p_product_info p, p_channel_product c
		                 where p.pi_channel_product_code = c.cp_channel_product_code
		                   and p.pi_channel_code = c.cp_channel_code
		                   and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
		                   and c.cp_valid_flag = '01'
		                   and c.cp_check_state = '01'
		                   and p.pi_valid_flag not in ('00', '99')
		                   and p.pi_check_state = '01'
		                   and p.pi_product_type = #{PRODUCTTYPE,jdbcType=VARCHAR}) T2
		         where e.er_ta_product_code = T2.fundcode 
		           and T2.pi_channel_product_code = e.er_fund_code
		           and e.ER_RETURN_CODE = '0000'
		           and e.er_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
		           and e.er_trans_date = #{LASTDATE,jdbcType=VARCHAR}
		           and e.er_business_code = '024'
		           and (er_prement_data_stat = '0' or er_prement_data_stat is null)
		           and e.ER_VALID_FLAG = '01'
  </select>
  
  
  <select id="selectPreMentTradeInfo024" resultType="hashMap" parameterType="hashMap">
 	select TT.* from (
		select <include refid="Base_Column_List_Req"/> ,
                  to_char(nvl(c.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
                 nvl(c.F_CONFIRMBALANCE, 0) CONFIRMEDAMOUNT,
                 nvl(c.F_CONFIRMSHARES, 0) CONFIRMEDVOL,
                 <!--总费用  -->
				 c.f_totalfare charge ,
				 <!-- 归属渠道的费用 -->
		 		 c.f_agencyfare agencyfee,
		 		 <!-- 归属基金资产的费用 -->
		 		 c.f_fundfare OtherFee1,
		 		 <!-- 业绩报酬 -->
				 c.f_tafare achievementPay,<!--业绩报酬 -->
                 0 FROMTAFLAG,
                 nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
               #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
               #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE,
               c.C_OUTREQUESTNO OUTREQUESTNO
          from d_exchange_req ,( select R.c_outrequestno,
             t.F_CONFIRMBALANCE,
             t.F_CONFIRMSHARES,
             t.C_REQUESTNO,
             t.D_CDATE,
             t.f_agencyfare,
             t.f_tafare,
             t.f_totalfare,
             t.f_fundfare,
             t.f_netvalue from  
        TA_TREQUEST R, (select c.F_CONFIRMBALANCE,
             c.F_CONFIRMSHARES,
             c.C_REQUESTNO,
             c.D_CDATE,
             nvl(c.f_agencyfare,0) f_agencyfare,
			 nvl(c.f_tafare,0) f_tafare,
			 nvl(c.f_totalfare,0) f_totalfare,
			 nvl(c.f_fundfare,0) f_fundfare,
             c.f_netvalue from TA_TCONFIRM C
             where C.c_businflag ='03'
              ) t  where R.C_REQUESTNO=t.C_REQUESTNO) c
         where er_ta_serial_no=c.C_OUTREQUESTNO
             and er_return_code = '0000'
              and (er_prement_data_stat = '0' or er_prement_data_stat is null)
             and er_business_code ='024'
             and ER_VALID_FLAG='01'
             and ER_TRANS_DATE = #{LASTDATE,jdbcType=VARCHAR}
             <!--  and TO_CHAR(c.D_CDATE, 'YYYYMMDD') = #{TRANSDATE,jdbcType=VARCHAR} -->
           and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
        )TT 
         where exists (select 1
                        from (
                        <!--create by yindy 修改函数 -->
							select e.er_ta_serial_no taserialno
						      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode
						      ,p.pi_channel_product_code 
						       <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6">
						      ,c.cp_batch_no batchno
						      </if>
							      from p_product_info p, p_channel_product c
							     where p.pi_channel_product_code = c.cp_channel_product_code
							       and p.pi_channel_code=c.cp_channel_code
							       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
							       and c.cp_valid_flag = '01'
							       and c.cp_check_state = '01'
							       and p.pi_valid_flag not in('00','99')
								   and p.pi_check_state = '01'
								   and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
					           )T2
					     where e.er_ta_product_code=T2.fundcode and T2.pi_channel_product_code = e.er_fund_code 
					       <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6">
					           and e.er_batch_no=T2.batchno(+)
					        </if>
					         and e.ER_RETURN_CODE = '0000'
					       and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
					       and e.er_trans_date = #{LASTDATE, jdbcType = VARCHAR} 
					       and e.er_business_code =#{BUSINESSCODE, jdbcType = VARCHAR} 
					       and (er_prement_data_stat = '0' or er_prement_data_stat is null)
					       and e.ER_VALID_FLAG='01'
                        <!-- 修改结束 -->
                        ) temp
                       where temp.taserialno = TT.OUTREQUESTNO)
  </select>
  
  <select id="selectPreMentTradeInfoError" resultType="hashMap" parameterType="hashMap">
  			select <include refid="Base_Column_List_Req"/> ,
		       er_ta_serial_no,
		       #{LASTDATE,jdbcType=VARCHAR} DCDATE,
		       0.00 CONFIRMEDAMOUNT,
		       0.00 CONFIRMEDVOL,
		       0 FROMTAFLAG,
		       nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),1) AS NAV,
		       #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
		       #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE 
		    from d_exchange_req 
		 where  er_return_code &lt;&gt; '0000' 
		    and (er_prement_data_stat = '0' or er_prement_data_stat is null)
		   <!-- and ER_BUSINESS_CODE in ('020', '022', '024') -->
		   and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
		   and ER_TRANS_DATE = #{LASTDATE,jdbcType=VARCHAR}
  </select>
  
  
  <select id="selectPreMentTradeInfo020" resultType="hashMap" parameterType="hashMap">
  		 select <include refid="Base_Column_List_Req"/> ,
		           er_ta_serial_no,
		           #{LASTDATE,jdbcType=VARCHAR} DCDATE,
		           er_application_amount CONFIRMEDAMOUNT,
			       0 CONFIRMEDVOL,
			       0 FROMTAFLAG,
			       nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
			       <!-- 1.0000 NAV, -->
		           #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
		           #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE 
		      from d_exchange_req 
		     where 
		       er_return_code = '0000'
		        and (er_prement_data_stat = '0' or er_prement_data_stat is null)
		       and er_business_code = '020'
		       and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
		       and ER_TRANS_DATE = #{LASTDATE,jdbcType=VARCHAR}
  </select>
  
  
  <select id="selectSubscribeResult" resultType="hashMap" parameterType="hashMap">
  select TT.* from (
    select <include refid="Base_Column_List_Req_BUSCODE"/> ,
           to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
           nvl(T.F_CONFIRMBALANCE, 0) CONFIRMEDAMOUNT,
           nvl(T.F_CONFIRMSHARES, 0) CONFIRMEDVOL,
           <!--总费用  -->
	 	   t.f_totalfare charge,
	 	   <!-- 归属渠道的费用 -->
	 	   t.f_agencyfare agencyfee,
           '1' FROMTAFLAG,
           T.C_REQUESTNO REQUESTNO,
           nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
           #{BUSINESSCODE,jdbcType=VARCHAR} BUSINESSCODE,
	      #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
	      #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
       from d_exchange_req , (
        select R.c_outrequestno,
             t.F_CONFIRMBALANCE,
             t.F_CONFIRMSHARES,
             t.f_agencyfare,
             t.f_tafare,
             t.f_totalfare,
             t.f_fundfare,
             t.C_REQUESTNO,
             t.D_CDATE,
             t.f_netvalue from  
        TA_TREQUEST R, (select c.F_CONFIRMBALANCE,
             c.F_CONFIRMSHARES,
             nvl(c.f_agencyfare,0) f_agencyfare,
			 nvl(c.f_tafare,0) f_tafare,
			 nvl(c.f_totalfare,0) f_totalfare,
			 nvl(c.f_fundfare,0) f_fundfare,
             c.C_REQUESTNO,
             c.D_CDATE,
             c.f_netvalue from TA_TCONFIRM C
             where C.c_businflag in ('50', '02')
             <!--查询日期为上一个工作日到当前交易日  -->
             AND TO_CHAR(c.D_CDATE, 'YYYYMMDD') &gt;=#{LASTDATE,jdbcType = VARCHAR}
             <!--丰利F当天给成立数据  -->
			 <if test="PRODUCTTYPE== 0 ">
			 AND TO_CHAR(c.D_CDATE, 'YYYYMMDD') &lt;= #{TRANSDATE,jdbcType = VARCHAR}
			 </if>
             <if test="PRODUCTTYPE != 0 ">
              AND TO_CHAR(c.D_CDATE, 'YYYYMMDD') &lt; #{TRANSDATE,jdbcType = VARCHAR}
              </if>
              ) t WHERE R.C_REQUESTNO=t.C_REQUESTNO
         ) T
     where er_ta_serial_no=T.c_outrequestno
       and er_return_code = '0000'
       and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
       and er_valid_flag='01'
        )TT 
       where exists (select 1
		                  from (
		                  <!--create by yindy 替换开始  -->
		                  select e.er_ta_serial_no taserialno
						      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode,P.PI_IPO_BEGIN_DATE,P.PI_IPO_END_DATE
						      ,p.pi_channel_product_code 
						       <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6"> 
						      ,c.cp_batch_no batchno
						       </if> 
						      from p_product_info p, p_channel_product c
						       where p.pi_channel_product_code = c.cp_channel_product_code
						       and p.pi_channel_code=c.cp_channel_code
						       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
						       and c.cp_valid_flag = '01'
						       and c.cp_check_state = '01'
						       <!--丰利F当天给成立数据  -->
							     <if test="PRODUCTTYPE== 0 ">
							     	and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
							     </if>
							     <if test="PRODUCTTYPE != 0 ">
								     and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
							     </if>
							   and to_date(p.PI_PRO_END_DATE,'yyyyMMdd')&gt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
					           and p.pi_valid_flag not in('00','99')
					           and p.pi_check_state = '01'
					           and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
					           )T2
					     		where e.er_ta_product_code=T2.fundcode and T2.pi_channel_product_code = e.er_fund_code 
					        	<if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6"> 
					                and e.er_batch_no=T2.batchno(+)
					             </if> 
					         and e.ER_RETURN_CODE = '0000'
					         and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
					       <!-- 该状态为，取出过成立数据之后，把标志值为3 -->
					         and e.er_prement_data_stat != '3'
					       and e.er_business_code = '020' AND E.ER_TRANS_DATE BETWEEN T2.PI_IPO_BEGIN_DATE AND T2.PI_IPO_END_DATE
		                  <!-- 替换结束 -->
		                  ) temp
		                 where temp.taserialno = TT.TASERIALNO)
  </select>
  
  
  <select id="selectSubscribeGQResult" resultType="hashMap" parameterType="hashMap" >
  		select TT.* from (
    select <include refid="Base_Column_List_Req_BUSCODE"/> ,
           to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
           decode((select p.PI_CURRENCY_TYPE
		from p_product_info p, p_channel_product c
		where p.pi_channel_product_code =
		c.cp_channel_product_code
		and p.pi_channel_code = c.cp_channel_code
		and c.cp_channel_code = er_channel_code
		and c.cp_valid_flag = '01'
		and c.cp_check_state = '01'
		and p.pi_valid_flag not in ('00', '99')
		and p.pi_check_state = '01'
		and c.cp_channel_product_code = er_fund_code
		and c.cp_ta_product_code = er_ta_product_code),
		'156',nvl(nvl(t.F_SUMBALANCE,T.F_CONFIRMBALANCE),0),
		'840',nvl(T.F_CONFIRMBALANCE, 0)) CONFIRMEDAMOUNT,
           nvl(T.F_CONFIRMSHARES, 0) CONFIRMEDVOL,
           <!--总费用  -->
	 		t.f_totalfare charge,
	 		<!-- 归属渠道的费用 -->
	 		t.f_agencyfare agencyfee,
           '1' FROMTAFLAG,
           T.C_REQUESTNO REQUESTNO,
           nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
           #{BUSINESSCODE,jdbcType=VARCHAR} BUSINESSCODE,
	      #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
	      #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
       from d_exchange_req , (
        select R.c_outrequestno,
             t.F_CONFIRMBALANCE,
             t.F_SUMBALANCE,
             t.F_CONFIRMSHARES,
             t.f_agencyfare,
             t.f_tafare,
             t.f_totalfare,
             t.f_fundfare,
             t.C_REQUESTNO,
             t.D_CDATE,
             t.f_netvalue from  
             					<!--换汇之后的金额  -->
        TA_TREQUEST R, (select c.F_CONFIRMBALANCE,
        		<!--原始金额  -->
        		tt.f_sumbalance,
             c.F_CONFIRMSHARES,
             nvl(c.f_agencyfare,0) f_agencyfare,
			 nvl(c.f_tafare,0) f_tafare,
			 nvl(c.f_totalfare,0) f_totalfare,
			 nvl(c.f_fundfare,0) f_fundfare,
             c.C_REQUESTNO,
             c.D_CDATE,
             c.f_netvalue from TA_TCONFIRM C,ta_texchangecurrentsdetails tt
             where C.l_serialno=tt.l_businserialno(+) and C.c_businflag in ('50', '02')
             <!--查询日期为上一个工作日到当前交易日  -->
             AND TO_CHAR(c.D_CDATE, 'YYYYMMDD') &gt;=#{LASTDATE,jdbcType = VARCHAR}
             AND TO_CHAR(c.D_CDATE, 'YYYYMMDD') &lt; #{TRANSDATE,jdbcType = VARCHAR}
              ) t WHERE R.C_REQUESTNO=t.C_REQUESTNO
         ) T
     where er_ta_serial_no=T.c_outrequestno
       and er_return_code = '0000'
       and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
       and er_valid_flag='01'
        )TT 
       where exists (select 1
                 from (
	                 <!--create by yindy 替换开始  -->
	                 select e.er_ta_serial_no taserialno
				      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode,P.PI_IPO_BEGIN_DATE,P.PI_IPO_END_DATE
				      ,p.pi_channel_product_code
				      from p_product_info p, p_channel_product c
				       where p.pi_channel_product_code = c.cp_channel_product_code
				       and p.pi_channel_code=c.cp_channel_code
				       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
				       and c.cp_valid_flag = '01'
				       and c.cp_check_state = '01'
				       and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
				       AND to_date(p.PI_PRO_END_DATE,'yyyyMMdd')&gt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
			           and p.pi_valid_flag not in('00','99')
			           and p.pi_check_state = '01'
			           and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
			           )T2
			     		where e.er_ta_product_code=T2.fundcode and T2.pi_channel_product_code = e.er_fund_code 
			         and e.ER_RETURN_CODE = '0000'
			         and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
			       <!-- 该状态为，取出过成立数据之后，把标志值为3 -->
			         and e.er_prement_data_stat != '3'
			       and e.er_business_code = '020' AND E.ER_TRANS_DATE BETWEEN T2.PI_IPO_BEGIN_DATE AND T2.PI_IPO_END_DATE
	                 <!-- 替换结束 -->
	                 ) temp
                where temp.taserialno = TT.TASERIALNO)
  
  </select>
  
  <select id="selectmultiCurrencyResult" resultType="hashMap" parameterType="hashMap">
  select TT.* from (
	    select ER_CHANNEL_CODE CHANNELCODE,
	       ER_TRANS_DATE  BUSINESSDATE,
	       ER_APP_SHEET_SERIAL_NO APPSHEETSERIALNO,
	       ER_FUND_CODE FUNDCODE,
	       ER_LARGE_REDEMPTION_FLAG LARGEREDEMPTIONFLAG,
	       ER_TRANSACTION_DATE TRANSACTIONDATE,
	       ER_TRANSACTION_TIME TRANSACTIONTIME,
	       ER_TRANSACTION_ACCOUNT_ID TRANSACTIONACCOUNTID,
	       ER_DISTRIBUTOR_CODE DISTRIBUTORCODE,
	       ER_APPLICATION_VOL APPLICATIONVOL,
	       ER_APPLICATION_AMOUNT APPLICATIONAMOUNT,
	       ER_TA_ACCOUNT_ID TAACCOUNTID,
	       ER_DISCOUNT_RATE_OF_COMM DISCOUNTRATEOFCOMMISSION,
	       ER_DEPOSIT_ACCT DEPOSITACCT,
	       ER_REGION_CODE REGIONCODE,
	       <!-- 20200121  统一美元币种确认 -->
	       '840' CURRENCYTYPE,
	       ER_BRANCH_CODE BRANCHCODE,
	       ER_ORIGINAL_APP_SHEET_NO ORIGINALAPPSHEETNO,
	       ER_ORIGINAL_SUBS_DATE ORIGINALSUBSDATE,
	       ER_INDIVIDUAL_OR_INSTITUTION INDIVIDUALORINSTITUTION,
	       ER_VALID_PERIOD VALIDPERIOD,
	       ER_DAYS_REDEMPTION_IN_ADVANCE DAYSREDEMPTIONINADVANCE,
	       ER_REDEMPTION_DATE_IN_ADVANCE REDEMPTIONDATEINADVANCE,
	       ER_ORIGINAL_SERIAL_NO ORIGINALSERIALNO,
	       ER_DATE_OF_PERIODIC_SUBS DATEOFPERIODICSUBS,
	       ER_TA_SERIAL_NO TASERIALNO,
	       ER_TERM_OF_PERIODIC_SUBS TERMOFPERIODICSUBS,
	       ER_FUTURE_BUY_DATE FUTUREBUYDATE,
	       ER_TARGET_DISTRIBUTOR_CODE TARGETDISTRIBUTORCODE,
	       ER_TARGET_BRANCH_CODE TARGETBRANCHCODE,
	       ER_TARGET_TRANSACT_ACCT_CODE TARGETTRANSACTIONACCOUNTID,
	       ER_TARGET_REGION_CODE TARGETREGIONCODE,
	       ER_DIVIDEND_RATIO DIVIDENDRATIO,
	       ER_SPECIFICATION SPECIFICATION,
	       ER_CODE_OF_TARGET_FUND CODEOFTARGETFUND,
	       ER_TOTAL_BACKEND_LOAD TOTALBACKENDLOAD,
	       ER_SHARE_CLASS SHARECLASS,
	       ER_ORIGINAL_CFM_DATE ORIGINALCFMDATE,
	       ER_DETAIL_FLAG DETAILFLAG,
	       ER_ORIGINAL_APP_DATE ORIGINALAPPDATE,
	       ER_DEF_DIVIDEND_METHOD DEFDIVIDENDMETHOD,
	       ER_FROZEN_CAUSE FROZENCAUSE,
	       ER_FREEZING_DEADLINE FREEZINGDEADLINE,
	       ER_VARIETY_CODE_PERIODIC_SUB VARIETYCODEOFPERIODICSUBS,
	       ER_SERIAL_NO_PERIODIC_SUB SERIALNOOFPERIODICSUBS,
	       ER_RATION_TYPE RATIONTYPE,
	       ER_TARGET_TA_ACCOUNT_ID TARGETTAACCOUNTID,
	       ER_TARGET_REGISTRAR_CODE TARGETREGISTRARCODE,
	       ER_NET_NO NETNO,
	       ER_CUSTOMER_NO CUSTOMERNO,
	       ER_TARGET_SHARE_TYPE TARGETSHARETYPE,
	       ER_RATION_PROTOCOL_NO RATIONPROTOCOLNO,
	       ER_BEGIN_DATE_PERIODIC_SUBS BEGINDATEOFPERIODICSUBS,
	       ER_END_DATE_OF_PERIODIC_SUBS ENDDATEOFPERIODICSUBS,
	       ER_SEND_DAY_OF_PERIODIC_SUBS SENDDAYOFPERIODICSUBS,
	       ER_BROKER BROKER,
	       ER_SALES_PROMOTION SALESPROMOTION,
	       ER_ACCEPT_METHOD ACCEPTMETHOD,
	       ER_FORCE_REDEMPTION_TYPE FORCEREDEMPTIONTYPE,
	       ER_TAKE_INCOME_FLAG TAKEINCOMEFLAG,
	       ER_PURPOSE_OF_PE_SUBS PURPOSEOFPESUBS,
	       ER_FREQUENCY_OF_PE_SUBS FREQUENCYOFPESUBS,
	       ER_PERIOD_SUB_TIME_UNIT PERIODSUBTIMEUNIT,
	       ER_BATCH_NUM_OF_PESUBS BATCHNUMOFPESUBS,
	       ER_CAPITAL_MODE CAPITALMODE,
	       ER_DETAIL_CAPTICAL_MODE DETAILCAPTICALMODE,
	       ER_BACKENLOAD_DISCOUNT BACKENLOADDISCOUNT,
	       ER_COMBINE_NUM COMBINENUM,
	       ER_FUTURE_SUBSCRIBE_DATE FUTURESUBSCRIBEDATE,
	       ER_TRADING_METHOD TRADINGMETHOD,
	       ER_LARGE_BUY_FLAG LARGEBUYFLAG,
	       ER_CHARGE_TYPE CHARGETYPE,
	       ER_SPECIFY_RATE_FEE SPECIFYRATEFEE,
	       ER_SPECIFY_FEE  SPECIFYFEE,
	       ER_PRO_YIELD_TYPE PROYIELDTYPE,
	       ER_PRO_YIELD     PROYIELD,
	       ER_IN_CONTRACT  INCONTRACT,
	       ER_OUT_CONTRACT  OUTCONTRACT,
	       ER_VALID_FLAG  VALIDFLAG,
	       ER_RETURN_CODE RETURNCODE,
	       ER_EXPECTED_CFM_DATE EXPECTEDCFMDATE,
	       ER_ERROR_DEC ERRORDEC,
	       ER_TA_PRODUCT_CODE TAPRODUCTCODE,
	       ER_BATCH_NO  BATCHNO,
           to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
           t.f_sumecbalance CONFIRMEDAMOUNT,
           T.F_CONFIRMSHARES CONFIRMEDVOL,
            <!--费用支付金额  20200121  -->
	 		t.f_ecagencyfare  charge,
	 		<!-- 归属渠道的费用 -->
	 		t.f_agencyfare agencyfee,
           '1' FROMTAFLAG,
           nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
           #{BUSINESSCODE,jdbcType=VARCHAR} BUSINESSCODE,
	      #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
	      #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
       from d_exchange_req , (
       		select v.c_outrequestno,
				nvl(v.f_sumbalance,0) f_sumbalance,
				nvl(v.f_sumecbalance,0) f_sumecbalance,
				nvl(v.f_confirmshares,0) f_confirmshares,
				v.d_cdate,
				nvl(v.f_agencyfare,0) f_agencyfare,
				nvl(v.f_tafare,0) f_tafare,
				nvl(v.f_totalfare,0) f_totalfare,
				nvl(v.f_fundfare,0) f_fundfare,
				nvl(v.f_ecagencyfare ,0) f_ecagencyfare
				from ta_vconfirm v 
				where v.c_businflag in ('50', '02')
				and v.c_property='Q'
				and v.d_expectdate &gt;= to_date(#{LASTDATE,jdbcType = VARCHAR},'yyyymmdd')
				and v.d_expectdate &lt; to_date(#{TRANSDATE,jdbcType = VARCHAR},'yyyymmdd')
         ) T
       where er_ta_serial_no=T.c_outrequestno
       and er_return_code = '0000'
       and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
       and er_valid_flag='01'
        )TT 
       where exists (select 1
                 from (
	                 <!--create by yindy 替换开始  -->
	                 select e.er_ta_serial_no taserialno
				      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode,P.PI_IPO_BEGIN_DATE,P.PI_IPO_END_DATE
				      ,p.pi_channel_product_code
				      from p_product_info p, p_channel_product c
				       where p.pi_channel_product_code = c.cp_channel_product_code
				       and p.pi_channel_code=c.cp_channel_code
				       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
				       and c.cp_valid_flag = '01'
				       and c.cp_check_state = '01'
				       and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
				       AND to_date(p.PI_PRO_END_DATE,'yyyyMMdd')&gt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
			           and p.pi_valid_flag not in('00','99')
			           and p.pi_check_state = '01'
			           and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
			           )T2
			     		where e.er_ta_product_code=T2.fundcode and T2.pi_channel_product_code = e.er_fund_code 
			         and e.ER_RETURN_CODE = '0000'
			         and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
			       <!-- 该状态为，取出过成立数据之后，把标志值为3 -->
			         and e.er_prement_data_stat != '3'
			       and e.er_business_code = '020' AND E.ER_TRANS_DATE BETWEEN T2.PI_IPO_BEGIN_DATE AND T2.PI_IPO_END_DATE
	                 <!-- 替换结束 -->
	                 ) temp
                where temp.taserialno = TT.TASERIALNO)
  </select>
  
  
  <update id="updatePrementData" parameterType="Map">
	  update d_exchange_req e set e.ER_PREMENT_DATA_STAT = '3' where exists (
	  	select 1 from (
	  		select e.er_ta_serial_no taserialno
	      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode,P.PI_IPO_BEGIN_DATE,P.PI_IPO_END_DATE,p.pi_channel_product_code
	       <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6"> 
	      ,c.cp_batch_no batchno
	       </if> 
		      from p_product_info p, p_channel_product c
		     where p.pi_channel_product_code = c.cp_channel_product_code
		       and p.pi_channel_code=c.cp_channel_code
		       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
		       and c.cp_valid_flag = '01'
		       and c.cp_check_state = '01'
		       <if test="PRODUCTTYPE == 0">
		        and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
		       </if>
		       <if test="PRODUCTTYPE != 0">
		        and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
		        </if>
		        AND to_date(p.PI_PRO_END_DATE,'yyyyMMdd')&gt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
		       and p.pi_valid_flag not in('00','99')
			   and p.pi_check_state = '01'
			    and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
		       )T2
		 where e.er_ta_product_code=T2.fundcode
		  and e.er_fund_code = T2.pi_channel_product_code
		    <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6"> 
       	   		and e.er_batch_no=T2.batchno(+)
       	    </if> 
	       and e.ER_RETURN_CODE = '0000'
		   and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
		   <!-- 该状态为，取出过成立数据之后，把标志值为3 -->
		   and e.er_prement_data_stat != '3'
		   <if test="PRODUCTTYPE != 8 ">
		   <!--多币种运作期出成立数据  -->
		   		and e.er_business_code = '020' AND E.ER_TRANS_DATE BETWEEN T2.PI_IPO_BEGIN_DATE AND T2.PI_IPO_END_DATE
		   </if>
	  	) temp  
	  	where temp.taserialno = e.er_ta_serial_no
	  ) and er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
  </update>
  
	<select id="selectTransEndandDivi" resultType="hashMap" parameterType="hashMap">
		SELECT ER_CHANNEL_CODE       		 CHANNELCODE,
               ER_TRANS_DATE                 BUSINESSDATE,
               ER_APP_SHEET_SERIAL_NO        APPSHEETSERIALNO,
               ER_FUND_CODE                  FUNDCODE,
               ER_LARGE_REDEMPTION_FLAG      LARGEREDEMPTIONFLAG,
               <!-- ER_TRANSACTION_DATE      TRANSACTIONDATE, -->
               #{LASTDATE,jdbcType=VARCHAR}  TRANSACTIONDATE,
               ER_TRANSACTION_TIME           TRANSACTIONTIME,
               ER_TRANSACTION_ACCOUNT_ID     TRANSACTIONACCOUNTID,
               ER_DISTRIBUTOR_CODE           DISTRIBUTORCODE,
               #{BUSINESSCODE,jdbcType=VARCHAR}              BUSINESSCODE,
               ER_DISCOUNT_RATE_OF_COMM      DISCOUNTRATEOFCOMMISSION,
               ER_DEPOSIT_ACCT               DEPOSITACCT,
               ER_REGION_CODE                REGIONCODE,
               ER_CURRENCY_TYPE              CURRENCYTYPE,
               ER_BRANCH_CODE                BRANCHCODE,
               ER_ORIGINAL_APP_SHEET_NO      ORIGINALAPPSHEETNO,
               ER_ORIGINAL_SUBS_DATE         ORIGINALSUBSDATE,
               ER_INDIVIDUAL_OR_INSTITUTION  INDIVIDUALORINSTITUTION,
               ER_VALID_PERIOD               VALIDPERIOD,
               ER_DAYS_REDEMPTION_IN_ADVANCE DAYSREDEMPTIONINADVANCE,
               ER_REDEMPTION_DATE_IN_ADVANCE REDEMPTIONDATEINADVANCE,
               ER_ORIGINAL_SERIAL_NO         ORIGINALSERIALNO,
               ER_DATE_OF_PERIODIC_SUBS      DATEOFPERIODICSUBS,
               ER_TA_SERIAL_NO               TASERIALNO,
               ER_TERM_OF_PERIODIC_SUBS      TERMOFPERIODICSUBS,
               ER_FUTURE_BUY_DATE            FUTUREBUYDATE,
               ER_TARGET_DISTRIBUTOR_CODE    TARGETDISTRIBUTORCODE,
               ER_CHARGE                     CHARGE,
               ER_TARGET_BRANCH_CODE         TARGETBRANCHCODE,
               ER_TARGET_TRANSACT_ACCT_CODE  TARGETTRANSACTIONACCOUNTID,
               ER_TARGET_REGION_CODE         TARGETREGIONCODE,
               ER_DIVIDEND_RATIO             DIVIDENDRATIO,
               ER_SPECIFICATION              SPECIFICATION,
               ER_CODE_OF_TARGET_FUND        CODEOFTARGETFUND,
               ER_TOTAL_BACKEND_LOAD         TOTALBACKENDLOAD,
               ER_SHARE_CLASS                SHARECLASS,
               ER_ORIGINAL_CFM_DATE          ORIGINALCFMDATE,
               ER_DETAIL_FLAG                DETAILFLAG,
               ER_ORIGINAL_APP_DATE          ORIGINALAPPDATE,
               ER_DEF_DIVIDEND_METHOD        DEFDIVIDENDMETHOD,
               ER_FROZEN_CAUSE               FROZENCAUSE,
               ER_FREEZING_DEADLINE          FREEZINGDEADLINE,
               ER_VARIETY_CODE_PERIODIC_SUB  VARIETYCODEOFPERIODICSUBS,
               ER_SERIAL_NO_PERIODIC_SUB     SERIALNOOFPERIODICSUBS,
               ER_RATION_TYPE                RATIONTYPE,
               ER_TARGET_TA_ACCOUNT_ID       TARGETTAACCOUNTID,
               ER_TARGET_REGISTRAR_CODE      TARGETREGISTRARCODE,
               ER_NET_NO                     NETNO,
               ER_CUSTOMER_NO                CUSTOMERNO,
               ER_TARGET_SHARE_TYPE          TARGETSHARETYPE,
               ER_RATION_PROTOCOL_NO         RATIONPROTOCOLNO,
               ER_BEGIN_DATE_PERIODIC_SUBS   BEGINDATEOFPERIODICSUBS,
               ER_END_DATE_OF_PERIODIC_SUBS  ENDDATEOFPERIODICSUBS,
               ER_SEND_DAY_OF_PERIODIC_SUBS  SENDDAYOFPERIODICSUBS,
               ER_BROKER                     BROKER,
               ER_SALES_PROMOTION            SALESPROMOTION,
               ER_ACCEPT_METHOD              ACCEPTMETHOD,
               ER_FORCE_REDEMPTION_TYPE      FORCEREDEMPTIONTYPE,
               ER_TAKE_INCOME_FLAG           TAKEINCOMEFLAG,
               ER_PURPOSE_OF_PE_SUBS         PURPOSEOFPESUBS,
               ER_FREQUENCY_OF_PE_SUBS       FREQUENCYOFPESUBS,
               ER_PERIOD_SUB_TIME_UNIT       PERIODSUBTIMEUNIT,
               ER_BATCH_NUM_OF_PESUBS        BATCHNUMOFPESUBS,
               ER_CAPITAL_MODE               CAPITALMODE,
               ER_DETAIL_CAPTICAL_MODE       DETAILCAPTICALMODE,
               ER_BACKENLOAD_DISCOUNT        BACKENLOADDISCOUNT,
               ER_COMBINE_NUM                COMBINENUM,
               ER_FUTURE_SUBSCRIBE_DATE      FUTURESUBSCRIBEDATE,
               ER_TRADING_METHOD             TRADINGMETHOD,
               ER_LARGE_BUY_FLAG             LARGEBUYFLAG,
               ER_CHARGE_TYPE                CHARGETYPE,
               ER_SPECIFY_RATE_FEE           SPECIFYRATEFEE,
               ER_SPECIFY_FEE                SPECIFYFEE,
               ER_PRO_YIELD_TYPE             PROYIELDTYPE,
               ER_PRO_YIELD                  PROYIELD,
               ER_IN_CONTRACT                INCONTRACT,
               ER_OUT_CONTRACT               OUTCONTRACT,
               ER_VALID_FLAG                 VALIDFLAG,
               ER_RETURN_CODE                RETURNCODE,
               ER_EXPECTED_CFM_DATE          EXPECTEDCFMDATE,
               ER_ERROR_DEC                  ERRORDEC,
               ER_TA_PRODUCT_CODE            TAPRODUCTCODE,
               ER_BATCH_NO                   BATCHNO,
               ER_TA_ACCOUNT_ID   			 TAACCOUNTID,
		      T.F_REPAYCAPITAL CONFIRMEDVOL,
		      <!--20200331 部分返本需要加上分红数据  -->
		      
		      nvl((select nvl(n.F_PROFIT, 0) + nvl(n.F_SUBINTEREST, 0) +
               nvl(n.F_INTEREST, 0) from ta_tprofitdealcurrentdetails n where 
		      		exists (
						select 1 from tj_contractdetails t 
						where t.l_contractserialno = n.l_contractserialno
			            and t.c_fundacco = n.c_fundacco
			            and t.f_remainshares_sams != 0
				   	)
				   and n.l_contractserialno = t.l_contractserialno
				   and n.c_fundacco = t.c_fundacco
				   and n.l_serialno = t.l_serialno
		   	  ),0)+nvl(T.F_REPAYCAPITAL,0) CONFIRMEDAMOUNT,
		   	  
		   	  <!--T.F_REPAYCAPITAL CONFIRMEDAMOUNT  -->
		      T.F_REPAYCAPITAL APPLICATIONVOL,
		      '' APPLICATIONAMOUNT,
		      #{TRANSDATE,jdbcType=VARCHAR} TRANSACTIONCFMDATE,
		     '' ERRORDETAIL,
		      #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
		      ER_TA_SERIAL_NO REQUESTNO,
		      nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
		      '1' FROMTAFLAG,
		       #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
			    from ta_tprofitdealcurrentdetails t,  
         (select *
            from (select *
                    from (select t.*,
                                 row_number() over(partition by er_channel_code, er_fund_code, er_ta_account_id, er_in_contract order by er_id desc) row_number
                            from (select *
                                    from  d_exchange_req
                                   where  ER_CHANNEL_CODE=#{CHANNELCODE,jdbcType = VARCHAR} 
                                      and er_valid_flag = '01') t) t1
                   where row_number = 1),
                 p_product_info i
           where er_channel_code = i.pi_channel_code
             and er_fund_code = i.pi_channel_product_code
             and i.pi_product_type = '4'
             and i.pi_valid_flag in ('01','02')
             and i.pi_check_state = '01'
             )
    where t.l_contractserialno = er_in_contract
    and nvl(T.F_REPAYCAPITAL,0) &lt;&gt; 0
   and exists
 (select 1
        from ta_tbusinremitmcurrents t2, ta_tremitmoneydetail t3
        <!--  -->
        where to_char(t3.d_expectdate, 'yyyyMMdd') &gt;= #{LASTDATE,jdbcType=VARCHAR}
        and to_char(t3.d_expectdate, 'yyyyMMdd') &lt; #{TRANSDATE,jdbcType=VARCHAR}
        and t2.l_businserialno = t.l_serialno
        and t2.l_remitserialno = t3.l_firstserialno)
	</select>
	
  
  <select id="selectConfirmInfo" resultType="hashMap" parameterType="hashMap">
		 SELECT TO_CHAR(T.D_CDATE, 'YYYYMMDD') DCDATE,
		        nvl(T.F_CONFIRMBALANCE,0.00) FCONFIRMBALANCE,
		        nvl(T.F_CONFIRMSHARES,0.00) FCONFIRMSHARES,
		        t.C_REQUESTNO,
				T.L_CONTRACTSERIALNO
		   FROM TA_TCONFIRM T
		  WHERE exists (select 1
		           from ta_trequest a
		          where a.c_outrequestno = #{TASERIALNO, jdbcType = VARCHAR}
		            and T.C_REQUESTNO = a.c_requestno)
		    and t.c_businflag in ('01', '02', '03')
  </select>
	
  	<select id="selectRedeemResult" resultType="hashMap" parameterType="hashMap">
		select ER_CHANNEL_CODE               CHANNELCODE,
               ER_TRANS_DATE                 BUSINESSDATE,
               ER_APP_SHEET_SERIAL_NO        APPSHEETSERIALNO,
               ER_FUND_CODE                  FUNDCODE,
               ER_LARGE_REDEMPTION_FLAG      LARGEREDEMPTIONFLAG,
               <!-- ER_TRANSACTION_DATE      TRANSACTIONDATE, -->
               #{LASTDATE,jdbcType=VARCHAR}	 TRANSACTIONDATE,
               ER_TRANSACTION_TIME           TRANSACTIONTIME,
               ER_TRANSACTION_ACCOUNT_ID     TRANSACTIONACCOUNTID,
               ER_DISTRIBUTOR_CODE           DISTRIBUTORCODE,
               #{BUSINESSCODE, jdbcType = VARCHAR}              BUSINESSCODE,
               ER_DISCOUNT_RATE_OF_COMM      DISCOUNTRATEOFCOMMISSION,
               ER_DEPOSIT_ACCT               DEPOSITACCT,
               ER_REGION_CODE                REGIONCODE,
               ER_CURRENCY_TYPE              CURRENCYTYPE,
               ER_BRANCH_CODE                BRANCHCODE,
               ER_ORIGINAL_APP_SHEET_NO      ORIGINALAPPSHEETNO,
               ER_ORIGINAL_SUBS_DATE         ORIGINALSUBSDATE,
               ER_INDIVIDUAL_OR_INSTITUTION  INDIVIDUALORINSTITUTION,
               ER_VALID_PERIOD               VALIDPERIOD,
               ER_DAYS_REDEMPTION_IN_ADVANCE DAYSREDEMPTIONINADVANCE,
               ER_REDEMPTION_DATE_IN_ADVANCE REDEMPTIONDATEINADVANCE,
               ER_ORIGINAL_SERIAL_NO         ORIGINALSERIALNO,
               ER_DATE_OF_PERIODIC_SUBS      DATEOFPERIODICSUBS,
               ER_TA_SERIAL_NO               TASERIALNO,
               ER_TERM_OF_PERIODIC_SUBS      TERMOFPERIODICSUBS,
               ER_FUTURE_BUY_DATE            FUTUREBUYDATE,
               ER_TARGET_DISTRIBUTOR_CODE    TARGETDISTRIBUTORCODE,
               ER_CHARGE                     CHARGE,
               ER_TARGET_BRANCH_CODE         TARGETBRANCHCODE,
               ER_TARGET_TRANSACT_ACCT_CODE  TARGETTRANSACTIONACCOUNTID,
               ER_TARGET_REGION_CODE         TARGETREGIONCODE,
               ER_DIVIDEND_RATIO             DIVIDENDRATIO,
               ER_SPECIFICATION              SPECIFICATION,
               ER_CODE_OF_TARGET_FUND        CODEOFTARGETFUND,
               ER_TOTAL_BACKEND_LOAD         TOTALBACKENDLOAD,
               ER_SHARE_CLASS                SHARECLASS,
               ER_ORIGINAL_CFM_DATE          ORIGINALCFMDATE,
               ER_DETAIL_FLAG                DETAILFLAG,
               ER_ORIGINAL_APP_DATE          ORIGINALAPPDATE,
               ER_DEF_DIVIDEND_METHOD        DEFDIVIDENDMETHOD,
               ER_FROZEN_CAUSE               FROZENCAUSE,
               ER_FREEZING_DEADLINE          FREEZINGDEADLINE,
               ER_VARIETY_CODE_PERIODIC_SUB  VARIETYCODEOFPERIODICSUBS,
               ER_SERIAL_NO_PERIODIC_SUB     SERIALNOOFPERIODICSUBS,
               ER_RATION_TYPE                RATIONTYPE,
               ER_TARGET_TA_ACCOUNT_ID       TARGETTAACCOUNTID,
               ER_TARGET_REGISTRAR_CODE      TARGETREGISTRARCODE,
               ER_NET_NO                     NETNO,
               ER_CUSTOMER_NO                CUSTOMERNO,
               ER_TARGET_SHARE_TYPE          TARGETSHARETYPE,
               ER_RATION_PROTOCOL_NO         RATIONPROTOCOLNO,
               ER_BEGIN_DATE_PERIODIC_SUBS   BEGINDATEOFPERIODICSUBS,
               ER_END_DATE_OF_PERIODIC_SUBS  ENDDATEOFPERIODICSUBS,
               ER_SEND_DAY_OF_PERIODIC_SUBS  SENDDAYOFPERIODICSUBS,
               ER_BROKER                     BROKER,
               ER_SALES_PROMOTION            SALESPROMOTION,
               ER_ACCEPT_METHOD              ACCEPTMETHOD,
               ER_FORCE_REDEMPTION_TYPE      FORCEREDEMPTIONTYPE,
               ER_TAKE_INCOME_FLAG           TAKEINCOMEFLAG,
               ER_PURPOSE_OF_PE_SUBS         PURPOSEOFPESUBS,
               ER_FREQUENCY_OF_PE_SUBS       FREQUENCYOFPESUBS,
               ER_PERIOD_SUB_TIME_UNIT       PERIODSUBTIMEUNIT,
               ER_BATCH_NUM_OF_PESUBS        BATCHNUMOFPESUBS,
               ER_CAPITAL_MODE               CAPITALMODE,
               ER_DETAIL_CAPTICAL_MODE       DETAILCAPTICALMODE,
               ER_BACKENLOAD_DISCOUNT        BACKENLOADDISCOUNT,
               ER_COMBINE_NUM                COMBINENUM,
               ER_FUTURE_SUBSCRIBE_DATE      FUTURESUBSCRIBEDATE,
               ER_TRADING_METHOD             TRADINGMETHOD,
               ER_LARGE_BUY_FLAG             LARGEBUYFLAG,
               ER_CHARGE_TYPE                CHARGETYPE,
               ER_SPECIFY_RATE_FEE           SPECIFYRATEFEE,
               ER_SPECIFY_FEE                SPECIFYFEE,
               ER_PRO_YIELD_TYPE             PROYIELDTYPE,
               ER_PRO_YIELD                  PROYIELD,
               ER_IN_CONTRACT                INCONTRACT,
               ER_OUT_CONTRACT               OUTCONTRACT,
               ER_VALID_FLAG                 VALIDFLAG,
               ER_RETURN_CODE                RETURNCODE,
               ER_EXPECTED_CFM_DATE          EXPECTEDCFMDATE,
               ER_ERROR_DEC                  ERRORDEC,
               ER_TA_PRODUCT_CODE            TAPRODUCTCODE,
               ER_BATCH_NO                   BATCHNO,  
               to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
               nvl(T.F_CONFIRMSHARES, 0) CONFIRMEDVOL,
               '1' FROMTAFLAG,
               T.C_REQUESTNO REQUESTNO,
               nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
               #{TRANSDATE,jdbcType = VARCHAR} DOWNLOADDATE,
               #{TRANSDATE,jdbcType = VARCHAR} TRANSACTIONCFMDATE,
               '' ERRORDETAIL,
               #{TRANSDATE,jdbcType = VARCHAR} TRANSDATE,
               nvl(T.F_CONFIRMBALANCE, 0) + nvl(T.F_INTEREST, 0) CONFIRMEDAMOUNT,
               T.F_CONFIRMSHARES APPLICATIONVOL,
               '' APPLICATIONAMOUNT,
               T.C_FUNDACCO TAACCOUNTID,
               #{TRANSDATE, jdbcType = VARCHAR} ENDDATE
          from d_exchange_req,
               (select c.L_CONTRACTSERIALNO,
                       c.F_INTEREST,
                       c.F_CONFIRMSHARES,
                       c.C_REQUESTNO,
                       c.F_CONFIRMBALANCE,
                       c.D_CDATE,
                       c.C_FUNDACCO
                  from TA_TCONFIRM C
                 where  C.c_businflag = '03'
                 <!--查询日期为上一个工作日到当前交易日   -->
                 <if test="PRODUCTTYPE == 0 ">
                 	and TO_CHAR(c.D_CDATE, 'YYYYMMDD') = #{TRANSDATE,jdbcType=VARCHAR}
                 </if>
                 <if test="PRODUCTTYPE != 0 ">
	                 and TO_CHAR(c.D_CDATE, 'YYYYMMDD') &gt;= #{LASTDATE,jdbcType=VARCHAR} 
	                 and TO_CHAR(c.D_CDATE, 'YYYYMMDD') &lt; #{TRANSDATE,jdbcType=VARCHAR} 
                 </if>
                   ) T,p_product_info i
         where ER_IN_CONTRACT  = T.L_CONTRACTSERIALNO
           and er_return_code = '0000'
           and er_channel_code=i.pi_channel_code
           and er_fund_code=i.pi_channel_product_code
           and i.pi_product_type in ('0','5','6')
           and i.pi_valid_flag in ('01','02')
           and i.pi_check_state='01'
           and ER_CHANNEL_CODE = #{CHANNELCODE, jdbcType = VARCHAR}
	</select>

	
	
	<select id="queryFailedInfo" resultType = "Map">
	   select DISTINCT er.er_channel_code        channelcode,
            pci.ci_channel_name       channelName,
            er.er_app_sheet_serial_no appsheetserialno,
            ar.as_investor_name       investorname,
            ar.as_certificate_no      certificateno,
            ar.as_ta_account_id       taaccountid,
            <!-- er.er_business_code       businesscode, -->
            case 
			(select dict_name  from sys_dict d 
				where dict_code = er.er_business_code 
				and d.dict_pid = (select dict_id from sys_dict t where t.dict_type = 'bussinessCode'))  
			when  null 
			then er.er_business_code || '('|| '暂不支持'|| ')' 
			else er.er_business_code || '('|| (select dict_name  from sys_dict d where dict_code = er.er_business_code and d.dict_pid = (select dict_id from sys_dict t where t.dict_type = 'bussinessCode')) ||  ')' 
			end as businesscode,
            er.er_trans_date  transdate,
            er.er_transaction_date    transactiondate,
            er.er_fund_code           fundcode,
            er_return_code            returnCode,
            er_currency_type 		  currencytype,
            er.er_transaction_account_id transactionaAcountId,
            case er.er_business_code when '024' then er.er_application_vol
    	else er.er_application_amount end  applicationamount,
    	<!--加上合同号区分有没有发送tA 20190827 测试提  -->
    	er.er_out_contract outcontract,
            er.er_error_dec errordec
       from d_exchange_req er
       left join p_channel_info pci
         on er.er_channel_code = pci.ci_channel_code
       left join d_account_stat ar
         on er.er_transaction_account_id = ar.as_transaction_account_id  
        and er.er_channel_code = ar.as_channel_code 
        <!-- and ar.as_INDIVIDUAL_OR_INSTITUTION = er.ER_INDIVIDUAL_OR_INSTITUTION -->
        <where>
	        <if test="condition.transDate != null and condition.transDate != ''">
		 		er_trans_date=#{condition.transDate,jdbcType=VARCHAR}
		 	</if>
		 	
	        <if test="condition.channelCode != null and condition.channelCode != '' ">
			and er_channel_code=#{condition.channelCode,jdbcType=VARCHAR}
			</if>
			<if test="condition.productCode != null and condition.productCode != '' ">
			and er_fund_code=#{condition.productCode,jdbcType=VARCHAR}
			</if>
			<if test="condition.transactionAacountId != null and condition.transactionAacountId != '' ">
			and er_transaction_account_id like ('%'|| #{condition.transactionAacountId,jdbcType=VARCHAR} ||'%') 
			</if>
			<if test="condition.taAccountId != null and condition.taAccountId != '' ">
			and er_ta_account_id like ('%'|| #{condition.taAccountId,jdbcType=VARCHAR} ||'%') 
			</if>
		   	<if test="condition.businessCode != null and condition.businessCode != '' ">
			and er_business_code = #{condition.businessCode,jdbcType=VARCHAR}
			</if>
		   	<choose>
	   	  	<when test='condition.handel == "0000" '>
	   	  		and er_return_code = '0000'
	   	  	</when>
	   	  	<when test='condition.handel == "9999" '>
	   	  		and er_return_code &lt;&gt; '0000'
	   	  	</when>
	   	  </choose>
	   	  </where>
        <if test="pageInfo.sort != null and pageInfo.sort != ''">
            order by ${pageInfo.sort} ${pageInfo.order}
        </if>
	</select>
	
	
	<select id="queryTransFailedInfo" parameterType = "Map" resultType = "Map">
	   select er.er_id                ID,
	        er.er_channel_code        channelcode,
            pci.ci_channel_name       channelName,
            er.er_app_sheet_serial_no appsheetserialno,
            ar.as_investor_name       investorname,
            ar.as_certificate_no      certificateno,
            ar.as_ta_account_id       taaccountid,
            <!-- er.er_business_code       businesscode, -->
            case 
			(select dict_name  from sys_dict d 
				where dict_code = er.er_business_code 
				and d.dict_pid = (select dict_id from sys_dict t where t.dict_type = 'bussinessCode'))  
			when  null 
			then er.er_business_code || '('|| '暂不支持'|| ')' 
			else er.er_business_code || '('|| (select dict_name  from sys_dict d where dict_code = er.er_business_code and d.dict_pid = (select dict_id from sys_dict t where t.dict_type = 'bussinessCode')) ||  ')' 
			end as businesscode,
            er.er_trans_date  transdate,
            er.er_transaction_date    transactiondate,
            er.er_fund_code           fundcode,
            er.er_return_code          returnCode,
            er_currency_type 		  currencytype,
            er.er_transaction_account_id transactionaAcountId,
            case er.er_business_code when '024' then er.er_application_vol
    	else er.er_application_amount end  applicationamount,
    	<!--加上合同号区分有没有发送tA 20190827 测试提  -->
    	er.er_out_contract outcontract,
            er.er_error_dec errordec
       from d_exchange_req er
       left join p_channel_info pci
         on er.er_channel_code = pci.ci_channel_code
       left join d_account_stat ar
         on er.er_transaction_account_id = ar.as_transaction_account_id  
        and er.er_channel_code = ar.as_channel_code 
        <!-- and ar.as_INDIVIDUAL_OR_INSTITUTION = er.ER_INDIVIDUAL_OR_INSTITUTION -->
	        where 1=1
	        <if test="condition.transDate != null and condition.transDate != ''">
		 	and er_trans_date=#{condition.transDate,jdbcType=VARCHAR}
		 	</if>
	        <if test="condition.channelCode != null and condition.channelCode != '' ">
			and er_channel_code=#{condition.channelCode,jdbcType=VARCHAR}
			</if>
			<if test="condition.productCode != null and condition.productCode != '' ">
			and er_fund_code=#{condition.productCode,jdbcType=VARCHAR}
			</if>
			<if test="condition.transactionAacountId != null and condition.transactionAacountId != '' ">
			and er_transaction_account_id like ('%'|| #{condition.transactionAacountId,jdbcType=VARCHAR} ||'%') 
			</if>
			<if test="condition.businessCode != null and condition.businessCode != '' ">
			and er_business_code = #{condition.businessCode,jdbcType=VARCHAR}
			</if>
				<choose>
	   	  	<when test='condition.returnCode == "0000" '>
	   	  		and er_return_code = '0000'
	   	  	</when>
	   	  	<when test='condition.returnCode== "9999" '>
	   	  		and er_return_code &lt;&gt; '0000'
	   	  	</when>
	   	  </choose>
	   	  order by TRANSDATE desc 
	</select>
	
	<select id="selectPaperExchangeVol" parameterType="hashMap" resultType="string">
      select sum(case
             when r.er_business_code = '024' then
              0
             else
              r.er_application_amount
           end) - sum(case
                        when r.er_business_code = '024' then
                         r.er_application_vol
                        else
                         0
                      end) * 1 MAXVOL
        from d_exchange_req r
       where r.er_transaction_account_id in
             (select s.as_transaction_account_id
                from d_account_stat s
               where s.as_ta_account_id = #{ACCOUNTID,jdbcType = VARCHAR})
         and r.er_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
         and r.er_business_code in ('020', '022', '024')
         and r.er_valid_flag = '01'
         and r.er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
  </select>
  
  	<select id="selectTransLastDateTaSerialNo" parameterType="hashMap" resultType="string">
		select e.er_ta_serial_no taserialno
	      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode 
	      ,p.pi_channel_product_code
	       <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6">
	      ,c.cp_batch_no batchno
	      </if>
		      from p_product_info p, p_channel_product c
		     where p.pi_channel_product_code = c.cp_channel_product_code
		       and p.pi_channel_code=c.cp_channel_code
		       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
		       and c.cp_valid_flag = '01'
		       and c.cp_check_state = '01'
		       and p.pi_valid_flag not in('00','99')
			   and p.pi_check_state = '01'
			   and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
		       )T2
		 where e.er_ta_product_code=T2.fundcode 
		 and e.er_fund_code = t2.pi_channel_product_code
		 	<if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6">
		  		 and e.er_batch_no=T2.batchno(+)
		    </if>
	       and e.ER_RETURN_CODE = '0000'
		   and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
		   and e.er_trans_date = #{LASTDATE, jdbcType = VARCHAR} 
		   and e.er_business_code =#{BUSINESSCODE, jdbcType = VARCHAR} 
		   and (er_prement_data_stat = '0' or er_prement_data_stat is null)
		   and e.ER_VALID_FLAG='01'
  </select>
  
  <select id="selectCheckTaTconfirmData" parameterType="hashMap" resultType="integer">
		<!--create by yindy 替换开始 -->
         select count(e.er_ta_serial_no) taserialno
	     from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode,P.PI_IPO_BEGIN_DATE,P.PI_IPO_END_DATE
	     ,p.pi_channel_product_code 
	     <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6"> 
	     ,c.cp_batch_no batchno
	     </if> 
	     from p_product_info p, p_channel_product c
	     where p.pi_channel_product_code = c.cp_channel_product_code
	     and p.pi_channel_code=c.cp_channel_code
	     and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
	     and c.cp_valid_flag = '01'
	     and c.cp_check_state = '01'
	     <!--丰利F当天给成立数据  -->
	     <if test="PRODUCTTYPE== 0 ">
	     	and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
		    and to_date(p.PI_PRO_END_DATE,'yyyyMMdd')&gt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
	     </if>
	     <if test="PRODUCTTYPE != 0 ">
		     and to_date(p.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
		     and to_date(p.PI_PRO_END_DATE,'yyyyMMdd')&gt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
	     </if>
        and p.pi_valid_flag not in('00','99')
        and p.pi_check_state = '01'
        and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
        )T2
  		where e.er_ta_product_code=T2.fundcode and T2.pi_channel_product_code = e.er_fund_code 
    	 <if test="BATCHNOONOFF == 01  and PRODUCTTYPE==6"> 
            and e.er_batch_no=T2.batchno(+)
         </if> 
         and e.ER_RETURN_CODE = '0000'
   		and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
   		<!-- 该状态为，取出过成立数据之后，把标志值为3 -->
   		and e.er_prement_data_stat != '3'
   		and e.er_business_code = '020' AND E.ER_TRANS_DATE BETWEEN T2.PI_IPO_BEGIN_DATE AND T2.PI_IPO_END_DATE
        <!--替换结束  -->
  </select>
  
  
    <select id="selectCheckExchangereqData" parameterType="hashMap" resultType="integer">
	  select count(*) from (
	          select e.er_ta_serial_no
	            from d_exchange_req e
	           where  e.er_valid_flag = '01'
	             and e.er_return_code='0000')TT
	             where exists (select 1
			                  from (
			                  <!--create by yindy  替换函数 -->
			                  select  ER_TA_SERIAL_NO  TASERIALNO
						          from d_exchange_req,
						               (select c.L_CONTRACTSERIALNO,
						                       c.F_INTEREST,
						                       c.F_CONFIRMSHARES,
						                       c.C_REQUESTNO,
						                       c.F_CONFIRMBALANCE,
						                       c.D_CDATE,
						                       c.C_FUNDACCO
						                  from TA_TCONFIRM C
						                 where  C.c_businflag = '03'
						                 <if test="PRODUCTTYPE == 0 ">
						                 	and TO_CHAR(c.D_CDATE, 'YYYYMMDD') = #{TRANSDATE,jdbcType=VARCHAR}
						                 </if>
						                 <if test="PRODUCTTYPE != 0 ">
							                 and TO_CHAR(c.D_CDATE, 'YYYYMMDD') &gt;= #{LASTDATE,jdbcType=VARCHAR} 
							                 and TO_CHAR(c.D_CDATE, 'YYYYMMDD') &lt; #{TRANSDATE,jdbcType=VARCHAR} 
						                 </if>
						                   ) T,p_product_info i
						         where ER_IN_CONTRACT  = T.L_CONTRACTSERIALNO
						           and er_return_code = '0000'
						           and er_channel_code=i.pi_channel_code
						           and er_fund_code=i.pi_channel_product_code
						           and i.pi_product_type in ('0','5','6')
						           and i.pi_valid_flag in('01','02')
						           and i.pi_check_state='01'
						           and ER_CHANNEL_CODE = #{CHANNELCODE, jdbcType = VARCHAR}
			                  <!-- 替换结束 -->
			                  ) temp
			                 where temp.TASERIALNO = TT.er_ta_serial_no)
  </select>
  
  <select id="selectCheckBusinessCodeCount" parameterType="hashMap" resultType="integer">
  	     select count(*)
  	      from ( select * 
       from d_exchange_req, d_contract_info d
       <if test="FIXEDINCOME == 01">
       ,p_product_info i
       </if>
      where er_channel_code = d.dci_channel_code 
      	 and er_fund_code = d.dci_fund_code
      	 and er_in_contract = d.dci_in_contract
      	 and d.dci_valid_flag = '01'
         and er_business_code in 
      <foreach collection="ids" item="item" index="index" 	open="(" separator="," close=")">
      	#{item}
	  </foreach>
	      and er_channel_code=#{CHANNELCODE, jdbcType = VARCHAR}
	      and er_return_code='0000'
	      and er_valid_flag='01'
	       <if test="FIXEDINCOME == 01">
		        and i.pi_channel_code=er_channel_code
	      		and i.pi_channel_product_code=ER_FUND_CODE
	      		and i.pi_valid_flag in ('01', '02')
	      		and i.pi_check_state='01'
		      	and to_date(i.PI_PRO_SETUP_DATE,'yyyyMMdd')&lt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
	      </if>
	      )
        T  where exists
                 (select 1
                          from (
                          
                          <if test="FIXEDINCOME == 00">
						        select distinct c.CP_TA_PRODUCT_CODE fundcode
						          from p_product_info p, p_channel_product c
						         where p.pi_channel_product_code = c.cp_channel_product_code
						           and p.pi_channel_code=c.cp_channel_code
						           and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
						           and c.cp_valid_flag = '01'
						           and c.cp_check_state = '01'
						           and p.pi_valid_flag not in('00','99')
						         and p.pi_check_state = '01'
						         and p.pi_product_type in('1','2','3')
					      </if>
					      
					      <if test="FIXEDINCOME == 01">
						         <!--create by yindy 替换函数  -->
		                          select distinct c.CP_TA_PRODUCT_CODE fundcode
							      from p_product_info p, p_channel_product c
							     where p.pi_channel_product_code = c.cp_channel_product_code
							       and p.pi_channel_code=c.cp_channel_code
							       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
							       and c.cp_valid_flag = '01'
							       and c.cp_check_state = '01'
							       <!-- and p.pi_valid_flag not in('00','99','02') -->
							       and p.pi_valid_flag not in('00','99')
								   and p.pi_check_state = '01'
								   and p.pi_product_type in('4','5','6','7','8','9')
								   and not exists (
								   select 1 from ( 
										 select distinct t.erc_fund_code fundcode  from d_exchange_req_cfm t 
										 where t.erc_business_code ='142' 
										 and t.erc_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
									 	) temp where temp.fundcode = p.pi_channel_product_code
								 	)
								   <if test="DATEFLAG == 01">
								   	and to_date(p.PI_PRO_SETUP_DATE, 'yyyyMMdd') &lt;to_date(#{TRANSDATE, jdbcType = VARCHAR}, 'yyyyMMdd')
								   </if>
		                          <!-- 替换结束 -->
					      </if>
                          
                         
                          ) temp
                         where temp.fundcode = T.er_ta_product_code)
  </select>
  
  <select id="selectCurrencyFTransCount" parameterType="hashMap" resultType="integer" >
  select count(*)
  	      from (select * from d_exchange_req,d_contract_info d ,p_product_info i
			where er_channel_code = d.dci_channel_code 
			and er_fund_code = d.dci_fund_code
			and er_in_contract = d.dci_in_contract
			and d.dci_valid_flag = '01'
			and er_business_code = '020'
			and er_channel_code=#{CHANNELCODE, jdbcType = VARCHAR}
			and er_return_code='0000'
			and er_valid_flag='01'
			and i.pi_channel_code=er_channel_code
			and i.pi_channel_product_code=ER_FUND_CODE
			and i.pi_valid_flag in ('01', '02')
			and i.pi_check_state='01'
			and to_date(i.pi_pro_setup_date,'yyyyMMdd')&lt;=to_date(#{TRANSDATE, jdbcType = VARCHAR},'yyyyMMdd')
        ) T  where exists
		 (select 1 from  p_product_info p, p_channel_product c
			 where p.pi_channel_product_code = c.cp_channel_product_code
				 and p.pi_channel_code=c.cp_channel_code
				 and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
				 and c.cp_valid_flag = '01'
				 and c.cp_check_state = '01'
				 and p.pi_valid_flag not in('00','99')
				 and p.pi_check_state = '01'
				 and p.pi_product_type =#{FUNDTYPE,jdbcType=VARCHAR}
				 and not exists (
						 select 1 from d_exchange_req_cfm t 
							 where t.erc_business_code ='142' 
							 and t.erc_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
							 and t.erc_fund_code = p.pi_channel_product_code
						 )
			 and to_date(p.PI_PRO_SETUP_DATE, 'yyyyMMdd') &lt;=to_date(#{TRANSDATE, jdbcType = VARCHAR}, 'yyyyMMdd') 
			 and c.CP_TA_PRODUCT_CODE = T.er_ta_product_code)
  </select>
  
  <select id="select022024TradeCfmList" parameterType="Map" resultType="hashMap">
  		select <include refid="Base_Column_List_Req"/> ,
			       to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
	               nvl(T.F_CONFIRMBALANCE, 0) CONFIRMEDAMOUNT,
	               nvl(T.F_CONFIRMSHARES, 0) CONFIRMEDVOL,
	               <!--总费用  -->
			 	   t.f_totalfare charge,
			 	   <!-- 归属渠道的费用 -->
			 	   t.f_agencyfare agencyfee,
					<if test='BUSINESSCODE == "024"'>
				 		<!-- 归属基金资产的费用 -->
				 		f_fundfare OtherFee1,
				 		<!-- 业绩报酬 -->
						t.f_tafare achievementPay,<!--业绩报酬 -->
					</if>
	               0 FROMTAFLAG,
	               nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
		            #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
		           #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
		           from (
		           		select * from (select * from d_exchange_req  
		           		where er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR} 
				  		and er_return_code = '0000'
				        and er_business_code =#{BUSINESSCODE,jdbcType = VARCHAR}
				  		AND 
					  	<foreach collection="CFMDATELIST" index="index" item="item" separator="or" open="(" close=")">
					  		(ER_FUND_CODE = #{item.FUNDCODE,jdbcType = VARCHAR} AND ER_TRANS_DATE = #{item.TRANSDATE,jdbcType = VARCHAR})
					  	</foreach>
					  	) tt right join 
					  	
					  	(select c.F_CONFIRMSHARES, c.F_CONFIRMBALANCE, c.D_CDATE,dd.c_outrequestno,
					  	nvl(c.f_agencyfare,0) f_agencyfare,
					  	nvl(c.f_tafare,0) f_tafare,
					  	nvl(c.f_totalfare,0) f_totalfare,
					  	nvl(c.f_fundfare,0) f_fundfare
						  from TA_TCONFIRM C,
						       (select r.c_requestno,r.c_outrequestno
						          from ta_trequest r
						         where exists (select 1
						                  from (select t.er_ta_serial_no
						                          from d_exchange_req t
						                         where er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR} 
											  		and er_return_code = '0000'
											        and er_business_code =#{BUSINESSCODE,jdbcType = VARCHAR}
						                           AND 
						                           <foreach collection="CFMDATELIST" index="index" item="item" separator="or" open="(" close=")">
											  		(ER_FUND_CODE = #{item.FUNDCODE,jdbcType = VARCHAR} AND ER_TRANS_DATE = #{item.TRANSDATE,jdbcType = VARCHAR})
											  		</foreach>
						                           ) temp
						                 where r.c_outrequestno = temp.er_ta_serial_no)) dd
						 where dd.c_requestno = c.c_requestno
						 <if test='BUSINESSCODE == "022"'>
						 	and c.c_businflag in ('50','02')
						 </if>
						 <if test='BUSINESSCODE == "024"'>
							 and c.c_businflag = '03' 
						 </if>
						 ) t
						 on  tt.er_ta_serial_no = T.c_outrequestno	           
		           ) t 
  </select>
  
  <select id="queryEx022024TradeCfmList" parameterType="Map" resultType="hashMap" >
  	select <include refid="Base_Column_List_Req"/> ,
	       to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
             decode(t.er_currency_type,'840',nvl(f_confirmbalance,0),nvl(T.f_sumecbalance, 0)) CONFIRMEDAMOUNT,
              nvl(T.F_CONFIRMSHARES, 0) CONFIRMEDVOL,
              <if test='BUSINESSCODE == "022"'>
				 <!--总费用  -->
		 		t.f_totalfare charge,
		 		<!-- 归属渠道的费用 -->
		 		t.f_agencyfare agencyfee,
			 </if>
			 <if test='BUSINESSCODE == "024"'>
				 <!--总费用  -->
				t.f_totalfare charge ,
				<!-- 归属渠道的费用 -->
		 		t.f_agencyfare agencyfee,
		 		<!-- 归属基金资产的费用 -->
		 		f_fundfare OtherFee1,
		 		<!-- 业绩报酬 -->
				t.f_tafare achievementPay,<!--业绩报酬 -->
			 </if>
              0 FROMTAFLAG,
              nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
           #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
           #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
           from (
           		select * from (select * from d_exchange_req  
           		where er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR} 
		  		and er_return_code = '0000'
		        and er_business_code =#{BUSINESSCODE,jdbcType = VARCHAR}
		  		<if test="FUNDDATELIST != null">
		  			and 
		  			<foreach collection="FUNDDATELIST" index="index" item="item" separator="or" open="(" close=")">
		  			(er_fund_code = #{item.FUNDCODE,jdbcType = VARCHAR} 
		  				and er_trans_date &lt;= #{item.OPENDAY,jdbcType = VARCHAR})
				  	</foreach>
  				</if>
			  	) tt right join 
			  	
			  	(select c.f_confirmshares, 
				  	c.f_confirmbalance,
				  	c.f_sumecbalance, 
				  	c.d_cdate,
				  	c.c_outrequestno,
				  	nvl(c.f_agencyfare,0) f_agencyfare,
					nvl(c.f_tafare,0) f_tafare,
					nvl(c.f_totalfare,0) f_totalfare,
					nvl(c.f_fundfare,0) f_fundfare
				  from ta_vconfirm c 
				         where exists (select t.er_ta_serial_no
				                          from d_exchange_req t
				                         where er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR} 
									  		and er_return_code = '0000'
									        and er_business_code =#{BUSINESSCODE,jdbcType = VARCHAR}
				                          <if test="FUNDDATELIST != null">
									  			and 
									  			<foreach collection="FUNDDATELIST" index="index" item="item" separator="or" open="(" close=")">
									  			(er_fund_code = #{item.FUNDCODE,jdbcType = VARCHAR} 
									  				and er_trans_date &lt;= #{item.OPENDAY,jdbcType = VARCHAR})
											  	</foreach>
						  					</if>
						  					<if test='BUSINESSCODE == "024"'>
						  						and not exists (
												     select 1 from d_exchange_req_cfm c 
												     where c.erc_channel_code = t.er_channel_code 
												     and t.er_app_sheet_serial_no = c.erc_app_sheet_serial_no 
												     and t.er_fund_code = c.erc_fund_code 
												     and c.erc_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
												     and c.erc_send_status = '01'
												 )
						  					</if>
				  and t.er_ta_serial_no = c.c_outrequestno)
				 <if test='BUSINESSCODE == "022"'>
				 	and c.c_businflag in ('50','02')
				 </if>
				 <if test='BUSINESSCODE == "024"'>
					 and c.c_businflag = '03' 
				 </if>
				 and c.c_property='Q'
				 ) t
				 on  tt.er_ta_serial_no = t.c_outrequestno) t            
  </select>
  
  <select id="select022024TradeCount" parameterType="Map" resultType="Integer">
  		select count(1) from d_exchange_req t 
  		where er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR} 
  		and er_return_code = '0000'
        and er_business_code =#{BUSINESSCODE,jdbcType = VARCHAR}
        <if test="CFMDATELIST != null">
  			AND 
		  	<foreach collection="CFMDATELIST" index="index" item="item" separator="or" open="(" close=")">
		  		(ER_FUND_CODE = #{item.FUNDCODE,jdbcType = VARCHAR} AND ER_TRANS_DATE = #{item.TRANSDATE,jdbcType = VARCHAR})
		  	</foreach>
  		</if>
  </select>
  
  <update id="updateIsSetUpForFundType7" parameterType="Map">
  	    update p_channel_product t set t.cp_is_setup = '1' 
			    where t.cp_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
			    and exists (select 1 from p_product_info tt ,d_exchange_req_cfm erc 
					where tt.pi_channel_code = erc.erc_channel_code
					and tt.pi_channel_product_code = erc.erc_fund_code
					and tt.pi_valid_flag not in ('00','99') 
					and tt.pi_check_state = '01'
					and tt.pi_product_type = #{PRODUCTTYPE,jdbcType = VARCHAR}
					
					and erc.erc_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
				    and erc.erc_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
					
					and t.cp_channel_code = tt.pi_channel_code
					and t.cp_channel_product_code = tt.pi_channel_product_code
				)
  </update>
  
  
  <select id="select130cfmDiffValueCount" parameterType="Map" resultType="int">
  		select count(1) from (select nvl(t.erc_application_amount, 0)-nvl(t.erc_confirmed_amount, 0) diffvalue
           from d_exchange_req_cfm t
           where t.erc_business_code = '130'
           and t.erc_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
           and t.erc_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
           and exists (
			  select 1 from p_product_info p 
	          where p.pi_channel_code = t.erc_channel_code 
	          and t.erc_fund_code = p.pi_channel_product_code
	          and p.pi_currency_type = '156' 
			  and p.pi_channel_product_code = t.erc_fund_code
			  and p.pi_valid_flag not in ( '00','99')
			  and p.pi_check_state = '01'
			  and p.pi_product_type not in ('8','9')
	        )
           ) t
 		where diffvalue != 0
  </select>
  
  <select id="queryEx020024TradeCount" parameterType="Map" resultType="Integer">
  		select count(1) from d_exchange_req t 
  		where er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR} 
  		and er_return_code = '0000'
        and er_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
  		<if test="FUNDDATELIST != null">
  			and 
  			<foreach collection="FUNDDATELIST" index="index" item="item" separator="or" open="(" close=")">
  			(er_fund_code = #{item.FUNDCODE,jdbcType = VARCHAR} 
  				and er_trans_date &lt;= #{item.OPENDAY,jdbcType = VARCHAR})
		  	</foreach>
  		</if>
  		<if test='BUSINESSCODE == "020"'>
  			and er_prement_data_stat != 3 
  		</if>
  		<if test='BUSINESSCODE == "024" '>
  			and not exists (
				select 1 from d_exchange_req_cfm c 
				where c.erc_channel_code = t.er_channel_code 
				and t.er_app_sheet_serial_no = c.erc_app_sheet_serial_no 
				and t.er_fund_code = c.erc_fund_code 
				and c.erc_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
				and c.erc_send_status = '01'
			)
  		</if>
  		
  </select>
  
  <select id="queryMuTradeCfmList" resultType="hashMap" parameterType="hashMap">
  	select TT.* from (
    select ER_CHANNEL_CODE CHANNELCODE,
	       ER_TRANS_DATE  BUSINESSDATE,
	       ER_APP_SHEET_SERIAL_NO APPSHEETSERIALNO,
	       ER_FUND_CODE FUNDCODE,
	       ER_LARGE_REDEMPTION_FLAG LARGEREDEMPTIONFLAG,
	       ER_TRANSACTION_DATE TRANSACTIONDATE,
	       ER_TRANSACTION_TIME TRANSACTIONTIME,
	       ER_TRANSACTION_ACCOUNT_ID TRANSACTIONACCOUNTID,
	       ER_DISTRIBUTOR_CODE DISTRIBUTORCODE,
	       ER_APPLICATION_VOL APPLICATIONVOL,
	       ER_APPLICATION_AMOUNT APPLICATIONAMOUNT,
	       ER_TA_ACCOUNT_ID TAACCOUNTID,
	       ER_DISCOUNT_RATE_OF_COMM DISCOUNTRATEOFCOMMISSION,
	       ER_DEPOSIT_ACCT DEPOSITACCT,
	       ER_REGION_CODE REGIONCODE,
	       <!-- 20200121  统一美元币种确认 -->
	       '840' CURRENCYTYPE,
	       ER_BRANCH_CODE BRANCHCODE,
	       ER_ORIGINAL_APP_SHEET_NO ORIGINALAPPSHEETNO,
	       ER_ORIGINAL_SUBS_DATE ORIGINALSUBSDATE,
	       ER_INDIVIDUAL_OR_INSTITUTION INDIVIDUALORINSTITUTION,
	       ER_VALID_PERIOD VALIDPERIOD,
	       ER_DAYS_REDEMPTION_IN_ADVANCE DAYSREDEMPTIONINADVANCE,
	       ER_REDEMPTION_DATE_IN_ADVANCE REDEMPTIONDATEINADVANCE,
	       ER_ORIGINAL_SERIAL_NO ORIGINALSERIALNO,
	       ER_DATE_OF_PERIODIC_SUBS DATEOFPERIODICSUBS,
	       ER_TA_SERIAL_NO TASERIALNO,
	       ER_TERM_OF_PERIODIC_SUBS TERMOFPERIODICSUBS,
	       ER_FUTURE_BUY_DATE FUTUREBUYDATE,
	       ER_TARGET_DISTRIBUTOR_CODE TARGETDISTRIBUTORCODE,
	       ER_TARGET_BRANCH_CODE TARGETBRANCHCODE,
	       ER_TARGET_TRANSACT_ACCT_CODE TARGETTRANSACTIONACCOUNTID,
	       ER_TARGET_REGION_CODE TARGETREGIONCODE,
	       ER_DIVIDEND_RATIO DIVIDENDRATIO,
	       ER_SPECIFICATION SPECIFICATION,
	       ER_CODE_OF_TARGET_FUND CODEOFTARGETFUND,
	       ER_TOTAL_BACKEND_LOAD TOTALBACKENDLOAD,
	       ER_SHARE_CLASS SHARECLASS,
	       ER_ORIGINAL_CFM_DATE ORIGINALCFMDATE,
	       ER_DETAIL_FLAG DETAILFLAG,
	       ER_ORIGINAL_APP_DATE ORIGINALAPPDATE,
	       ER_DEF_DIVIDEND_METHOD DEFDIVIDENDMETHOD,
	       ER_FROZEN_CAUSE FROZENCAUSE,
	       ER_FREEZING_DEADLINE FREEZINGDEADLINE,
	       ER_VARIETY_CODE_PERIODIC_SUB VARIETYCODEOFPERIODICSUBS,
	       ER_SERIAL_NO_PERIODIC_SUB SERIALNOOFPERIODICSUBS,
	       ER_RATION_TYPE RATIONTYPE,
	       ER_TARGET_TA_ACCOUNT_ID TARGETTAACCOUNTID,
	       ER_TARGET_REGISTRAR_CODE TARGETREGISTRARCODE,
	       ER_NET_NO NETNO,
	       ER_CUSTOMER_NO CUSTOMERNO,
	       ER_TARGET_SHARE_TYPE TARGETSHARETYPE,
	       ER_RATION_PROTOCOL_NO RATIONPROTOCOLNO,
	       ER_BEGIN_DATE_PERIODIC_SUBS BEGINDATEOFPERIODICSUBS,
	       ER_END_DATE_OF_PERIODIC_SUBS ENDDATEOFPERIODICSUBS,
	       ER_SEND_DAY_OF_PERIODIC_SUBS SENDDAYOFPERIODICSUBS,
	       ER_BROKER BROKER,
	       ER_SALES_PROMOTION SALESPROMOTION,
	       ER_ACCEPT_METHOD ACCEPTMETHOD,
	       ER_FORCE_REDEMPTION_TYPE FORCEREDEMPTIONTYPE,
	       ER_TAKE_INCOME_FLAG TAKEINCOMEFLAG,
	       ER_PURPOSE_OF_PE_SUBS PURPOSEOFPESUBS,
	       ER_FREQUENCY_OF_PE_SUBS FREQUENCYOFPESUBS,
	       ER_PERIOD_SUB_TIME_UNIT PERIODSUBTIMEUNIT,
	       ER_BATCH_NUM_OF_PESUBS BATCHNUMOFPESUBS,
	       ER_CAPITAL_MODE CAPITALMODE,
	       ER_DETAIL_CAPTICAL_MODE DETAILCAPTICALMODE,
	       ER_BACKENLOAD_DISCOUNT BACKENLOADDISCOUNT,
	       ER_COMBINE_NUM COMBINENUM,
	       ER_FUTURE_SUBSCRIBE_DATE FUTURESUBSCRIBEDATE,
	       ER_TRADING_METHOD TRADINGMETHOD,
	       ER_LARGE_BUY_FLAG LARGEBUYFLAG,
	       ER_CHARGE_TYPE CHARGETYPE,
	       ER_SPECIFY_RATE_FEE SPECIFYRATEFEE,
	       ER_SPECIFY_FEE  SPECIFYFEE,
	       ER_PRO_YIELD_TYPE PROYIELDTYPE,
	       ER_PRO_YIELD     PROYIELD,
	       ER_IN_CONTRACT  INCONTRACT,
	       ER_OUT_CONTRACT  OUTCONTRACT,
	       ER_VALID_FLAG  VALIDFLAG,
	       ER_RETURN_CODE RETURNCODE,
	       ER_EXPECTED_CFM_DATE EXPECTEDCFMDATE,
	       ER_ERROR_DEC ERRORDEC,
	       ER_TA_PRODUCT_CODE TAPRODUCTCODE,
	       ER_BATCH_NO  BATCHNO, 
           to_char(nvl(T.D_CDATE, sysdate), 'YYYYMMDD') as DCDATE,
           t.f_sumecbalance CONFIRMEDAMOUNT,
           T.F_CONFIRMSHARES CONFIRMEDVOL,
            <!--费用支付金额  20200121  -->
	 		t.f_ecagencyfare charge,
	 		<!-- 归属渠道的费用 -->
	 		t.f_agencyfare agencyfee,
           '1' FROMTAFLAG,
           nvl((select F_NETVALUE from (select k.F_NETVALUE,k.C_FUNDCODE from CRM_TFUNDDAY k order by k.D_DATE DESC )  WHERE ROWNUM = 1 and  C_FUNDCODE = er_ta_product_code),'1') AS NAV,
           '130' BUSINESSCODE,
	      #{TRANSDATE,jdbcType=VARCHAR} DOWNLOADDATE,
	      #{TRANSDATE,jdbcType=VARCHAR} TRANSDATE
       from d_exchange_req , (
       		select v.c_outrequestno,
				nvl(v.f_sumbalance,0) f_sumbalance,
				nvl(v.f_sumecbalance,0) f_sumecbalance,
				nvl(v.f_confirmshares,0) f_confirmshares,
				v.d_cdate,
				nvl(v.f_agencyfare,0) f_agencyfare,
				nvl(v.f_tafare,0) f_tafare,
				nvl(v.f_totalfare,0) f_totalfare,
				nvl(v.f_fundfare,0) f_fundfare,
				nvl(v.f_ecagencyfare ,0) f_ecagencyfare
				from ta_vconfirm v 
				where v.c_businflag in ('50', '02')
				and v.c_property='Q'
				and v.d_expectdate &gt;= to_date(#{LASTDATE,jdbcType = VARCHAR},'yyyymmdd')
				and v.d_expectdate &lt; to_date(#{TRANSDATE,jdbcType = VARCHAR},'yyyymmdd')
         ) T
       where er_ta_serial_no=T.c_outrequestno
       and er_return_code = '0000'
       and ER_CHANNEL_CODE =#{CHANNELCODE,jdbcType=VARCHAR}
       and er_valid_flag='01'
        )TT 
       where exists (select 1
                 from (
	                 <!--create by yindy 替换开始  -->
	                 select e.er_ta_serial_no taserialno
				      from d_exchange_req e,(select distinct c.cp_ta_product_code fundcode,P.PI_IPO_BEGIN_DATE,P.PI_IPO_END_DATE
				      ,p.pi_channel_product_code
				      from p_product_info p, p_channel_product c
				       where p.pi_channel_product_code = c.cp_channel_product_code
				       and p.pi_channel_code=c.cp_channel_code
				       and c.cp_channel_code = #{CHANNELCODE,jdbcType=VARCHAR}
				       and c.cp_valid_flag = '01'
				       and c.cp_check_state = '01'
			           and p.pi_valid_flag not in('00','99')
			           and p.pi_check_state = '01'
			           and p.pi_product_type=#{PRODUCTTYPE, jdbcType = VARCHAR} 
			           )T2
			     		where e.er_ta_product_code=T2.fundcode and T2.pi_channel_product_code = e.er_fund_code 
			         and e.ER_RETURN_CODE = '0000'
			         and e.er_channel_code = #{CHANNELCODE, jdbcType = VARCHAR}
			         <if test="FUNDDATELIST != null">
				  		and
				  			<foreach collection="FUNDDATELIST" index="index" item="item" separator="or" open="(" close=")">
				  			(er_fund_code = #{item.FUNDCODE,jdbcType = VARCHAR} 
				  				and er_trans_date &lt;= #{item.OPENDAY,jdbcType = VARCHAR})
						  	</foreach>
				  		</if>
			       	<!-- 该状态为，取出过成立数据之后，把标志值为3 -->
			         and e.er_prement_data_stat != '3'
			         and e.er_business_code = '020' 
	                 <!-- 替换结束 -->
	                 ) temp
                where temp.taserialno = TT.TASERIALNO)
  </select>
  
  <select id="query024CfmData" resultType="hashMap" parameterType="hashMap" >
  	select tt.erc_channel_code channelcode, t.dci_fund_code fundcode,t.dci_in_contract incontract,t.dci_out_contract outcontract from ( select distinct t.erc_channel_code,t.erc_transaction_account_id,t.erc_fund_code from d_exchange_req_cfm t 
		where t.erc_return_code = '0000'
		and t.erc_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
		and t.erc_business_code = '024'
		and t.erc_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
		and exists (select 1 from p_product_info p 
			where p.pi_channel_code = t.erc_channel_code 
			and  t.erc_fund_code = p.pi_channel_product_code 
			and p.pi_valid_flag not in ('00','99') 
			and p.pi_product_type = '9' )
		) tt ,
		d_contract_info t 
		where tt.erc_channel_code = t.dci_channel_code 
		and tt.erc_transaction_account_id = t.dci_trans_action_account 
		and tt.erc_fund_code = t.dci_fund_code
		and t.dci_valid_flag = '01'
		and  exists (
       		select t1.f_remainshares_sams F_REMAINSHARES  from 
         	TJ_CONTRACTDETAILS T1, TA_TTRUSTCONTRACTDETAILS T2 WHERE T1.L_CONTRACTSERIALNO=T2.L_SERIALNO 
	        and T1.C_FUNDCODE = t.dci_product_code
            and T1.L_CONTRACTSERIALNO = t.DCI_IN_CONTRACT 
            and T1.C_TRUSTCONTRACTID = t.DCI_OUT_CONTRACT 
		    and T1.f_remainshares_sams = 0 
    	    )
  </select>
  
  
  <update id="batchUpdateMultipToFailed" parameterType="java.util.List">
  	<foreach collection="list" item="item" index="index" open="begin" close=";end;" separator=";">
            update d_exchange_req set 
            er_valid_flag = '00',
            er_return_code = '9999',
            er_error_dec = '多币种赎回,同一赎回区间,一个合同只允许单币种赎回！'
            where ER_TRANS_DATE = #{item.TRANSDATE,jdbcType = VARCHAR}
  		 	and ER_CHANNEL_CODE =#{item.CHANNELCODE,jdbcType = VARCHAR}
  		 	and ER_APP_SHEET_SERIAL_NO =#{item.APPSHEETSERIALNO,jdbcType = VARCHAR}
  		 	and ER_FUND_CODE=#{item.FUNDCODE,jdbcType = VARCHAR}
        </foreach>
  </update>
  
  
  <select id="queryMultipleRedeemFund" parameterType="map" resultType="String">
  	select distinct t.er_fund_code from d_exchange_req t 
		where t.er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
		and t.er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
		and t.er_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
		and t.er_valid_flag = '01'
		and t.er_return_code = '0000'
		and exists (
		    select * from p_product_info p
				where p.pi_valid_flag not in ('00','99')
		    and p.pi_check_state = '01'
				and p.pi_product_type = '8'
				and p.pi_channel_code = t.er_channel_code
				and p.pi_channel_product_code = t.er_fund_code
		)
  </select>
  <select id="queryOneAccoMoreTrans" parameterType="map" resultType="map">
  	select  e.er_channel_code channelcode,
			e.er_app_sheet_serial_no appsheetserialno,
			e.er_transaction_account_id transactionaccountid,
			e.er_currency_type currencytype,
			e.er_fund_code fundcode,
			e.er_trans_date transdate  from d_exchange_req e 
		where e.er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
		and e.er_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
		and e.er_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
		and e.er_valid_flag = '01'
		and e.er_return_code = '0000'
		and e.er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
		<if test="TRANSACCOLIST != null">
			and e.er_transaction_account_id in
			<foreach collection="TRANSACCOLIST" item = "item" separator="," open="(" close=")">
				#{item,jdbcType = VARCHAR}
			</foreach>
		</if>
		<if test="TRANSACCOLIST == null ">
			and e.er_transaction_account_id in (
			       select er_transaction_account_id from d_exchange_req t 
						 where t.er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
						 and t.er_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
						 and t.er_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
						 and t.er_valid_flag = '01'
			       and t.er_return_code = '0000'
						 and t.er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
						 group by t.er_transaction_account_id having count(t.er_transaction_account_id) > 1
			)
		</if>
		order by e.er_transaction_account_id asc ,to_date(er_transaction_date || er_transaction_time,'YYYYMMDDHH24MISS') asc
		
  </select>
  
  <select id="queryAllTransList" parameterType="map" resultType="map">
  	select 
	  	t.er_channel_code channelcode,
	  	t.er_fund_code fundcode,
	  	t.er_trans_date transdate,
	  	t.er_app_sheet_serial_no appsheetserialno,
	  	t.er_transaction_account_id transactionaccountid,
	  	t.er_currency_type currencytype ,
	  	e.er_transaction_account_id firsttransactionaccountid,
	  	e.er_currency_type firstcurrencytype from d_exchange_req t 
		left join (select distinct e.er_channel_code,e.er_transaction_account_id,e.er_fund_code,e.er_currency_type from d_exchange_req e 
						where e.er_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
						and e.er_valid_flag = '01'
						and e.er_return_code = '0000'
						and e.er_trans_date &gt;= #{FIRSTDAY,jdbcType = VARCHAR}
						and e.er_trans_date &lt; #{TRANSDATE,jdbcType = VARCHAR}) e 
		on t.er_channel_code = e.er_channel_code
		and t.er_transaction_account_id = e.er_transaction_account_id 
		and t.er_fund_code = e.er_fund_code
		
		where t.er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR} 
		and t.er_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
		and t.er_business_code = #{BUSINESSCODE,jdbcType = VARCHAR}
		and t.er_valid_flag = '01'
		and t.er_return_code = '0000'
		and t.er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
  </select>
  <select id="getTransDate024Exchange" parameterType="map" resultType="map">
  	   select distinct t.er_channel_code CHANNELCODE,
  	   t.er_fund_code FUNDCODE,
       t.er_ta_product_code TAPRODUCTCODE,
       t.er_transaction_account_id TRANSACTIONACCOUNTID,
       t.er_ta_account_id TAACCOUNTID,
       t.er_in_contract INCONTRACT,
       t.er_trans_date TRANSDATE,
       d.as_individual_or_institution INDIORINST,
       p.pi_product_type FUNDTYPE,
       p.PI_INDI_MIN_VOL INDIMINVOL,
       p.PI_INST_MIN_VOL INSTMINVOL  
  from d_exchange_req t, p_product_info p,d_account_stat d
 where t.er_channel_code = p.pi_channel_code
   and t.er_channel_code =d.as_channel_code
   and t.er_fund_code = p.pi_channel_product_code
   and t.er_transaction_account_id=d.as_transaction_account_id
   and t.er_ta_account_id=d.as_ta_account_id
   and t.er_channel_code=#{CHANNELCODE,jdbcType = VARCHAR}
   and t.er_business_code='024'
   and t.er_return_code='0000'
   and t.er_trans_date=#{TRANSDATE,jdbcType = VARCHAR}
   and p.pi_valid_flag='01'
   and p.pi_check_state not in('00','99')
  </select>
  
 <select id="get024ExchangeByTaAccountId" parameterType="map" resultType="map">
  	select   
  	   <include refid="Base_Column_List_Req"/> 
     from d_exchange_req 
    where er_channel_code =#{CHANNELCODE,jdbcType = VARCHAR}
      and er_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
      and er_business_code = '024'
      and er_return_code='0000'
      and er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
      and er_ta_account_id = #{TAACCOUNTID,jdbcType = VARCHAR}
      order by er_application_vol  desc
  </select> 
  
  <select id="getSumVol024Exchange" parameterType="Map" resultType="String">
  	select   sum(er_application_vol) sumApplicationVol
     from d_exchange_req 
    where er_channel_code =#{CHANNELCODE,jdbcType = VARCHAR}
      and er_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
      and er_business_code = '024'
      and er_return_code='0000'
      and er_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
      and er_ta_account_id = #{TAACCOUNTID,jdbcType = VARCHAR}
      order by er_application_vol  desc
  </select>   
  
   <select id="getExchangeTmpById" parameterType="map" resultType="map">
  	select   
  	   <include refid="Base_Column_List_Req"/> 
     from d_exchange_req 
    where er_Id = #{ID,jdbcType = VARCHAR}
  </select>  
  
  <update id="upReturnBackExchangeData" parameterType="Map">
		update d_exchange_req t
		   set t.er_valid_flag = '00',
		        t.er_return_code = '9999',
		        t.er_error_dec = '手动置失败'
		 where t.er_channel_code =#{CHANNELCODE,jdbcType= VARCHAR}
		   and t.er_trans_date =#{BUSINESSDATE,jdbcType= VARCHAR}
		   and t.er_ta_account_id =#{TAACCOUNTID,jdbcType= VARCHAR}
		   and t.er_id =#{ID,jdbcType= VARCHAR}
  </update>
  
  <select id="query052OriginalTrans" parameterType="map" resultType="map">
  	select <include refid="Base_Column_List_Req_BUSCODE"/> from d_exchange_req t 
		where t.er_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
		and t.er_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
		and t.er_transaction_account_id = #{TRANSACTIONACCOUNTID,jdbcType = VARCHAR}
		and t.er_app_sheet_serial_no = #{ORIGINALAPPSHEETNO,jdbcType = VARCHAR}
		and t.er_valid_flag = '01'
		and t.er_return_code = '0000' 
		and not exists(
        select 1 from d_exchange_req_cfm tt 
				where tt.erc_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
				and tt.erc_fund_code = #{FUNDCODE,jdbcType = VARCHAR}
				and tt.erc_transaction_account_id = #{TRANSACTIONACCOUNTID,jdbcType = VARCHAR}
				and tt.erc_app_sheet_serial_no = #{ORIGINALAPPSHEETNO,jdbcType = VARCHAR}
				and tt.erc_return_code = '0000'
				and tt.erc_business_code != '020'
		)
  </select>
  <select id="query052OriginalRequestNo" parameterType="map" resultType="String">
  	select t.c_requestno from ta_trequest t where 
		t.c_outrequestno = #{TASERIALNO,jdbcType = VARCHAR}
		and t.c_fundacco = #{TAACCOUNTID,jdbcType = VARCHAR}
		and t.c_fundcode = #{TAPRODUCTCODE,jdbcType = VARCHAR}
		and t.l_contractserialno = #{INCONTRACT,jdbcType = VARCHAR}
		and t.c_trustagencyno = #{CHANNELCODE,jdbcType = VARCHAR}
  </select>

    <update id="updateBusinessCodeForpartialAllotment" parameterType="map">
      update d_exchange_req_cfm c set c.erc_actual_business_code = '142'
        where c.erc_business_code = '150'
        and c.erc_trans_date = #{TRANSDATE,jdbcType = VARCHAR}
        and c.erc_channel_code = #{CHANNELCODE,jdbcType = VARCHAR}
        and exists (
            select t.f_remainshares_sams f_remainshares  from
            tj_contractdetails t,d_contract_info n
            where t.c_fundcode =n.dci_product_code
            and t.l_contractserialno = n.dci_in_contract
            and t.c_trustcontractid = n.dci_out_contract
            and t.c_fundacco = n.dci_ta_account_id
            and t.f_remainshares_sams != 0
            and n.dci_valid_flag = '01'
            and c.erc_channel_code = n.dci_channel_code
            and c.erc_fund_code = n.dci_fund_code
            and c.erc_app_sheet_serial_no = n.dci_app_sheet_serial_no

    )
    </update>
</mapper>