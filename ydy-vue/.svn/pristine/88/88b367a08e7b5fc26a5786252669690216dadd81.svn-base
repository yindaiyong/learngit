<template>
    <layout-page-list title="报表权限管理页面">
        <div class="options">
            <el-form :inline="true" label-width="80px">
                <el-form-item label-position="left">
                    <label style="padding-right:12px;">选择角色</label>
                    <el-select size="mini" v-model="searchRoleCode" placeholder="请选择角色" @change="changeRole">
                            <el-option
                                v-for="item in roleCodes"
                                :key="item.id"
                                :label="item.name"
                                :value="item.id"
                            ></el-option>
                    </el-select>
                </el-form-item>
                <el-form-item>
                    <el-button type="primary" size="mini" @click="showAddAuthForm()">分配权限</el-button>
                </el-form-item>
            </el-form>
        </div>

        <el-dialog title="分配报表权限" :visible.sync="authReportFormVisible" :close-on-click-modal="false" :append-to-body="true" width="68%">
            <div>
                <el-row>
                    <el-col :span="12">角色 : <span style="color:red;">{{authReportRoleName}}</span></el-col>
                    <el-col :span="12">
                        <label style="padding-right:12px;">报表大类</label>
                        <el-select size="mini" v-model="authReportClassPowerCode" placeholder="请选择报表大类" @change="changeClassPower">
                            <el-option
                                v-for="item in classPowers"
                                :key="item.id"
                                :label="item.name"
                                :value="item.id"
                            ></el-option>
                        </el-select>
                    </el-col>
                </el-row>
            </div>
            <div style="margin-top:20px;">
                <el-transfer
                    :titles="['未分配权限', '当前选择权限']"
                    v-model="selectedFormPowers"
                    :data="unselectedFormPowers"
                    :render-content="renderAuthReportForm"
                    class="subcate-transfer"
                >
                    <el-button class="transfer-footer" slot="left-footer" size="small" @click="resetAuthReportForm()">重置</el-button>
                    <el-button type="primary" class="transfer-footer" slot="right-footer" size="small" @click="submitAuthReportForm()">提交权限</el-button>
                </el-transfer>
            </div>
        </el-dialog>

        <el-table
            :data="tableData"
            border
            height="460"
            size="mini"
            style="width: 100%">
                <el-table-column show-overflow-tooltip align="center" prop="roleName" label="角色名称" width="160"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" prop="classPowerName" label="报表大类" width="180"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" prop="formPowerName" label="报表名称"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" label="状态" width="160">
                    <template slot-scope="scope">
                        {{ scope.row.status | statusNameFormat }}
                    </template>
                </el-table-column>
                <el-table-column show-overflow-tooltip align="center" label="操作" width="220">
                    <template slot-scope="scope">
                        <el-button
                        size="mini"
                        type="primary"
                        @click="handleUseStatus(scope.$index, scope.row)">启停</el-button>
                        <el-button
                        size="mini"
                        type="primary"
                        @click="handleDelete(scope.$index, scope.row)">删除</el-button>
                    </template>
                </el-table-column>
        </el-table>

        <el-pagination
            background
            layout="total, sizes, prev, pager, next, jumper"
            :page-sizes="[10, 20, 30, 50]"
            :total="tableTotal"
            :page-size="tablePageSize"
            :current-page="tableCurrentPage"
            @current-change="handleCurrentChange"
            @size-change="handleSizeChange"
        >
        </el-pagination>
    </layout-page-list>
</template>

<script>
import LayoutPageList from "layout/LayoutPageList.vue";
export default {
    components: {
        LayoutPageList
    },
    data() {
        return {
            searchRoleCode: '',
            //user table lists
            tableData: [],
            tableTotal : 0,
            tablePageSize: 10,
            tableCurrentPage: 1,
            roleCodes:[],
            //auth report form
            authReportRoleName: '',
            authReportClassPowerCode: '',
            classPowers: [],
            authReportFormVisible: false,
            selectedFormPowers: [],
            unselectedFormPowers: [],
            unselectedFormPowersBackup: [],
        }
    },
    methods: {
        getRoleCombox() {
            this.$api.RoleComboBox({}).then(res => {
                this.roleCodes = res.data;
            }).catch(err => {
                this.$commsgbox.alert(err);
            });
        },
        changeRole(id) {
            let obj = this.roleCodes.find((item)=>{
                return item.id === id;
            });
            this.authReportRoleName = obj.name;
            this.searchAuthByRole();
        },
        searchAuthByRole() {
            let req = {
                roleCode: this.searchRoleCode,
                nowpage: this.tableCurrentPage,
                pagesize: this.tablePageSize,
                sort : 'id',
                order: 'desc'
            };

            this.$api.AuthReportQuery(req).then(res => {
                this.tableTotal = res.data.total;
                this.tableData = res.data.rows;
            }).catch(err => {
                this.$commsgbox.alert(err);
            });
        },
        handleCurrentChange(val) {
            this.tableCurrentPage = val;
            this.searchAuthByRole();
        },
        handleSizeChange(val) {
            this.tablePageSize = val;
            this.searchAuthByRole();
        },
        handleUseStatus(index, row) {
            this.$commsgbox.confirm().then(() => {
                let nowStatus = row.status;
                if(nowStatus == 0){
                    nowStatus = 1;
                }else{
                    nowStatus = 0;
                }
                let req = {"roleCode":row.roleCode, "formPowerCode":row.formPowerCode, "status":nowStatus};
                this.$api.AuthReportUpStatus(req).then(() => {
                    this.searchAuthByRole()
                }).catch(err => {
                    this.$commsgbox.alert(err);
                });
            }).catch(() => {

            });
        },
        handleDelete(index, row) {
            this.$commsgbox.confirm('此操作将删除该数据, 是否继续?').then(() => {
                let req = {"roleCode":row.roleCode, "formPowerCode":row.formPowerCode};
                this.$api.AuthReportDel(req).then(() => {
                    this.searchAuthByRole();
                }).catch(err => {
                    this.$commsgbox.alert(err);
                });
            }).catch(() => {

            });
        },
        // auth dialog
        showAddAuthForm() {
            if(this.searchRoleCode == ''){
                this.$commsgbox.alert('请选择要分配权限的角色.');
                return false;
            }
            this.clearAuthReportForm();
            this.$api.CategoryClassCombox({}).then(res => {
                this.classPowers = res.data;
            }).catch(err => {
                this.$commsgbox.alert(err);
            });
            this.authReportFormVisible = true;
        },
        changeClassPower() {
            if(this.searchRoleCode == '' || this.authReportClassPowerCode == ''){
                this.$commsgbox.alert('请选择大类和角色.');
                return false;
            }
            let req = {
                roleCode: this.searchRoleCode,
                classCode: this.authReportClassPowerCode,
                nowpage: 1,
                pagesize: 1000,
                sort : 'id',
                order: 'desc'
            };
            this.$api.CategoryFormCombox(req).then(res => {
                let resdata = res.data.rows;
                const responsedata = [];
                resdata.forEach((obj) => {
                    responsedata.push({
                        label: obj.sysFormName,
                        key: obj.sysFormCode
                    });
                });
                this.unselectedFormPowers = responsedata;
                this.unselectedFormPowersBackup = this.unselectedFormPowers;
                this.resetAuthReportForm();
            }).catch(err => {
                this.$commsgbox.alert(err);
            });
        },
        submitAuthReportForm() {
            if(this.authReportClassPowerCode == ''){
                this.$commsgbox.alert('请选择报表大类.');
                return false;
            }
            let req = {
                roleCode: this.searchRoleCode,
                classPowerCode: this.authReportClassPowerCode,
                formCodeList: this.selectedFormPowers
            };
            this.$api.AuthReportAddForRole(req).then(() => {
                this.authReportFormVisible = false;
                this.tableCurrentPage = 1;
                this.searchAuthByRole();
            }).catch(err => {
                this.$commsgbox.alert(err);
            });
        },
        resetAuthReportForm() {
            this.unselectedFormPowers = this.unselectedFormPowersBackup;
            this.selectedFormPowers = []
        },
        clearAuthReportForm() {
            this.authReportClassPowerCode = '';
            this.unselectedFormPowers = [];
            this.unselectedFormPowersBackup = [];
            this.selectedFormPowers = []
        },
        renderAuthReportForm(h, option) {
            return <span title={ option.label }>{ option.label }</span>;
        }
    },
    created() {
        this.getRoleCombox();
        this.searchAuthByRole();
    },
    filters: {
        statusNameFormat: function(statusVal){
            let statusName = statusVal;
            if(statusVal == 0) { statusName = '停用' }
            else if(statusVal == 1) { statusName = '启用' }
            return statusName;
        }
    }
}
</script>

<!-- scoped对原始标签限制作用域在当前页面，对于外部引用的元素插件无效 -->
<style lang="scss" scoped>
.options {
    text-align:left;
    margin-bottom:5px;
}
.el-table {
    padding : 5px 20px;
}

</style>
<!-- 不要添加scoped -->
<style lang="scss">
.subcate-transfer {
    .el-transfer-panel {
        text-align: left;
        min-width: 38%;
    }
}
</style>