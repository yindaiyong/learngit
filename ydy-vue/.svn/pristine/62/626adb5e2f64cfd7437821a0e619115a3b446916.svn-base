<template>
    <layout-page-list title="机构管理页面" ref="layoutRefs"> <!-- 这个ref不能删除 -->
        <div class="options">
            <el-button type="primary" size="medium" @click="addOrganFormVisible = true">新增机构</el-button>
        </div>

        <el-dialog title="新增机构" :visible.sync="addOrganFormVisible" :close-on-click-modal="false" :append-to-body="true">
            <el-form :model="addOrganForm" :rules="addOrganFormRules" ref="addOrganForm">
                <el-form-item label="机构名称" :label-width="addOrganFormLabelWidth" prop="orgName">
                    <el-input v-model="addOrganForm.orgName" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="机构地址" :label-width="addOrganFormLabelWidth" prop="orgAddress">
                    <el-input v-model="addOrganForm.orgAddress" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="机构信息描述" :label-width="addOrganFormLabelWidth" prop="remarks">
                    <el-input v-model="addOrganForm.remarks" autocomplete="off"></el-input>
                </el-form-item>
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="resetAddOrganForm('addOrganForm')">重 置</el-button>
                <el-button type="primary" @click="submitAddOrganForm('addOrganForm')">立即新增</el-button>
            </div>
        </el-dialog>

        <el-dialog title="修改机构" :visible.sync="updateOrganFormVisible" :close-on-click-modal="false" :append-to-body="true">
            <el-form :model="updateOrganForm" :rules="updateOrganFormRules" ref="updateOrganForm">
                <el-form-item label="机构名称" :label-width="updateOrganFormLabelWidth" prop="orgName">
                    <el-input v-model="updateOrganForm.orgName" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="机构地址" :label-width="updateOrganFormLabelWidth" prop="orgAddress">
                    <el-input v-model="updateOrganForm.orgAddress" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="机构信息描述" :label-width="updateOrganFormLabelWidth" prop="remarks">
                    <el-input v-model="updateOrganForm.remarks" autocomplete="off"></el-input>
                </el-form-item>
                <el-form-item label="机构状态" :label-width="updateOrganFormLabelWidth" prop="status">
                    <el-radio-group v-model="updateOrganForm.status">
                        <el-radio label="1">启用</el-radio>
                        <el-radio label="0">停用</el-radio>
                    </el-radio-group>
                </el-form-item>         
            </el-form>
            <div slot="footer" class="dialog-footer">
                <el-button @click="resetUpdateOrganForm('updateOrganForm')">重 置</el-button>
                <el-button type="primary" @click="submitUpdateOrganForm('updateOrganForm')">立即修改</el-button>
            </div>
        </el-dialog>

        <el-table
            :data="tableData"
            border
            height="460"
            size="mini"
            style="width: 100%">
                <el-table-column show-overflow-tooltip align="center" prop="orgName" label="机构名称" width="180"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" prop="orgCode" label="机构编号" width="250"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" prop="remarks" label="机构信息描述" width="180"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" prop="orgAddress" label="机构地址"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" label="机构状态" width="120">
                    <template slot-scope="scope">
                        {{ scope.row.status | statusNameFormat }}
                        <!-- <el-button
                        size="mini"
                        type="primary"
                        @click="handleUseStatus(scope.$index, scope.row)">启停</el-button> -->
                    </template>
                </el-table-column>
                <el-table-column show-overflow-tooltip align="center" prop="updateUser" label="最后操作人" width="120"></el-table-column>
                <el-table-column show-overflow-tooltip align="center" label="操作" width="220">
                    <template slot-scope="scope">
                        <el-button
                        size="mini"
                        type="primary"
                        @click="showUpdateOrganForm(scope.$index, scope.row)">修改</el-button>
                        <el-button
                        size="mini"
                        type="primary"
                        @click="handleDelete(scope.$index, scope.row)">清空数据</el-button>
                    </template>
                </el-table-column>
        </el-table>

        <el-pagination
            background
            layout="total, sizes, prev, pager, next, jumper"
            :page-sizes="[10, 20, 30, 50]"
            :total="tableTotal"
            :page-size="tablePageSize"
            :current-page="tableCurrentPage"
            @current-change="handleCurrentChange"
            @size-change="handleSizeChange"
        >
        </el-pagination>
    </layout-page-list>
</template>

<script>
import LayoutPageList from "layout/LayoutPageList.vue";
export default {
    components: {
        LayoutPageList
    },
    data() {
        return {
            //organ table lists
            tableData: [],
            tableTotal : 0,
            tablePageSize: 10,
            tableCurrentPage: 1,
            //add organ form
            addOrganFormVisible: false,
            addOrganForm: {
                orgName: '',
                remarks: '',
                orgAddress: '',
            },
            addOrganFormLabelWidth: '120px',
            addOrganFormRules: {
                orgName: [
                    { required: true, message: '请输入机构名称', trigger: 'blur' },
                    { min: 1, max: 32, message: '长度在 1 到 32 个字符', trigger: 'blur' }
                ],
                orgAddress: [
                    { required: true, message: '请输入机构地址', trigger: 'change' }
                ]
            },
            //update organ form
            updateOrganFormVisible: false,
            updateOrganForm: {
                orgCode: '',
                orgName: '',
                remarks: '',
                orgAddress: '',
                status: 0
            },
            updateOrganFormEmpty: '',
            updateOrganFormLabelWidth: '120px',
            updateOrganFormRules: {
                orgName: [
                    { required: true, message: '请输入机构名称', trigger: 'blur' },
                    { min: 1, max: 32, message: '长度在 1 到 32 个字符', trigger: 'blur' }
                ],
                orgAddress: [
                    { required: true, message: '请输入机构地址', trigger: 'change' }
                ]
            },
        }
    },
    methods: {
        //lists
        getOrganLists() {
            let req = {
                nowpage: this.tableCurrentPage,
                pagesize: this.tablePageSize,
                sort : 'id',
                order: 'desc'
            };

            this.$api.OrganQuery(req).then(res => {
                this.tableTotal = res.data.total;
                this.tableData = res.data.rows;
            }).catch(err => {
                this.$commsgbox.alert(err);
            });
        },
        handleCurrentChange(val) {
            this.tableCurrentPage = val;
            this.getOrganLists();
        },
        handleSizeChange(val) {
            this.tablePageSize = val;
            this.getOrganLists();
        },
        handleUseStatus(index, row) {
            this.$commsgbox.confirm().then(() => {
                let nowStatus = row.status;
                if(nowStatus == 0){
                    nowStatus = 1;
                }else{
                    nowStatus = 0;
                }
                let req = {"orgCode":row.orgCode, "status":nowStatus};
                this.$api.OrganUpStatus(req).then(() => {
                    this.getOrganLists()
                }).catch(err => {
                    this.$commsgbox.alert(err);
                });
            }).catch(() => {

            });
        },
        handleDelete(index, row) {
            this.$commsgbox.confirm('此操作将删除该数据, 是否继续?').then(() => {
                let req = {"orgCode" : row.orgCode};
                this.$api.OrganDel(req).then(() => {
                    this.getOrganLists();
                    this.$refs.layoutRefs.$refs.commonHeaderRefs.getOrganCombox() //更新hearder头部的下拉组织选项
                }).catch(err => {
                    this.$commsgbox.alert(err);
                });
            }).catch(() => {

            });
        },
        //add form
        submitAddOrganForm(formName) {
            this.$refs[formName].validate((valid) => {
                if (valid) {
                    this.$api.OrganAdd(this.addOrganForm).then(() => {
                        this.addOrganFormVisible = false;
                        this.$refs[formName].resetFields();
                        
                        this.tableCurrentPage = 1;
                        this.getOrganLists();
                        this.$refs.layoutRefs.$refs.commonHeaderRefs.getOrganCombox() //更新hearder头部的下拉组织选项
                    }).catch(err => {
                        this.$commsgbox.alert(err);
                    });
                } else {
                    return false;
                }
            });
        },
        resetAddOrganForm(formName) {
            this.$refs[formName].resetFields();
        },
        //update form
        showUpdateOrganForm(index, row) {
            this.updateOrganForm = this.$comfunc.assignNeed(row, this.updateOrganForm);
            console.log(row.status, this.updateOrganForm.status)
            this.updateOrganFormVisible = true;
        },
        submitUpdateOrganForm(formName) {
            this.$refs[formName].validate((valid) => {
                if (valid) {
                    this.$api.OrganUpdate(this.updateOrganForm).then(() => {
                        this.updateOrganForm = this.updateOrganFormEmpty;
                        this.updateOrganFormVisible = false;
                        this.getOrganLists();
                        this.$refs.layoutRefs.$refs.commonHeaderRefs.getOrganCombox() //更新hearder头部的下拉组织选项
                    }).catch(err => {
                        this.$commsgbox.alert(err);
                    });
                } else {
                    return false;
                }
            });
        },
        resetUpdateOrganForm(formName) {
            this.$refs[formName].resetFields();
        },
    },
    created() {
        this.updateOrganFormEmpty = this.updateOrganForm;
        this.getOrganLists();
    },
    filters: {
        statusNameFormat: function(statusVal){
            let statusName = statusVal;
            if(statusVal == 0) { statusName = '停用' }
            else if(statusVal == 1) { statusName = '启用' }
            return statusName;
        }
    }
}
</script>

<style scoped>
.options {
    text-align:left;
    margin-bottom:5px;
}
.el-table {
    padding : 5px 20px;
}
</style>